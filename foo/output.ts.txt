"Generated from Java with JSweet 1.1.0 - http://www.jsweet.org";
class ShimmedSize {
    public width : number;

    public height : number;

    constructor() {
        this.width = 0;
        this.height = 0;
    }
}

class ShimmedApplet {
    public size() : ShimmedSize {
        return null;
    }

    public createImage(x : number, y : number) : ShimmedImage {
        return null;
    }

    public showStatus(s : string) {
    }

    public repaint() {
    }

    public getGraphics() : ShimmedGraphics {
        return null;
    }

    public requestFocus() {
    }
}

class ShimmedColor {
    public static yellow : ShimmedColor = null;

    public static black : ShimmedColor = null;

    public static red : ShimmedColor = null;

    public static gray : ShimmedColor = null;

    public static white : ShimmedColor = null;

    public static blue : ShimmedColor = null;

    public static green : ShimmedColor = null;

    public static pink : ShimmedColor = null;

    public static cyan : ShimmedColor = null;

    public static lightGray : ShimmedColor = null;

    public static darkGray : ShimmedColor = null;

    public constructor(r : number, g : number, b : number) {
    }
}

class ShimmedGraphics {
    public getFont() : ShimmedFont {
        return null;
    }

    public setFont(f : ShimmedFont) {
    }

    public setColor(c : ShimmedColor) {
    }

    public fillRect(x : number, y : number, w : number, h : number) {
    }

    public getFontMetrics() : ShimmedFontMetrics {
        return null;
    }

    public drawString(s : string, x : number, y : number) {
    }

    public drawImage(i : ShimmedImage, x : number, y : number, o : any) {
    }

    public fillOval(x : number, y : number, w : number, h : number) {
    }

    public fillArc(x : number, y : number, w : number, h : number, s : number, e : number) {
    }

    public drawLine(x : number, y : number, w : number, h : number) {
    }

    public fillPolygon(xs : number[], ys : number[], n : number) {
    }

    public drawArc(x : number, y : number, w : number, h : number, s : number, e : number) {
    }
}

class ShimmedImage {
    public getGraphics() : ShimmedGraphics {
        return null;
    }
}

class ShimmedEvent {
    public id : number;

    public x : number;

    public y : number;

    public static KEY_ACTION : number = 0;

    public key : number;

    public static LEFT : number = 1;

    public static RIGHT : number = 2;

    public static UP : number = 3;

    public static DOWN : number = 4;

    public static KEY_ACTION_RELEASE : number = 5;

    constructor() {
        this.id = 0;
        this.x = 0;
        this.y = 0;
        this.key = 0;
    }
}

class ShimmedFont {
    public getName() : string {
        return null;
    }

    public constructor(name : string, w : number, h : number) {
    }
}

class ShimmedFontMetrics {
    public getHeight() : number {
        return 0;
    }

    public stringWidth(s : string) : number {
        return 0;
    }

    public getAscent() : number {
        return 0;
    }
}

class ShimmedThread {
    public static sleep(ms : number) {
    }

    public constructor(r : ShimmedRunnable) {
    }

    public start() {
    }

    public stop() {
    }
}

interface ShimmedRunnable {}

class Marker {}

class WorldCupSoccerSlime extends ShimmedApplet implements ShimmedRunnable {
    public initStuff() {
        this.fEndGame = true;
        this.p1X = 200;
        this.p1Y = 0;
        this.p2X = 800;
        this.p2Y = 0;
        this.p1XV = 0;
        this.p1YV = 0;
        this.p2XV = 0;
        this.p2YV = 0;
        this.p1Score = 0;
        this.p2Score = 0;
        this.ballOldX = this.ballX = 500;
        this.ballOldY = this.ballY = 200;
        this.ballVX = 0;
        this.ballVY = 0;
        this.replayStart = this.replayPos = 0;
        this.fP1Touched = this.fP2Touched = false;
        this.playOnTicks = 10;
        this.fPlayOn = false;
        this.fExtraTime = false;
        this.fGoldenGoal = false;
        this.JUMPVEL = this.fSuperSlime?65:31;
        this.SLIMEVEL = this.fSuperSlime?16:8;
        this.GRAVITY = this.fSuperSlime?8:2;
    }

    private drawButtons() {
        var as : string[] = ["1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"];
        var fontmetrics : ShimmedFontMetrics = this.screen.getFontMetrics();
        var color : ShimmedColor = new ShimmedColor(0, 0, 128);
        for(var i : number = 0; i < 5; i++) {
            this.screen.setColor(color);
            this.screen.fillRect((((2 * i + 1) * this.nWidth) / 10|0) - (this.nWidth / 12|0), ((this.nHeight * 2) / 10|0), (this.nWidth / 6|0), (this.nHeight / 10|0));
            this.screen.setColor(ShimmedColor.white);
            this.screen.drawString(as[i], (((2 * i + 1) * this.nWidth) / 10|0) - (fontmetrics.stringWidth(as[i]) / 2|0), ((this.nHeight * 5) / 20|0) + (fontmetrics.getHeight() / 2|0));
        }
        this.flip();
    }

    private testButton(i : number, j : number) : boolean {
        for(var k : number = 0; k < 5; k++) if(i > (((2 * k + 1) * this.nWidth) / 10|0) - (this.nWidth / 12|0) && i < (((2 * k + 1) * this.nWidth) / 10|0) + (this.nWidth / 12|0) && j > ((this.nHeight * 2) / 10|0) && j < ((this.nHeight * 3) / 10|0)) {
            if(k === 4) {
                this.gameLength = 120000;
                this.worldCup = true;
            } else {
                this.gameLength = (1 << k) * 60000;
                this.worldCup = false;
            }
            return true;
        }
        return false;
    }

    public handleEvent(event : ShimmedEvent) : boolean {
        label0: switch((event.id)) {
        default:
            break;
        case 503:
            this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
            this.requestFocus();
            break;
        case 501:
            this.mousePressed = true;
            if(this.fInPlay || !this.testButton(event.x, event.y)) break;
            this.fEndGame = false;
            this.fInPlay = true;
            this.p1X = 200;
            this.p1Y = 0;
            this.p2X = 800;
            this.p2Y = 0;
            this.p1XV = 0;
            this.p1YV = 0;
            this.p2XV = 0;
            this.p2YV = 0;
            this.ballX = 500;
            this.ballY = 200;
            this.ballOldX = 500;
            this.ballOldY = 200;
            this.ballVX = 0;
            this.ballVY = 0;
            this.p1Score = 0;
            this.p2Score = 0;
            this.promptMsg = "";
            this.paint(this.getGraphics());
            try {
                ShimmedThread.sleep(100);
            } catch(_ex) {
            };
            this.gameThread = new ShimmedThread(this);
            this.gameThread.start();
            break;
        case 401:
        case 403:
            if(this.fCanChangeCol) switch((event.key)) {
            default:
                break;
            case 83:
            case 115:
                do {
                    this.p1Col = this.p1Col === this.slimaryCols.length - 1?0:this.p1Col + 1;
                } while((this.p1Col === this.p2Col));
                this.drawScores();
                this.repaint();
                break;
            case 87:
            case 119:
                do {
                    this.p1Col = this.p1Col !== 0?this.p1Col - 1:this.slimaryCols.length - 1;
                } while((this.p1Col === this.p2Col));
                this.drawScores();
                this.repaint();
                break;
            case 75:
            case 107:
            case 1005:
                do {
                    this.p2Col = this.p2Col === this.slimaryCols.length - 1?0:this.p2Col + 1;
                } while((this.p2Col === this.p1Col));
                this.drawScores();
                this.repaint();
                break;
            case 73:
            case 105:
            case 1004:
                do {
                    this.p2Col = this.p2Col !== 0?this.p2Col - 1:this.slimaryCols.length - 1;
                } while((this.p1Col === this.p2Col));
                this.drawScores();
                this.repaint();
                break;
            case 54:
                this.fSuperSlime = !this.fSuperSlime;
                this.repaint();
                break;
            }
            if(this.fEndGame) break;
            switch((event.key)) {
            default:
                break;
            case 83:
            case 115:
                this.fP1Sticky = true;
                break label0;
            case 75:
            case 107:
            case 1005:
                if(!this.worldCup) this.fP2Sticky = true;
                break label0;
            case 65:
            case 97:
                this.p1XV = -this.SLIMEVEL;
                break label0;
            case 68:
            case 100:
                this.p1XV = this.SLIMEVEL;
                break label0;
            case 87:
            case 119:
                if(this.p1Y === 0) this.p1YV = this.JUMPVEL;
                break label0;
            case 74:
            case 106:
            case 1006:
                if(!this.worldCup) this.p2XV = -this.SLIMEVEL;
                break label0;
            case 76:
            case 108:
            case 1007:
                if(!this.worldCup) this.p2XV = this.SLIMEVEL;
                break label0;
            case 73:
            case 105:
            case 1004:
                if(this.p2Y === 0 && !this.worldCup) this.p2YV = this.JUMPVEL;
                break;
            case 66:
            case 98:
                this.toggleBuffering();
                break;
            case 32:
                this.mousePressed = true;
                break;
            }
            break;
        case 402:
        case 404:
            switch((event.key)) {
            default:
                break label0;
            case 83:
            case 115:
                this.fP1Sticky = false;
                break label0;
            case 75:
            case 107:
            case 1005:
                this.fP2Sticky = false;
                break label0;
            case 65:
            case 97:
                if(this.p1XV < 0) this.p1XV = 0;
                break label0;
            case 68:
            case 100:
                if(this.p1XV > 0) this.p1XV = 0;
                break label0;
            case 74:
            case 106:
            case 1006:
                if(this.p2XV < 0 && !this.worldCup) this.p2XV = 0;
                break label0;
            case 76:
            case 108:
            case 1007:
                break;
            }
            if(this.p2XV > 0 && !this.worldCup) this.p2XV = 0;
            break;
        }
        return false;
    }

    private DrawSlimers() {
        var i : number = (this.nWidth / 10|0);
        var j : number = (this.nHeight / 10|0);
        var k : number = (this.nWidth / 50|0);
        var l : number = (this.nHeight / 25|0);
        var i1 : number = ((this.ballX * this.nWidth) / 1000|0);
        var j1 : number = ((4 * this.nHeight) / 5|0) - ((this.ballY * this.nHeight) / 1000|0);
        var k1 : number = ((this.p1OldX * this.nWidth) / 1000|0) - (i / 2|0);
        var l1 : number = ((7 * this.nHeight) / 10|0) - ((this.p1OldY * this.nHeight) / 1000|0);
        this.screen.setColor(ShimmedColor.blue);
        this.screen.fillRect(k1, l1, i, j);
        k1 = ((this.p2OldX * this.nWidth) / 1000|0) - (i / 2|0);
        l1 = ((7 * this.nHeight) / 10|0) - ((this.p2OldY * this.nHeight) / 1000|0);
        this.screen.setColor(ShimmedColor.blue);
        this.screen.fillRect(k1, l1, i, j);
        if(!this.fEndGame) this.MoveBall();
        k1 = ((this.p1X * this.nWidth) / 1000|0) - (i / 2|0);
        l1 = ((7 * this.nHeight) / 10|0) - ((this.p1Y * this.nHeight) / 1000|0);
        this.screen.setColor(this.fSuperSlime?this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]:this.slimaryCols[this.p1Col]);
        this.screen.fillArc(k1, l1, i, 2 * j, 0, 180);
        this.screen.setColor(this.secondaryCols[this.p1Col]);
        this.pointsX[0] = this.pointsX[2] = k1 + (i / 2|0);
        this.pointsX[1] = k1 + ((i * 2) / 5|0);
        this.pointsX[3] = k1 + (i / 8|0);
        this.pointsY[0] = l1;
        this.pointsY[1] = this.pointsY[3] = l1 + (j / 2|0);
        this.pointsY[2] = l1 + j;
        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
        var i2 : number = this.p1X + 38;
        var j2 : number = this.p1Y - 60;
        k1 = ((i2 * this.nWidth) / 1000|0);
        l1 = ((7 * this.nHeight) / 10|0) - ((j2 * this.nHeight) / 1000|0);
        var k2 : number = k1 - i1;
        var l2 : number = l1 - j1;
        var i3 : number = (<number>Math.sqrt(k2 * k2 + l2 * l2)|0);
        var flag : boolean = Math.random() < 0.01;
        if(flag) this.p1Blink = 5;
        if(this.p1Blink === 0) {
            this.screen.setColor(ShimmedColor.white);
            this.screen.fillOval(k1 - k, l1 - l, k, l);
            if(i3 > 0 && !flag) {
                this.screen.setColor(ShimmedColor.black);
                this.screen.fillOval(k1 - ((4 * k2) / i3|0) - ((3 * k) / 4|0), l1 - ((4 * l2) / i3|0) - ((3 * l) / 4|0), (k / 2|0), (l / 2|0));
            }
        } else {
            this.p1Blink--;
        }
        if(this.p1Score > this.p2Score + 2) {
            var j3 : number = ((this.p1X * this.nWidth) / 1000|0);
            var l3 : number = ((7 * this.nHeight) / 10|0) - (((this.p1Y - 40) * this.nHeight) / 1000|0);
            var j4 : number = (this.nWidth / 20|0);
            var l4 : number = (this.nHeight / 20|0);
            var j5 : number = 0;
            do {
                this.screen.setColor(ShimmedColor.black);
                this.screen.drawArc(j3, l3 + j5, j4, l4, -30, -150);
            } while((++j5 < 3));
        }
        k1 = ((this.p2X * this.nWidth) / 1000|0) - (i / 2|0);
        l1 = ((7 * this.nHeight) / 10|0) - ((this.p2Y * this.nHeight) / 1000|0);
        this.screen.setColor(this.fSuperSlime?this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]:this.slimaryCols[this.p2Col]);
        this.screen.fillArc(k1, l1, i, 2 * j, 0, 180);
        this.screen.setColor(this.secondaryCols[this.p2Col]);
        this.pointsX[0] = this.pointsX[2] = k1 + (i / 2|0);
        this.pointsX[1] = k1 + ((i * 3) / 5|0);
        this.pointsX[3] = k1 + ((i * 7) / 8|0);
        this.pointsY[0] = l1;
        this.pointsY[1] = this.pointsY[3] = l1 + (j / 2|0);
        this.pointsY[2] = l1 + j;
        this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
        i2 = this.p2X - 18;
        j2 = this.p2Y - 60;
        k1 = ((i2 * this.nWidth) / 1000|0);
        l1 = ((7 * this.nHeight) / 10|0) - ((j2 * this.nHeight) / 1000|0);
        k2 = k1 - i1;
        l2 = l1 - j1;
        i3 = (<number>Math.sqrt(k2 * k2 + l2 * l2)|0);
        flag = Math.random() < 0.01;
        if(flag) this.p2Blink = 5;
        if(this.p2Blink === 0) {
            this.screen.setColor(flag?ShimmedColor.gray:ShimmedColor.white);
            this.screen.fillOval(k1 - k, l1 - l, k, l);
            if(i3 > 0 && !flag) {
                this.screen.setColor(ShimmedColor.black);
                this.screen.fillOval(k1 - ((4 * k2) / i3|0) - ((3 * k) / 4|0), l1 - ((4 * l2) / i3|0) - ((3 * l) / 4|0), (k / 2|0), (l / 2|0));
            }
        } else {
            this.p2Blink--;
        }
        if(this.p2Score > this.p1Score + 2) {
            var k3 : number = (this.nWidth / 20|0);
            var i4 : number = (this.nHeight / 20|0);
            var k4 : number = ((this.p2X * this.nWidth) / 1000|0) - k3;
            var i5 : number = ((7 * this.nHeight) / 10|0) - (((this.p2Y - 40) * this.nHeight) / 1000|0);
            var k5 : number = 0;
            do {
                this.screen.setColor(ShimmedColor.black);
                this.screen.drawArc(k4, i5 + k5, k3, i4, -10, -150);
            } while((++k5 < 3));
        }
    }

    public paint(g : ShimmedGraphics) {
        this.nWidth = this.size().width;
        this.nHeight = this.size().height;
        this.screen.setColor(ShimmedColor.blue);
        this.screen.fillRect(0, 0, this.nWidth, ((4 * this.nHeight) / 5|0));
        this.screen.setColor(ShimmedColor.gray);
        this.screen.fillRect(0, ((4 * this.nHeight) / 5|0), this.nWidth, (this.nHeight / 5|0));
        this.screen.setColor(ShimmedColor.white);
        this.drawScores();
        if(!this.fInPlay) {
            this.DrawSlimers();
            this.drawButtons();
        }
        this.DrawGoals();
        this.drawPrompt();
        if(!this.fInPlay) {
            var fontmetrics : ShimmedFontMetrics = this.screen.getFontMetrics();
            this.screen.setColor(ShimmedColor.white);
            if(this.fSuperSlime) this.screen.drawString("Super Soccer Slime!", (this.nWidth / 2|0) - (fontmetrics.stringWidth("Super Soccer Slime!") / 2|0), (this.nHeight / 2|0) - fontmetrics.getHeight()); else this.screen.drawString("Soccer Slime!", (this.nWidth / 2|0) - (fontmetrics.stringWidth("Soccer Slime!") / 2|0), (this.nHeight / 2|0) - fontmetrics.getHeight());
            this.screen.setColor(ShimmedColor.white);
            fontmetrics = this.screen.getFontMetrics();
            this.screen.drawString("Written by Quin Pendragon", (this.nWidth / 2|0) - (fontmetrics.stringWidth("Written by Quin Pendragon") / 2|0), (this.nHeight / 2|0) + fontmetrics.getHeight() * 2);
        }
        this.flip();
    }

    public destroy() {
        this.gameThread.stop();
        this.gameThread = null;
    }

    private ReplayFrame(i : number, j : number, k : number, l : number, i1 : number, flag : boolean) {
        if(flag) {
            this.ballX = -1000;
            this.ballOldX = 500;
            this.ballY = -1000;
            this.ballOldY = 500;
            this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
        } else {
            var j1 : number = i === 0?199:i - 1;
            this.p1OldX = this.replayData[j1][0];
            this.p1OldY = this.replayData[j1][1];
            this.p2OldX = this.replayData[j1][2];
            this.p2OldY = this.replayData[j1][3];
            if(i === 0) {
                this.ballOldX = 500;
                this.ballOldY = 200;
            } else {
                this.ballOldX = this.replayData[j1][4];
                this.ballOldY = this.replayData[j1][5];
            }
        }
        this.p1X = this.replayData[i][0];
        this.p1Y = this.replayData[i][1];
        this.p2X = this.replayData[i][2];
        this.p2Y = this.replayData[i][3];
        this.ballX = this.replayData[i][4];
        this.ballY = this.replayData[i][5];
        this.p1Col = this.replayData[i][6];
        this.p2Col = this.replayData[i][7];
        this.ballVX = 0;
        this.ballVY = 1;
        if(((i / 10|0)) % 2 > 0) {
            this.screen.setColor(ShimmedColor.red);
            this.screen.drawString("Replay...", j, k);
        } else {
            this.screen.setColor(ShimmedColor.blue);
            this.screen.fillRect(j, k - i1, l, i1 * 2);
        }
        this.DrawSlimers();
        this.DrawGoals();
        try {
            ShimmedThread.sleep(20);
            return;
        } catch(_ex) {
            return;
        };
    }

    private MakeTime(l : number) : string {
        var l1 : number = (Math.round(l / 10)) % 100;
        var l2 : number = (Math.round(l / 1000)) % 60;
        var l3 : number = (Math.round(l / 60000)) % 60;
        var s : string = "";
        if(l3 < 10) s = s + "0";
        s = s + l3;
        s = s + ":";
        if(l2 < 10) s = s + "0";
        s = s + l2;
        s = s + ":";
        if(l1 < 10) s = s + "0";
        s = s + l1;
        return s;
    }

    private MoveSlimers() {
        if(this.worldCup) switch((this.worldCupRound)) {
        case 0:
            this.controlP2v0();
            break;
        case 1:
            this.controlP2v1();
            break;
        case 2:
            this.controlP2v2();
            break;
        case 3:
            this.controlP2v3();
            break;
        }
        this.p1X += this.p1XV;
        if(this.p1X < 50) this.p1X = 50;
        if(this.p1X > 950) this.p1X = 950;
        if(this.p1YV !== 0) {
            this.p1Y += this.p1YV -= this.GRAVITY;
            if(this.p1Y < 0) {
                this.p1Y = 0;
                this.p1YV = 0;
            }
        }
        this.p2X += this.p2XV;
        if(this.p2X > 950) this.p2X = 950;
        if(this.p2X < 50) this.p2X = 50;
        if(this.p2YV !== 0) {
            this.p2Y += this.p2YV -= this.GRAVITY;
            if(this.p2Y < 0) {
                this.p2Y = 0;
                this.p2YV = 0;
            }
        }
    }

    public constructor() {
        super();
        Object.defineProperty(this, '__interfaces', { configurable: true, value: ["ShimmedRunnable"] });
        this.nWidth = 0;
        this.nHeight = 0;
        this.p1Score = 0;
        this.p2Score = 0;
        this.p1X = 0;
        this.p2X = 0;
        this.p1Y = 0;
        this.p2Y = 0;
        this.p1Col = 0;
        this.p2Col = 0;
        this.p1OldX = 0;
        this.p2OldX = 0;
        this.p1OldY = 0;
        this.p2OldY = 0;
        this.p1XV = 0;
        this.p2XV = 0;
        this.p1YV = 0;
        this.p2YV = 0;
        this.ballX = 0;
        this.ballY = 0;
        this.ballVX = 0;
        this.ballVY = 0;
        this.ballOldX = 0;
        this.ballOldY = 0;
        this.replayPos = 0;
        this.replayStart = 0;
        this.mousePressed = false;
        this.fCanChangeCol = false;
        this.fInPlay = false;
        this.p1Blink = 0;
        this.p2Blink = 0;
        this.fP1Sticky = false;
        this.fP2Sticky = false;
        this.fP1Touched = false;
        this.fP2Touched = false;
        this.p1TouchingGoal = 0;
        this.p2TouchingGoal = 0;
        this.fEndGame = false;
        this.fPlayOn = false;
        this.nScoreX = 0;
        this.startTime = 0;
        this.gameTime = 0;
        this.scoringRun = 0;
        this.frenzyCol = 0;
        this.playOnTicks = 0;
        this.JUMPVEL = 0;
        this.SLIMEVEL = 0;
        this.GRAVITY = 0;
        this.gameLength = 0;
        this.worldCup = false;
        this.worldCupRound = 0;
        this.fExtraTime = false;
        this.fGoldenGoal = false;
        this.fSuperSlime = false;
        this.doubleBuffered = false;
        this.darkRed = new ShimmedColor(128, 0, 0);
        this.darkGreen = new ShimmedColor(0, 128, 0);
        this.darkBlue = new ShimmedColor(0, 0, 128);
        this.slimaryCols = ([ShimmedColor.cyan, ShimmedColor.red, ShimmedColor.green, this.darkGreen, ShimmedColor.white, this.darkRed, this.darkRed, new ShimmedColor(119, 41, 28), ShimmedColor.yellow, ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(128, 128, 255), this.darkBlue, ShimmedColor.white, ShimmedColor.red, ShimmedColor.white, new ShimmedColor(119, 41, 28), ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(185, 30, 2), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(252, 239, 82), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(16, 180, 180), new ShimmedColor(241, 245, 71), new ShimmedColor(230, 230, 230), ShimmedColor.white]);
        this.secondaryCols = ([ShimmedColor.white, ShimmedColor.black, ShimmedColor.yellow, ShimmedColor.red, ShimmedColor.red, this.darkBlue, ShimmedColor.white, ShimmedColor.white, this.darkBlue, ShimmedColor.green, ShimmedColor.blue, this.darkBlue, ShimmedColor.white, ShimmedColor.white, ShimmedColor.blue, ShimmedColor.white, ShimmedColor.red, this.darkGreen, ShimmedColor.white, new ShimmedColor(128, 255, 128), new ShimmedColor(255, 128, 0), this.darkGreen, this.darkBlue, new ShimmedColor(13, 131, 10), ShimmedColor.white, ShimmedColor.blue, ShimmedColor.red, ShimmedColor.white, ShimmedColor.black, new ShimmedColor(7, 177, 33), ShimmedColor.red, ShimmedColor.black]);
        this.worldCup = false;
        this.pointsX = new Array(4);
        this.pointsY = new Array(4);
        this.p2Col = 1;
        this.replayData = <any> (function(dims) { var allocate = function(dims) { if(dims.length==0) { return undefined; } else { var array = []; for(var i = 0; i < dims[0]; i++) { array.push(allocate(dims.slice(1))); } return array; }}; return allocate(dims);})([200, 8]);
    }

    private MoveBall() {
        var i : number = ((30 * this.nHeight) / 1000|0);
        var j : number = ((this.ballOldX * this.nWidth) / 1000|0);
        var k : number = ((4 * this.nHeight) / 5|0) - ((this.ballOldY * this.nHeight) / 1000|0);
        this.screen.setColor(ShimmedColor.blue);
        this.screen.fillOval(j - i, k - i, i * 2, i * 2);
        this.ballY += --this.ballVY;
        this.ballX += this.ballVX;
        if(!this.fEndGame) {
            var l : number = (this.ballX - this.p1X) * 2;
            var i1 : number = this.ballY - this.p1Y;
            var j1 : number = l * l + i1 * i1;
            var k1 : number = this.ballVX - this.p1XV;
            var l1 : number = this.ballVY - this.p1YV;
            if(i1 > 0 && j1 < 15625 && j1 > 25) {
                var i2 : number = (<number>Math.sqrt(j1)|0);
                var k2 : number = ((l * k1 + i1 * l1) / i2|0);
                this.ballX = this.p1X + ((l * 63) / i2|0);
                this.ballY = this.p1Y + ((i1 * 125) / i2|0);
                if(k2 <= 0) {
                    if(!this.fP1Sticky) {
                        this.ballVY += this.p1YV - ((2 * i1 * k2) / i2|0);
                        this.ballVX += (((this.p1XV - ((2 * l * k2) / i2|0)) * 7) / 10|0);
                    } else {
                        this.ballVX = 0;
                        this.ballVY = 0;
                    }
                    if(this.ballVX < -15) this.ballVX = -15;
                    if(this.ballVX > 15) this.ballVX = 15;
                    if(this.ballVY < -22) this.ballVY = -22;
                    if(this.ballVY > 22) this.ballVY = 22;
                }
                this.fP1Touched = true;
            }
            l = (this.ballX - this.p2X) * 2;
            i1 = this.ballY - this.p2Y;
            j1 = l * l + i1 * i1;
            k1 = this.ballVX - this.p2XV;
            l1 = this.ballVY - this.p2YV;
            if(i1 > 0 && j1 < 15625 && j1 > 25) {
                var j2 : number = (<number>Math.sqrt(j1)|0);
                var l2 : number = ((l * k1 + i1 * l1) / j2|0);
                this.ballX = this.p2X + ((l * 63) / j2|0);
                this.ballY = this.p2Y + ((i1 * 125) / j2|0);
                if(l2 <= 0) {
                    if(!this.fP2Sticky) {
                        this.ballVX += (((this.p2XV - ((2 * l * l2) / j2|0)) * 7) / 10|0);
                        this.ballVY += this.p2YV - ((2 * i1 * l2) / j2|0);
                    } else {
                        this.ballVX = 0;
                        this.ballVY = 0;
                    }
                    if(this.ballVX < -15) this.ballVX = -15;
                    if(this.ballVX > 15) this.ballVX = 15;
                    if(this.ballVY < -22) this.ballVY = -22;
                    if(this.ballVY > 22) this.ballVY = 22;
                }
                this.fP2Touched = true;
            }
            if(this.ballX < 15) {
                this.ballX = 15;
                this.ballVX = -this.ballVX;
            }
            if(this.ballX > 985) {
                this.ballX = 985;
                this.ballVX = -this.ballVX;
            }
            if(this.ballX <= 50 || this.ballX >= 950) {
                if(this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
                    this.ballY = 200;
                    this.ballVY *= -1;
                }
                if(this.ballY > 180 && this.ballY < 220) {
                    if(this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
                        this.ballX = 50;
                        this.ballVX *= -1;
                    }
                    if(this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
                        this.ballX = 950;
                        this.ballVX *= -1;
                    }
                }
            }
            if(this.ballY < 34) {
                this.ballY = 34;
                this.ballVY = ((-this.ballVY * 7) / 10|0);
                this.ballVX = ((this.ballVX * 7) / 10|0);
            }
        }
        j = ((this.ballX * this.nWidth) / 1000|0);
        k = ((4 * this.nHeight) / 5|0) - ((this.ballY * this.nHeight) / 1000|0);
        this.screen.setColor(ShimmedColor.yellow);
        this.screen.fillOval(j - i, k - i, i * 2, i * 2);
    }

    private DrawGoals() {
        this.screen.setColor(ShimmedColor.white);
        this.screen.fillRect((this.nWidth / 20|0), ((4 * this.nHeight) / 5|0) - ((200 * this.nHeight) / 1000|0), 5, ((200 * this.nHeight) / 1000|0));
        this.screen.fillRect(this.nWidth - (this.nWidth / 20|0) - 5, ((4 * this.nHeight) / 5|0) - ((200 * this.nHeight) / 1000|0), 5, ((200 * this.nHeight) / 1000|0));
        this.screen.fillRect(0, ((4 * this.nHeight) / 5|0) + 2, (this.nWidth / 10|0), 2);
        this.screen.fillRect(((this.nWidth * 9) / 10|0), ((4 * this.nHeight) / 5|0) + 2, (this.nWidth / 10|0), 2);
        for(var i : number = 0; i < (this.nWidth / 20|0); i += 5) {
            this.screen.drawLine(i, ((4 * this.nHeight) / 5|0) - ((200 * this.nHeight) / 1000|0), i, ((4 * this.nHeight) / 5|0));
            this.screen.drawLine(this.nWidth - i, ((4 * this.nHeight) / 5|0) - ((200 * this.nHeight) / 1000|0), this.nWidth - i, ((4 * this.nHeight) / 5|0));
        }
        for(var j : number = ((4 * this.nHeight) / 5|0) - (this.nHeight / 5|0); j < ((4 * this.nHeight) / 5|0); j += 5) {
            this.screen.drawLine(0, j, (this.nWidth / 20|0), j);
            this.screen.drawLine(this.nWidth, j, this.nWidth - (this.nWidth / 20|0), j);
        }
        var k : number = (((60 - this.p1TouchingGoal) * this.nWidth) / 120|0);
        this.screen.setColor(this.secondaryCols[this.p1Col]);
        this.screen.fillRect(0, this.nHeight - 5, k, 5);
        this.screen.setColor(ShimmedColor.gray);
        this.screen.fillRect(k, this.nHeight - 5, (this.nWidth / 2|0) - k, 5);
        var l : number = this.nWidth - (((60 - this.p2TouchingGoal) * this.nWidth) / 120|0);
        this.screen.setColor(this.secondaryCols[this.p2Col]);
        this.screen.fillRect(l, this.nHeight - 5, this.nWidth, 5);
        this.screen.setColor(ShimmedColor.gray);
        this.screen.fillRect((this.nWidth / 2|0), this.nHeight - 5, l - (this.nWidth / 2|0), 5);
    }

    private DrawStatus() {
        var g : ShimmedGraphics = this.screen;
        var fontmetrics : ShimmedFontMetrics = this.screen.getFontMetrics();
        var s : string = null;
        var s1 : string = this.MakeTime(this.gameTime);
        var i : number = (this.nHeight / 20|0);
        var j : number = 0;
        var k : number = fontmetrics.stringWidth(s1);
        if(this.worldCup) {
            switch((this.worldCupRound)) {
            case 1:
                s = "Quarter Finals";
                break;
            case 2:
                s = "Semi-Finals";
                break;
            case 3:
                s = "Final";
                break;
            default:
                s = "Qualifying";
                break;
            }
            if(this.fGoldenGoal) s = s + " [Golden Goal]"; else if(this.fExtraTime) s = s + " [Extra Time]";
            j = fontmetrics.stringWidth(s);
        }
        var l : number = j <= k?k:j;
        g.setColor(ShimmedColor.blue);
        g.fillRect((this.nWidth / 2|0) - (l / 2|0) - 5, 0, l + 10, i + 22);
        g.setColor(ShimmedColor.white);
        this.screen.drawString(s1, (this.nWidth / 2|0) - (k / 2|0), fontmetrics.getAscent() + 20);
        if(s != null) this.screen.drawString(s, (this.nWidth / 2|0) - (j / 2|0), (fontmetrics.getAscent() + 20) - fontmetrics.getHeight());
    }

    public drawPrompt$() {
        this.screen.setColor(ShimmedColor.gray);
        this.screen.fillRect(0, ((4 * this.nHeight) / 5|0) + 6, this.nWidth, (this.nHeight / 5|0) - 10);
        this.drawPrompt(this.promptMsg, 0);
    }

    public drawPrompt(s? : any, i? : any) : any {
        if(((typeof s === 'string') || s === null) && ((typeof i === 'number') || i === null)) {
            return <any>(() => {
                var fontmetrics : ShimmedFontMetrics = this.screen.getFontMetrics();
                this.screen.setColor(ShimmedColor.lightGray);
                this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2|0), ((this.nHeight * 4) / 5|0) + fontmetrics.getHeight() * (i + 1) + 10);
            })();
        } else if(s === undefined && i === undefined) {
            return <any>this.drawPrompt$();
        } else throw new Error('invalid overload');
    }

    private promptBox(s : string, s1 : string) {
        var fontmetrics : ShimmedFontMetrics = this.screen.getFontMetrics();
        var i : number = fontmetrics.stringWidth(s);
        var j : number = fontmetrics.stringWidth(s1);
        var k : number = i <= j?j:i;
        this.screen.setColor(ShimmedColor.darkGray);
        this.screen.fillRect((this.nWidth / 2|0) - (k / 2|0) - 20, ((this.nHeight * 2) / 5|0), k + 40, (this.nHeight / 5|0));
        this.screen.setColor(ShimmedColor.white);
        this.screen.drawString(s, (this.nWidth / 2|0) - (i / 2|0), ((this.nHeight * 9) / 20|0));
        this.screen.drawString(s1, (this.nWidth / 2|0) - (j / 2|0), ((this.nHeight * 11) / 20|0));
        this.flip();
    }

    private SaveReplayData() {
        this.replayData[this.replayPos][0] = this.p1X;
        this.replayData[this.replayPos][1] = this.p1Y;
        this.replayData[this.replayPos][2] = this.p2X;
        this.replayData[this.replayPos][3] = this.p2Y;
        this.replayData[this.replayPos][4] = this.ballX;
        this.replayData[this.replayPos][5] = this.ballY;
        this.replayData[this.replayPos][6] = this.p1Col;
        this.replayData[this.replayPos][7] = this.p2Col;
        this.replayPos++;
        if(this.replayPos >= 200) this.replayPos = 0;
        if(this.replayStart === this.replayPos) this.replayStart++;
        if(this.replayStart >= 200) this.replayStart = 0;
    }

    private drawScores() {
        var g : ShimmedGraphics = this.screen;
        var i : number = (this.nHeight / 20|0);
        var fontmetrics : ShimmedFontMetrics = this.screen.getFontMetrics();
        fontmetrics.stringWidth("Replay...");
        g.setColor(ShimmedColor.blue);
        g.fillRect(0, 0, this.nWidth, i + 22);
        g.setColor(ShimmedColor.white);
        g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, (this.nWidth / 20|0), i);
        var s : string = this.p2Score + " : " + this.slimeColText[this.p2Col];
        g.drawString(s, this.nWidth - (this.nWidth / 20|0) - fontmetrics.stringWidth(s), i);
    }

    public checkScored() : boolean {
        if(this.ballY < 200 && (this.ballX < 40 || this.ballX > 960)) {
            this.nScoreX = this.ballX;
            this.fPlayOn = true;
            this.playOnTicks = 10;
            return true;
        } else {
            return false;
        }
    }

    public run() {
        this.worldCupRound = 0;
        do {
            this.initStuff();
            this.replayPos = this.replayStart = 0;
            this.scoringRun = 0;
            this.fP1Touched = this.fP2Touched = false;
            this.gameTime = 0;
            this.startTime = java.lang.System.currentTimeMillis();
            this.fEndGame = false;
            this.fCanChangeCol = false;
            this.mousePressed = false;
            this.gameTime = this.gameLength;
            this.fInPlay = true;
            this.fEndGame = false;
            if(this.worldCup) {
                this.paint(this.getGraphics());
                do {
                    this.p2Col = (<number>((Math.random() * <number>this.slimaryCols.length) / 4.0)|0) + ((this.worldCupRound * this.slimaryCols.length) / 4|0);
                } while((this.p1Col === this.p2Col));
                var s : string = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
                switch((this.worldCupRound)) {
                case 0:
                    this.promptBox("Qualifying Round", s);
                    this.gameLength = 30000;
                    break;
                case 1:
                    this.promptBox("Quarter Finals", s);
                    this.gameLength = 120000;
                    break;
                case 2:
                    this.promptBox("Semi-Finals", s);
                    this.gameLength = 120000;
                    break;
                case 3:
                    this.promptBox("World Cup Final", s);
                    this.gameLength = 300000;
                    break;
                }
                try {
                    ShimmedThread.sleep(4000);
                } catch(_ex) {
                };
                this.repaint();
                this.flip();
            }
            while((this.gameTime > 0 || this.worldCup && this.worldCupRound > 0 && this.p1Score === this.p2Score)){
                this.gameTime = (this.startTime + Math.round(<number>this.gameLength)) - java.lang.System.currentTimeMillis();
                if(this.gameTime < 0) this.gameTime = 0;
                if(this.worldCup && !this.fExtraTime && this.gameTime <= 0 && this.worldCupRound > 0 && this.p1Score === this.p2Score) {
                    var s1 : string = this.p1Score !== 0?" " + this.p1Score:" nil";
                    this.promptBox("The score is " + this.slimeColText[this.p1Col] + s1 + ", " + this.slimeColText[this.p2Col] + s1 + ".", "And the game goes into extra time...");
                    try {
                        ShimmedThread.sleep(4000);
                    } catch(_ex) {
                    };
                    this.repaint();
                    this.flip();
                    this.startTime += 30000;
                    this.gameTime += 30000;
                    this.fExtraTime = true;
                } else if(this.gameTime <= 0 && this.fExtraTime && !this.fGoldenGoal && this.p1Score === this.p2Score) {
                    this.fGoldenGoal = true;
                    var s2 : string = this.p1Score !== 0?" " + this.p1Score:" nil";
                    this.promptBox("The score is " + this.slimeColText[this.p1Col] + s2 + ", " + this.slimeColText[this.p2Col] + s2 + ", and the game goes into Golden Goal.", "The next player to score will win the match!");
                    try {
                        ShimmedThread.sleep(4000);
                    } catch(_ex) {
                    };
                    this.repaint();
                    this.flip();
                }
                this.SaveReplayData();
                this.p1OldX = this.p1X;
                this.p1OldY = this.p1Y;
                this.p2OldX = this.p2X;
                this.p2OldY = this.p2Y;
                this.ballOldX = this.ballX;
                this.ballOldY = this.ballY;
                this.MoveSlimers();
                this.DrawSlimers();
                this.DrawGoals();
                this.DrawStatus();
                this.flip();
                if(this.p1X < 150) this.p1TouchingGoal++; else this.p1TouchingGoal = 0;
                if(this.p2X > 850) this.p2TouchingGoal++; else this.p2TouchingGoal = 0;
                if(this.fPlayOn) this.playOnTicks--; else this.fPlayOn = this.checkScored();
                if(this.playOnTicks === 0 || this.p1TouchingGoal > 60 || this.p2TouchingGoal > 60) {
                    var l : number = java.lang.System.currentTimeMillis();
                    if(this.p1TouchingGoal > 60) {
                        this.p2Score++;
                        this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
                    } else if(this.p2TouchingGoal > 60) {
                        this.p1Score++;
                        this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
                    } else if(this.nScoreX < 500) {
                        this.p2Score++;
                        this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
                    } else {
                        this.p1Score++;
                        this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
                    }
                    this.drawPrompt();
                    this.drawPrompt("Click mouse for replay...", 1);
                    this.flip();
                    this.mousePressed = false;
                    if(this.gameThread != null) try {
                        ShimmedThread.sleep(2500);
                    } catch(_ex) {
                    };
                    if(this.mousePressed) {
                        this.SaveReplayData();
                        this.DoReplay();
                    }
                    this.promptMsg = "";
                    this.drawPrompt();
                    this.playOnTicks = 10;
                    this.fPlayOn = false;
                    this.startTime += java.lang.System.currentTimeMillis() - l;
                    this.ballX = 490 + (<number>(Math.random() * 20.0)|0);
                    this.ballY = 190 + (<number>(Math.random() * 20.0)|0);
                    this.ballVX = 0;
                    this.ballVY = 0;
                    this.p1X = 200;
                    this.p1Y = 0;
                    this.p1YV = 0;
                    this.p2X = 800;
                    this.p2Y = 0;
                    this.p2YV = 0;
                    this.replayStart = this.replayPos = 0;
                    this.repaint();
                }
                if(this.gameThread != null) try {
                    if(this.fPlayOn) ShimmedThread.sleep(120); else ShimmedThread.sleep(20);
                } catch(_ex) {
                };
            };
            this.fEndGame = true;
            if(this.fPlayOn) {
                if(this.nScoreX < 500) {
                    this.p2Score++;
                    this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
                } else {
                    this.p1Score++;
                    this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
                }
                this.drawPrompt();
            } else {
                this.drawPrompt("And that\'s the final whistle!", 0);
            }
            if(this.worldCup) {
                if(this.p1Score === this.p2Score) {
                    this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
                    this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
                    this.worldCup = false;
                    this.flip();
                } else if(this.p1Score >= this.p2Score) {
                    switch((this.worldCupRound)) {
                    case 0:
                        this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
                        break;
                    case 1:
                        this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
                        break;
                    case 2:
                        this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
                        break;
                    case 3:
                        this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
                        break;
                    }
                    if(this.worldCupRound === 3) {
                        this.worldCup = false;
                        this.promptBox("You win the world cup!!!", "Congratulations!");
                    } else {
                        this.worldCupRound++;
                    }
                } else {
                    switch((this.worldCupRound)) {
                    case 0:
                    case 1:
                        this.promptBox("You have been eliminated.", "Goodbye.");
                        break;
                    case 2:
                        this.promptBox("You have been knocked out of the semifinals.", "You played well.");
                        break;
                    case 3:
                        this.promptBox("You came second.", "Are you satisfied with that?");
                        break;
                    }
                    this.worldCup = false;
                }
            } else if(this.p1Score === this.p2Score) this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1); else if(this.p1Score < this.p2Score) this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1); else this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
            this.flip();
            try {
                ShimmedThread.sleep(5000);
            } catch(_ex) {
            };
            this.initStuff();
        } while((this.worldCup));
        this.fCanChangeCol = true;
        this.fInPlay = false;
        this.repaint();
    }

    public init() {
        this.nWidth = this.size().width;
        this.nHeight = this.size().height;
        this.fInPlay = this.fEndGame = false;
        this.fCanChangeCol = true;
        this.initStuff();
        this.promptMsg = "Click on an option to play...";
        this.backBuffer = this.createImage(this.nWidth, this.nHeight);
        this.screen = this.getGraphics();
        this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));
    }

    private toggleBuffering() {
        if(this.doubleBuffered = !this.doubleBuffered) {
            this.screen = this.backBuffer.getGraphics();
            this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));
        } else {
            this.screen = this.getGraphics();
            this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));
        }
        this.repaint();
    }

    private DoReplay() {
        var fontmetrics : ShimmedFontMetrics = this.screen.getFontMetrics();
        var i : number = fontmetrics.stringWidth("Replay...");
        var j : number = fontmetrics.getHeight();
        var k : number = (this.nWidth / 2|0) - (i / 2|0);
        var l : number = (this.nHeight / 2|0) - j;
        this.promptMsg = "Click the mouse to continue...";
        this.mousePressed = false;
        var i1 : number = this.replayPos - 1;
        while((!this.mousePressed)){
            if(++i1 >= 200) i1 = 0;
            if(i1 === this.replayPos) {
                try {
                    ShimmedThread.sleep(1000);
                } catch(_ex) {
                };
                i1 = this.replayStart;
                this.paint(this.getGraphics());
            }
            this.ReplayFrame(i1, k, l, i, j, false);
            this.flip();
        };
        this.promptMsg = "";
        this.paint(this.getGraphics());
    }

    private flip() {
        if(this.doubleBuffered) this.getGraphics().drawImage(this.backBuffer, 0, 0, null);
    }

    private getBallBounceX() : number {
        var i : number = this.ballVY + (<number>Math.sqrt(this.ballVY * this.ballVY + 2 * this.ballY)|0);
        var j : number = this.ballX + i * this.ballVX;
        if(j < 0) j = -j;
        if(j > 1000) j = 1000 - j;
        return j;
    }

    private getBallMaxY() : number {
        if(this.ballVY < 0) return this.ballY; else return this.ballY + ((this.ballVY * this.ballVY) / 2|0);
    }

    private controlP2v0() {
        this.p2XV = 0;
        if(this.ballX > this.p2X + 5 && this.ballX < 960) this.fP2Sticky = true;
        if(this.ballX > this.p2X - 10) this.p2XV = this.SLIMEVEL;
        if(this.ballX + 30 > this.p2X && this.p2YV === 0) {
            this.fP2Sticky = false;
            this.p2YV = this.JUMPVEL;
        }
        if(this.ballX + 50 < this.p2X) {
            this.fP2Sticky = false;
            this.p2XV = -this.SLIMEVEL;
        }
        if(this.ballX > this.p2X + 50 && this.p2YV === 0 && this.ballY > 10 && this.ballY < 150) this.p2YV = this.JUMPVEL;
        if(this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL|0)) this.p2XV = -this.SLIMEVEL;
    }

    private controlP2v1() {
        this.p2XV = 0;
        var i : number = this.getBallBounceX();
        var j : number = this.getBallMaxY();
        if(i > 900) this.p2XV = this.SLIMEVEL;
        if(i + 20 < this.p2X) {
            this.fP2Sticky = false;
            this.p2XV = -this.SLIMEVEL;
        }
        if(this.ballX > this.p2X - 10) this.p2XV = this.SLIMEVEL;
        if(this.ballX + 30 > this.p2X && this.p2YV === 0) {
            this.fP2Sticky = false;
            this.p2YV = this.JUMPVEL;
        }
        if(i > this.p2X + 50 && this.p2YV === 0) this.p2XV = this.SLIMEVEL;
        if(this.ballX > this.p2X && this.ballX < 960) this.fP2Sticky = true;
        if(this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) this.p2XV = this.SLIMEVEL;
        if(this.p2Score >= this.p1Score && i < 200 && this.p2X > this.p1X || i < this.p1X + 50 && i > this.p1X - 50 && (this.ballVY / 4|0) === 0 && this.p1X < 400 && this.p2X < 848) {
            if(this.p2X < 900) this.p2XV = this.SLIMEVEL;
            if(this.ballX > 800 && i > 950 && this.p2YV === 0 && j > 40) this.p2YV = this.JUMPVEL;
        }
        if(this.p2YV === this.JUMPVEL) {
            if(j < 110) this.p2YV = 0;
            if(this.ballX < this.p2X - 400) this.p2YV = 0;
            if(this.ballY < 80) this.p2YV = 0;
            if(this.ballX < 900 && this.p2X > 900) this.p2YV = 0;
            if(this.p2X < 150) this.p2YV = 0;
        }
        if(this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL|0)) this.p2XV = -this.SLIMEVEL;
    }

    private controlP2v2() {
        var i : number = this.getBallBounceX();
        var j : number = this.getBallMaxY();
        if(this.p2X < 790) this.p2XV = this.SLIMEVEL; else if(this.p2X > 830) this.p2XV = -this.SLIMEVEL; else this.p2XV = 0;
        if(i > 900) this.p2XV = this.SLIMEVEL;
        if(i + 20 < this.p2X) {
            this.fP2Sticky = false;
            this.p2XV = -this.SLIMEVEL;
        }
        if(this.ballX > this.p2X - 10) this.p2XV = this.SLIMEVEL;
        if(this.ballX + 30 > this.p2X && this.p2YV === 0) {
            this.fP2Sticky = false;
            this.p2YV = this.JUMPVEL;
        }
        if(i > this.p2X + 50 && this.p2YV === 0) this.p2XV = this.SLIMEVEL;
        if(this.ballX > this.p2X && this.ballX < 960) this.fP2Sticky = true;
        if(this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) this.p2XV = this.SLIMEVEL;
        if(this.p2Score >= this.p1Score && i < 200 && this.p2X > this.p1X || i < this.p1X + 50 && i > this.p1X - 50 && (this.ballVY / 4|0) === 0 && this.p1X < 400 && this.p2X < 848) {
            if(this.p2X < 900) this.p2XV = this.SLIMEVEL;
            if(this.ballX > 800 && i > 950 && this.p2YV === 0 && j > 40) this.p2YV = this.JUMPVEL;
        }
        if(this.p2YV === this.JUMPVEL) {
            if(j < 110) this.p2YV = 0;
            if(this.ballX < this.p2X - 400) this.p2YV = 0;
            if(this.ballY < 80) this.p2YV = 0;
            if(this.ballX < 900 && this.p2X > 900) this.p2YV = 0;
        }
        if(this.p2YV === 0 && this.p2X < 400 && i > 500 && j > 50) this.p2YV = this.JUMPVEL;
        if(this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / this.SLIMEVEL|0)) this.p2XV = -this.SLIMEVEL;
    }

    private controlP2v3() {
        var i : number = ((this.SLIMEVEL * 4) / 3|0);
        var j : number = this.getBallBounceX();
        var k : number = this.getBallMaxY();
        if(this.p2X < 790) this.p2XV = i; else if(this.p2X > 830) this.p2XV = -i; else this.p2XV = 0;
        if(j > 900) this.p2XV = i;
        if(j + 20 < this.p2X) {
            this.fP2Sticky = false;
            this.p2XV = -i;
        }
        if(this.ballX > this.p2X - 10) this.p2XV = i;
        if(this.ballX + 30 > this.p2X && this.p2YV === 0) {
            this.fP2Sticky = false;
            this.p2YV = this.JUMPVEL;
        }
        if(j > this.p2X + 50 && this.p2YV === 0) this.p2XV = i;
        if(this.ballX > this.p2X && this.ballX < 960) this.fP2Sticky = true;
        if(this.p2YV === 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) this.p2XV = i;
        if(this.p2Score >= this.p1Score && j < 200 && this.p2X > this.p1X || j < this.p1X + 50 && j > this.p1X - 50 && (this.ballVY / 4|0) === 0 && this.p1X < 400 && this.p2X < 848) {
            if(this.p2X < 900) this.p2XV = i;
            if(this.ballX > 800 && j > 950 && this.p2YV === 0 && k > 40) this.p2YV = this.JUMPVEL;
        }
        if(this.p2YV === this.JUMPVEL) {
            if(k < 110) this.p2YV = 0;
            if(this.ballX < this.p2X - 400) this.p2YV = 0;
            if(this.ballY < 80) this.p2YV = 0;
            if(this.ballX < 900 && this.p2X > 900) this.p2YV = 0;
            if(this.p2XV > 0 && k > 200 && j > this.p2X + 300) this.p2YV = 0;
        }
        if(this.p2YV === 0 && this.p2X < 400 && j > this.p2X + 400 && k > 50) this.p2YV = this.JUMPVEL;
        if(this.p2TouchingGoal > 0 && 60 - this.p2TouchingGoal < 3 + ((this.p2X - 850) / i|0)) this.p2XV = -i;
    }

    private p(s : string) {
        console.info(s);
    }

    private nWidth : number;

    private nHeight : number;

    private p1Score : number;

    private p2Score : number;

    private p1X : number;

    private p2X : number;

    private p1Y : number;

    private p2Y : number;

    private p1Col : number;

    private p2Col : number;

    private slimeColText : string[] = ["Argentina", "Belgium", "Australia", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany"];

    private darkRed : ShimmedColor;

    private darkGreen : ShimmedColor;

    private darkBlue : ShimmedColor;

    private slimaryCols : ShimmedColor[];

    private secondaryCols : ShimmedColor[];

    private p1OldX : number;

    private p2OldX : number;

    private p1OldY : number;

    private p2OldY : number;

    private p1XV : number;

    private p2XV : number;

    private p1YV : number;

    private p2YV : number;

    private ballX : number;

    private ballY : number;

    private ballVX : number;

    private ballVY : number;

    private ballOldX : number;

    private ballOldY : number;

    private screen : ShimmedGraphics;

    private promptMsg : string;

    private replayData : number[][];

    private replayPos : number;

    private replayStart : number;

    private mousePressed : boolean;

    private fCanChangeCol : boolean;

    private fInPlay : boolean;

    private p1Blink : number;

    private p2Blink : number;

    private fP1Sticky : boolean;

    private fP2Sticky : boolean;

    private fP1Touched : boolean;

    private fP2Touched : boolean;

    private p1TouchingGoal : number;

    private p2TouchingGoal : number;

    private gameThread : ShimmedThread;

    private fEndGame : boolean;

    private fPlayOn : boolean;

    private nScoreX : number;

    private startTime : number;

    private gameTime : number;

    private scoringRun : number;

    private frenzyCol : number;

    private playOnTicks : number;

    private backBuffer : ShimmedImage;

    private SMILE_DIFF : number = 2;

    private DAMPING : number = 7;

    private MAX_TICKS_TOUCHING_GOAL : number = 60;

    private JUMPVEL : number;

    private SLIMEVEL : number;

    private GRAVITY : number;

    private gameLength : number;

    private worldCup : boolean;

    private worldCupRound : number;

    private fExtraTime : boolean;

    private fGoldenGoal : boolean;

    private fSuperSlime : boolean;

    private doubleBuffered : boolean;

    private pointsX : number[];

    private pointsY : number[];
}


