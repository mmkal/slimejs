public class ShimmedSize {
	public int width;
	public int height;
}
public class ShimmedApplet {
	public ShimmedSize size() { return null; }
	public ShimmedImage createImage(int x, int y) { return null; }
	public void showStatus(String s) {}
	public void repaint() {}
	public ShimmedGraphics getGraphics() { return null; }
	public void requestFocus() {}
	public int getWidth() { return 0; }
	public int getHeight() { return 0; }
	public ShimmedDocumentBase getDocumentBase() { return null; }
	public ShimmedAppletContext getAppletContext() { return null; }
	public ShimmedURL getCodeBase() { return null; }
	public ShimmedAudioClip getAudioClip(ShimmedURL u, String s) { return null; }
	public ShimmedImage getImage(ShimmedURL u, String s) { return null; }
}
public class ShimmedColor {
	public static ShimmedColor yellow = null;
	public static ShimmedColor black = null;
	public static ShimmedColor red = null;
	public static ShimmedColor gray = null;
	public static ShimmedColor white = null;
	public static ShimmedColor blue = null;
	public static ShimmedColor green = null;
	public static ShimmedColor pink = null;
	public static ShimmedColor cyan = null;
	public static ShimmedColor lightGray = null;
	public static ShimmedColor darkGray = null;
	public static ShimmedColor orange = null;
	public ShimmedColor(int r, int g, int b) {}
}
public class ShimmedGraphics {
	public ShimmedFont getFont() { return null; }
	public void setFont(ShimmedFont f) {}
	public void setColor(ShimmedColor c) {}
	public void fillRect(int x, int y, int w, int h) {}
	public ShimmedFontMetrics getFontMetrics() { return null; }
	public void drawString(String s, int x, int y) {}
	public void drawImage(ShimmedImage i, int x, int y, Object o) {}
	public void drawOval(int x, int y, int w, int h) {}
	public void fillOval(int x, int y, int w, int h) {}
	public void fillArc(int x, int y, int w, int h, int s, int e) {}
	public void drawLine(int x, int y, int w, int h) {}
	public void drawRect(int x, int y, int w, int h) {}
	public void fillPolygon(int[] xs, int[] ys, int n) {}
	public void fillPolygon(ShimmedPolygon p) {}
	public void drawArc(int x, int y, int w, int h, int s, int e) {}
}
public class ShimmedImage {
	public ShimmedGraphics getGraphics() { return null; }
	public int getHeight(ShimmedApplet a) { return 0; }
}
public class ShimmedEvent {
	public int id;
	public int x;
	public int y;
	public int key;
	public ShimmedButton target;
	public static final int KEY_ACTION = 0;
	public static final int LEFT = 1;
	public static final int RIGHT = 2;
	public static final int UP = 3;
	public static final int DOWN = 4;
	public static final int KEY_ACTION_RELEASE = 5;
}
public class ShimmedFont {
	public String getName() { return null; }
	public ShimmedFont(String name, int w, int h) {}
}
public class ShimmedFontMetrics {
	public int getHeight() { return 0; }
	public int stringWidth(String s) { return 0; }
	public int getAscent() { return 0; }
}
public class ShimmedThread {
    public static void sleep(long ms) {}
    public static void sleep(long ms, boolean b) {}
    public ShimmedThread(ShimmedRunnable r) {}
    public void start() {}
    public void stop() {}
}
public interface ShimmedRunnable {}

public class ShimmedAppletContext {
	public void showDocument(ShimmedURL u) {}
	public void showDocument(ShimmedURL u, String s) {}
}
public class ShimmedDocumentBase {
	public String getHost() { return null; }
}
public class ShimmedURL { 
	public ShimmedURL(String s) {}
	public ShimmedInputStream openStream() { return null; }
}
public class ShimmedPrintStream {
	public Object print(Object s) { return null; }
	public Object println() { return null; }
	public Object println(Object s) { return null; }
}
public class ShimmedSystem {
	public static ShimmedPrintStream out = null;
	public static long currentTimeMillis() { return 0L; }
}
public class ShimmedBufferedImage extends ShimmedImage {
	public ShimmedBufferedImage(int x, int y, int z) {}
	public ShimmedBufferedImage getSubimage(int a, int b, int c, int d) { return null; }
}
public class ShimmedVector {
	public ShimmedVector(int n) {}
	public void removeAllElements() {}
	public Object get(int i) { return null; }
	public int size() { return 0; }
	public void add(int[] x) {}
}
public class ShimmedElement {
	public void add(ShimmedElement e) {}
}
public class ShimmedFrame extends ShimmedElement {
	public void setTitle(String s) {}
	public void pack() {}
	public void show() {}
	public void dispose() {}
	public void setLayout(ShimmedGridLayout g) {}
}
public class ShimmedTextField extends ShimmedElement {
	public ShimmedTextField(int s) {}
	public String getText() { return null; }
}
public class ShimmedButton extends ShimmedElement {
	public ShimmedButton(String s) {}
}
public class ShimmedPolygon {
	public ShimmedPolygon(int[] xs, int[] ys, int n) {}
}
public class ShimmedInputStream {
	public void close() {}
}
public class ShimmedBufferedReader {
	public ShimmedBufferedReader(ShimmedInputStreamReader i) {}
	public String readLine() { return null; }
	public void close() {}
}
public class ShimmedInputStreamReader {
	public ShimmedInputStreamReader(ShimmedInputStream is) {}
}
public class ShimmedPanel extends ShimmedElement {
}
public class ShimmedLabel extends ShimmedElement {
	public ShimmedLabel(String s) {}
}
public class ShimmedGridLayout {
	public ShimmedGridLayout(int x, int y) {}
}
public class ShimmedLong {
	public static long parseLong(String s) { return 0L; }
}
public class ShimmedChars {
	/** Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints. */
	public static char[] charCodeArray(String s) { return null; }
}
public class ShimmedImageObserver {

}
public class ShimmedRandom {
	public int nextInt(int m) { return 0; }
}
public class ShimmedAudioClip {
	public void play() {}
}
public class ShimmedStringBuffer {
	public ShimmedStringBuffer() {}
	public ShimmedStringBuffer(Object i) {}
	public ShimmedStringBuffer append(Object s) { return null; }
}

public class EndOfShimDeclarations{}

public class SlimeCricket2 extends ShimmedApplet implements ShimmedRunnable {
   private int p1Diam = 75;
   private int p2Diam = 75;
   private int ballRad = 13;
   private int nWidth;
   private int nHeight;
   private int p1X;
   private int p1Y;
   private int p2X;
   private int p2Y;
   private int p3X;
   private int p3Y;
   private int p1Col;
   private int p2Col;
   private ShimmedColor[] slimeColours;
   private ShimmedColor[] slimeColours2;
   private String[] slimeColText;
   private String[] slimeColAbbr;
   private ShimmedColor[] difficultyColours;
   private String[] difficultyText;
   private int difficulty;
   private int p1OldX;
   private int p1OldY;
   private int p2OldX;
   private int p2OldY;
   private int p3OldY;
   private int p1XV;
   private int p1YV;
   private int p2XV;
   private int p2YV;
   private int p3YV;
   private int ballX;
   private int ballY;
   private int ballVX;
   private int ballVY;
   private int ballOldX;
   private int ballOldY;
   private ShimmedGraphics screen;
   private String promptMsg;
   private boolean mousePressed;
   private boolean fCanChangeCol;
   private boolean fInPlay;
   private int p1Blink;
   private int p2Blink;
   private boolean fP1Touched;
   private boolean fP2Touched;
   private ShimmedThread gameThread;
   private boolean fEndGame;
   private ShimmedColor BALL_COL;
   private ShimmedColor COURT_COL;
   private ShimmedColor DAY_COL;
   private ShimmedColor NIGHT_COL;
   private ShimmedColor SKY_COL;
   private int bounces;
   private boolean fEndOfOver;
   private boolean fHitBackWall;
   private int p1XMin;
   private int p2XMin;
   private int p2XMax;
   private int ballXMax;
   private int p1Touches;
   private int ballCount;
   private int postPos;
   private int bowlingCrease;
   private int runningCrease;
   private int battingCrease;
   private long p1Score;
   private long p2Score;
   private int inns;
   private int wicketPenalty;
   private boolean fNoBall;
   private int overs;
   private int stillFrames;
   private ShimmedImage buffer;
   private int thisBall;
   private String thisOver;
   private long[] p1bxb;
   private long[] p2bxb;
   private boolean p1Hold;
   private boolean ballbowled;
   private boolean p1next;
   private boolean p2next;
   private int wait;
   private boolean p1ai;
   private boolean p2ai;
   private int balltype;
   private int shottype;
   private final int AI_COL;
   private final String[] COMM_FOUR;
   private final String[] COMM_FOURTOUCHED;
   private final String[] COMM_SIX;
   private final String[] COMM_SIXTOUCHED;
   private final String[] COMM_STUMPED;
   private final String[] COMM_RUNOUT;
   private final String[] COMM_BOWLED;
   private final String[] COMM_PLAYEDON;
   private final String[] COMM_CAUGHT;
   private final String[] COMM_CTBEHIND;
   private final String[] COMM_OUT_GENERIC;

   public void init() {
      this.nWidth = this.size().width;
      this.nHeight = this.size().height;
      this.buffer = this.createImage(this.nWidth, this.nHeight);
      this.fInPlay = false;
      this.fEndGame = true;
      this.fEndOfOver = false;
      this.fCanChangeCol = true;
      this.promptMsg = "Click team names to select teams, an opponent, then choose an innings length to start!";
      this.screen = this.buffer.getGraphics();
      this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));
      this.p1Col = 9;
      this.p2Col = 9;
      this.inns = 0;
   }

   public void paint(ShimmedGraphics var1) {
      ShimmedGraphics var2 = this.buffer.getGraphics();
      this.nWidth = this.size().width;
      this.nHeight = this.size().height;
      var2.setColor(this.SKY_COL);
      var2.fillRect(0, 0, this.nWidth, 4 * this.nHeight / 5);
      var2.setColor(this.COURT_COL);
      var2.fillRect(0, 4 * this.nHeight / 5, this.nWidth, this.nHeight / 5);
      var2.setColor(ShimmedColor.white);
      var2.fillRect(this.nWidth * this.postPos / 1000 - 2, this.nHeight * 7 / 10, 3, this.nHeight / 10);
      var2.fillRect(this.nWidth * this.bowlingCrease / 1000 - 1, this.nHeight * 4 / 5, 2, 5);
      var2.fillRect(this.nWidth * this.runningCrease / 1000 - 1, this.nHeight * 4 / 5, 2, 5);
      var2.fillRect(this.nWidth * this.battingCrease / 1000 - 1, this.nHeight * 4 / 5, 2, 5);
      this.drawPrompt();
      ShimmedFontMetrics var3;
      if(!this.fInPlay && this.fEndGame) {
         var3 = this.screen.getFontMetrics();
         this.screen.setColor(ShimmedColor.white);
         this.screen.drawString("Slime Cricket 2: World Cup Edition BETA", this.nWidth / 2 - var3.stringWidth("Slime Cricket 2: World Cup Edition BETA") / 2, this.nHeight / 2 - var3.getHeight() * 7);
         this.screen.drawString("This is not the final version of the game!", this.nWidth / 2 - var3.stringWidth("This is not the final version of the game!") / 2, this.nHeight / 2 - var3.getHeight() * 6);
         this.screen.setColor(this.slimeColours[this.p2Col]);
         this.screen.fillRect(this.nWidth / 4 - var3.stringWidth(this.slimeColText[this.p2Col]) / 2 - 10, this.nHeight / 2 - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p2Col]) + 20, var3.getAscent() * 2);
         this.screen.setColor(this.slimeColours2[this.p2Col]);
         this.screen.drawString(this.slimeColText[this.p2Col], this.nWidth / 4 - var3.stringWidth(this.slimeColText[this.p2Col]) / 2, this.nHeight / 2 - var3.getAscent() / 2);
         this.screen.setColor(this.slimeColours[this.p1Col]);
         this.screen.fillRect(this.nWidth / 2 - var3.stringWidth(this.slimeColText[this.p1Col]) / 2 - 10, this.nHeight / 2 - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p1Col]) + 20, var3.getAscent() * 2);
         this.screen.setColor(this.slimeColours2[this.p1Col]);
         this.screen.drawString(this.slimeColText[this.p1Col], this.nWidth / 2 - var3.stringWidth(this.slimeColText[this.p1Col]) / 2, this.nHeight / 2 - var3.getAscent() / 2);
         this.screen.setColor(this.difficultyColours[this.difficulty]);
         this.screen.fillRect(this.nWidth * 3 / 4 - var3.stringWidth(this.difficultyText[this.difficulty]) / 2 - 10, this.nHeight / 2 - var3.getAscent() * 2, var3.stringWidth(this.difficultyText[this.difficulty]) + 20, var3.getAscent() * 2);
         this.screen.setColor(ShimmedColor.white);
         this.screen.drawString(this.difficultyText[this.difficulty], this.nWidth * 3 / 4 - var3.stringWidth(this.difficultyText[this.difficulty]) / 2, this.nHeight / 2 - var3.getAscent() / 2);
         var2.setColor(ShimmedColor.white);
         this.screen.setColor(this.SKY_COL);

         for(int var4 = 0; var4 < 5; ++var4) {
            var2.fillRect(this.nWidth / 4 + var4 * this.nWidth / 10 + 5, this.nHeight * 2 / 3 - var3.getAscent() * 3 / 2, this.nWidth / 10 - 10, 2 * var3.getAscent());
            this.screen.drawString(var4 + 1 + " overs", this.nWidth * 3 / 10 + var4 * this.nWidth / 10 - var3.stringWidth(var4 + 1 + " overs") / 2, this.nHeight * 2 / 3 - var3.getAscent() * 0);
         }

         var3 = var2.getFontMetrics();
         var2.setColor(ShimmedColor.white);
         var2.drawString("Written by Wedgey and Fractoid", this.nWidth / 2 - var3.stringWidth("Written by Wedgey and Fractoid") / 2, this.nHeight / 2 - var3.getHeight() * 6);
         var2.drawString("with input from Browny, Chucky and Damo", this.nWidth / 2 - var3.stringWidth("with input from Browny, Chucky and Damo") / 2, this.nHeight / 2 - var3.getHeight() * 5);
         this.drawScores();
         var2.drawString("Bowling first", this.nWidth / 4 - var3.stringWidth("Bowling first") / 2, this.nHeight / 2 - var3.getAscent() * 3);
         var2.drawString("Batting first", this.nWidth / 2 - var3.stringWidth("Batting first") / 2, this.nHeight / 2 - var3.getAscent() * 3);
         var2.drawString("Difficulty", this.nWidth * 3 / 4 - var3.stringWidth("Difficulty") / 2, this.nHeight / 2 - var3.getAscent() * 3);
         var2.drawString("Click on innings length to start...", this.nWidth / 2 - var3.stringWidth("Click on innings length to start...") / 2, this.nHeight * 2 / 3 - var3.getHeight() * 2);
         this.screen.setColor(this.SKY_COL);
      } else if(!this.fInPlay && !this.fEndGame && !this.fEndOfOver) {
         var3 = this.screen.getFontMetrics();
         this.screen.setColor(ShimmedColor.white);
         this.screen.drawString("Change of innings", this.nWidth / 2 - var3.stringWidth("Change of innings") / 2, this.nHeight / 2 - var3.getHeight() * 5);
         this.drawScores();
      } else if(this.fEndOfOver) {
         var3 = this.screen.getFontMetrics();
         this.screen.setColor(ShimmedColor.white);
         switch(this.inns) {
         case 1:
            this.drawScores();
            this.screen.drawString("Over", this.nWidth / 2 - var3.stringWidth("Over") / 2, this.nHeight / 2 - var3.getHeight() * 3);
            this.screen.drawString("Last over: " + this.thisOver, this.nWidth / 2 - var3.stringWidth("Last over: " + this.thisOver) / 2, this.nHeight / 2 - var3.getHeight());
            break;
         case 2:
            this.drawScores();
            this.screen.drawString("Over", this.nWidth / 2 - var3.stringWidth("Over") / 2, var3.getHeight());
            this.screen.drawString("Last over: " + this.thisOver, this.nWidth / 2 - var3.stringWidth("Last over: " + this.thisOver) / 2, var3.getHeight() * 2);
            this.drawWorm();
            this.screen.drawString("After " + this.ballCount / 6 + (this.ballCount / 6 == 1?" over...":" overs..."), this.nWidth / 2 - var3.stringWidth("After " + this.ballCount / 6 + (this.ballCount / 6 == 1?" over...":" overs...")) / 2, var3.getHeight() * 4);
            this.screen.drawString(this.slimeColText[this.p2Col].toUpperCase(), this.nWidth / 3, var3.getHeight() * 5);
            this.screen.drawString(String.valueOf(this.p2Score), this.nWidth * 2 / 3 - var3.stringWidth(String.valueOf(this.p2Score)), var3.getHeight() * 5);
            this.screen.drawString(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", this.nWidth / 3, var3.getHeight() * 6);
            this.screen.drawString(String.valueOf(this.p1bxb[this.ballCount - 1]), this.nWidth * 2 / 3 - var3.stringWidth(String.valueOf(this.p1bxb[this.ballCount - 1])), var3.getHeight() * 6);
         }
      } else {
         this.drawScores();
         this.drawWorm();
      }

      var1.drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
   }

   public boolean handleEvent(ShimmedEvent var1) {
      switch(var1.id) {
      case 401:
      case 403:
         if(!this.fEndGame) {
            switch(var1.key) {
            case 32:
               this.mousePressed = true;
               break;
            case 65:
            case 97:
               if(!this.p1ai) {
                  this.p1L();
               }
               break;
            case 68:
            case 100:
               if(!this.p1ai) {
                  this.p1R();
               }
               break;
            case 69:
            case 81:
            case 101:
            case 113:
               if(!this.p1ai) {
                  this.p3J();
               }
               break;
            case 73:
            case 105:
            case 1004:
               if(!this.p2ai) {
                  this.p2J();
               }
               break;
            case 74:
            case 106:
            case 1006:
               if(!this.p2ai) {
                  this.p2L();
               }
               break;
            case 75:
            case 107:
            case 1005:
               this.p2next = true;
               if(!this.fEndOfOver && this.p1next && this.p2next) {
                  this.nextBall();
               }
               break;
            case 76:
            case 108:
            case 1007:
               if(!this.p2ai) {
                  this.p2R();
               }
               break;
            case 83:
            case 115:
               this.p1next = true;
               if(!this.fEndOfOver && this.p1next && this.p2next) {
                  this.nextBall();
               }
               break;
            case 87:
            case 119:
               if(!this.p1ai) {
                  this.p1J();
               }
            }
         }
         break;
      case 402:
      case 404:
         switch(var1.key) {
         case 65:
         case 97:
            if(this.p1XV < 0 && !this.p1ai) {
               this.p1S();
            }

            return false;
         case 68:
         case 100:
            if(this.p1XV > 0 && !this.p1ai) {
               this.p1S();
            }

            return false;
         case 74:
         case 106:
         case 1006:
            if(this.p2XV < 0 && !this.p2ai) {
               this.p2S();
            }

            return false;
         case 76:
         case 108:
         case 1007:
            if(this.p2XV > 0 && !this.p2ai) {
               this.p2S();
            }

            return false;
         case 83:
         case 115:
            this.p1Hold = false;
            return false;
         default:
            return false;
         }
      case 501:
         this.mousePressed = true;
         if(this.fEndOfOver) {
            this.gameThread = new ShimmedThread(this);
            this.gameThread.start();
            this.thisOver = "";
            this.fEndOfOver = false;
            this.promptMsg = "";
            this.repaint();
         } else if(!this.fInPlay) {
            if(!this.fEndGame) {
               this.fInPlay = true;
               ++this.inns;
               int var7 = this.p1Col;
               this.p1Col = this.p2Col;
               this.p2Col = var7;
               long var8 = this.p1Score;
               this.p1Score = this.p2Score;
               this.p2Score = var8;
               long[] var9 = this.p1bxb;
               this.p1bxb = this.p2bxb;
               this.p2bxb = var9;
               if(Math.random() < 0.8D) {
                  this.SKY_COL = this.NIGHT_COL;
               }

               boolean var6 = this.p1ai;
               this.p1ai = this.p2ai;
               this.p2ai = var6;
            } else {
               ShimmedFontMetrics var2 = this.screen.getFontMetrics();
               if(var1.y > this.nHeight * 2 / 3 - var2.getAscent() * 3 / 2 && var1.y < this.nHeight * 2 / 3 + var2.getAscent() / 2) {
                  for(int var3 = 0; var3 < 5 && !this.fInPlay; ++var3) {
                     if(var1.x > this.nWidth / 4 + var3 * this.nWidth / 10 + 5 && var1.x < this.nWidth / 4 + (var3 + 1) * this.nWidth / 10 - 5) {
                        this.fEndGame = false;
                        this.fInPlay = true;
                        this.p1ai = this.p2ai = false;
                        if(this.p1Col == 9) {
                           this.p2ai = true;

                           while((this.p1Col = (int)(Math.random() * (double)this.slimeColours.length)) == this.p2Col) {
                              ;
                           }
                        }

                        if(this.p2Col == 9) {
                           this.p1ai = true;

                           while((this.p2Col = (int)(Math.random() * (double)this.slimeColours.length)) == this.p1Col) {
                              ;
                           }
                        }

                        this.inns = 1;
                        this.p1Score = this.p2Score = 0L;
                        int var4 = this.p1Col;
                        this.p1Col = this.p2Col;
                        this.p2Col = var4;
                        this.SKY_COL = this.DAY_COL;
                        this.overs = var3 + 1;
                        this.p1bxb = new long[this.overs * 6];
                        this.p2bxb = new long[this.overs * 6];

                        for(int var5 = 0; var5 < this.overs * 6; ++var5) {
                           this.p1bxb[var5] = this.p2bxb[var5] = 0L;
                        }
                     }
                  }
               } else if(var1.y > this.nHeight / 2 - var2.getAscent() * 2 && var1.y < this.nHeight / 2) {
                  if(var1.x > this.nWidth / 4 - var2.stringWidth(this.slimeColText[this.p2Col]) / 2 - 10 && var1.x < this.nWidth / 4 + var2.stringWidth(this.slimeColText[this.p2Col]) / 2 + 10) {
                     while(true) {
                        this.p2Col = this.p2Col != this.slimeColours.length - 1?this.p2Col + 1:0;
                        if(this.p1Col != this.p2Col) {
                           this.repaint();
                           break;
                        }
                     }
                  } else if(var1.x > this.nWidth / 2 - var2.stringWidth(this.slimeColText[this.p1Col]) / 2 - 10 && var1.x < this.nWidth / 2 + var2.stringWidth(this.slimeColText[this.p1Col]) / 2 + 10) {
                     while(true) {
                        this.p1Col = this.p1Col != this.slimeColours.length - 1?this.p1Col + 1:0;
                        if(this.p1Col != this.p2Col) {
                           this.repaint();
                           break;
                        }
                     }
                  } else if(var1.x > this.nWidth * 3 / 4 - var2.stringWidth(this.difficultyText[this.difficulty]) / 2 - 10 && var1.x < this.nWidth * 3 / 4 + var2.stringWidth(this.difficultyText[this.difficulty]) / 2 + 10) {
                     this.difficulty = (this.difficulty + 1) % this.difficultyText.length;
                     this.repaint();
                  }
               }
            }

            if(this.fInPlay) {
               this.ballCount = -1;
               this.thisOver = "";
               this.promptMsg = "";
               this.thisBall = 0;
               this.nextBall();
               this.gameThread = new ShimmedThread(this);
               this.gameThread.start();
            }
         }
         break;
      case 503:
         this.showStatus("Slime Cricket 2: by Wedgey: http://www.student.uwa.edu.au/~wedgey/slimec/");
      }

      return false;
   }

   private void p1L() {
      this.p1XV = -8;
   }

   private void p1R() {
      this.p1XV = 8;
   }

   private void p1J() {
      if(this.p1Y == 0) {
         this.p1YV = 31;
      }

   }

   private void p1S() {
      this.p1XV = 0;
   }

   private void p2L() {
      this.p2XV = -8;
   }

   private void p2R() {
      this.p2XV = 8;
   }

   private void p2J() {
      if(this.p2Y == 0) {
         this.p2YV = 31;
      }

   }

   private void p2S() {
      this.p2XV = 0;
   }

   private void p3J() {
      if(this.p3Y == 0) {
         this.p3YV = 31;
      }

   }

   private void nextBall() {
      this.wait = 50;
      this.p1XMin = this.p1X = this.runningCrease - this.p1Diam / 2;
      this.p2XMin = this.p2XMax = this.p2X = this.battingCrease + 20;
      this.ballVX = this.ballVY = this.p1Y = this.p2Y = this.p2XV = this.p2YV = this.p3Y = this.p3YV = this.p1XV = this.p1YV = 0;
      this.ballXMax = this.ballX = this.runningCrease - this.p1Diam / 2;
      this.ballY = 400;
      this.balltype = -1;
      this.shottype = -1;
      this.p1next = this.p2next = false;
      this.ballbowled = false;
      this.fP1Touched = this.fP2Touched = false;
      this.bounces = 0;
      this.p1Touches = 0;
      if(this.fNoBall) {
         ++this.thisBall;
      }

      if(this.ballCount >= 0) {
         this.p2bxb[this.ballCount] = this.p2Score += (long)this.thisBall;
         if(this.fNoBall) {
            this.thisOver = this.thisOver + "N";
         }

         if(this.thisBall != -this.wicketPenalty && this.thisBall != -this.wicketPenalty + 1) {
            if(this.thisBall == 0) {
               this.thisOver = this.thisOver + ".";
            } else if(!this.fNoBall || this.thisBall != -this.wicketPenalty + 1 && this.thisBall != 0) {
               this.thisOver = this.thisOver + (!this.fNoBall?this.thisBall:this.thisBall - 1);
            }
         } else {
            this.thisOver = this.thisOver + "W";
         }

         this.thisOver = this.thisOver + " ";
      }

      this.thisBall = 0;
      if(!this.fNoBall) {
         ++this.ballCount;
         if(this.ballCount % 6 == 0 && this.ballCount != 0 && this.ballCount != this.overs * 6) {
            this.fEndOfOver = true;
            this.gameThread = null;
            this.promptMsg = "Click the mouse to continue...";
         }
      }

      this.fNoBall = false;
      this.fHitBackWall = false;
      this.stillFrames = 0;
      this.repaint();
   }

   private long getMinScore(int var1) {
      long var2 = 0L;

      for(int var4 = 0; var4 < this.overs * 6; ++var4) {
         if((var1 == 1?this.p1bxb[var4]:this.p2bxb[var4]) < var2) {
            var2 = var1 == 1?this.p1bxb[var4]:this.p2bxb[var4];
         }
      }

      return var2;
   }

   private long getMaxScore(int var1) {
      long var2 = 0L;

      for(int var4 = 0; var4 < this.overs * 6; ++var4) {
         if((var1 == 1?this.p1bxb[var4]:this.p2bxb[var4]) > var2) {
            var2 = var1 == 1?this.p1bxb[var4]:this.p2bxb[var4];
         }
      }

      return var2;
   }

   private void MoveSlimers() {
      if(this.p1ai) {
         if(!this.ballbowled) {
            this.bowl();
         } else {
            this.field();
         }
      }

      if(this.p2ai) {
         if(!this.fP2Touched && !this.fHitBackWall) {
            this.playball();
         } else {
            this.running();
         }
      }

      this.p1X += this.p1XV;
      if(this.p1X < this.p1Diam / 2) {
         this.p1X = this.p1Diam / 2;
      }

      if(this.p1X > this.postPos - this.p1Diam / 2 - 5) {
         this.p1X = this.postPos - this.p1Diam / 2 - 5;
      }

      if(this.p1YV != 0) {
         this.p1Y += this.p1YV -= 2;
         if(this.p1Y < 0) {
            this.p1Y = 0;
            this.p1YV = 0;
         }
      }

      if(this.ballX == 200 && this.ballVX == 200 && this.p1X < this.p1XMin) {
         this.p1XMin = this.p1X;
      }

      this.p2X += this.p2XV;
      if(this.p2X > this.postPos - this.p2Diam / 2 - 5) {
         this.p2X = this.postPos - this.p2Diam / 2 - 5;
      }

      if(this.p2X < this.p2Diam / 2) {
         this.p2X = this.p2Diam / 2;
      }

      if(this.p2YV != 0) {
         this.p2Y += this.p2YV -= 2;
         if(this.p2Y < 0) {
            this.p2Y = 0;
            this.p2YV = 0;
         }
      }

      if(this.p2X < this.p2XMin && this.p2Y == 0) {
         this.p2XMin = this.p2X;
      } else if(this.p2X > this.p2XMax && this.p2Y == 0) {
         this.p2XMax = this.p2X;
      }

      if(this.p2X - this.p2Diam / 2 <= this.runningCrease && this.p2XMax + this.p2Diam / 2 >= this.battingCrease && (this.fP2Touched || this.fHitBackWall) && this.p2Y == 0) {
         ++this.thisBall;
         this.p2XMin = this.p2XMax = this.p2X;
         this.drawScores();
      } else if(this.p2XMin - this.p2Diam / 2 <= this.runningCrease && this.p2X + this.p2Diam / 2 >= this.battingCrease && (this.fP2Touched || this.fHitBackWall) && this.p2Y == 0) {
         ++this.thisBall;
         this.p2XMin = this.p2XMax = this.p2X;
         this.drawScores();
      }

      if(this.p3YV != 0) {
         this.p3Y += this.p3YV -= 2;
      }

      if(this.p3Y < 0) {
         this.p3Y = 0;
         this.p3YV = 0;
      }

   }

   private void DrawSlimers() {
      int var1 = this.ballX * this.nWidth / 1000;
      int var2 = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      int var3 = this.nWidth * this.p1Diam / 1000;
      int var4 = this.nHeight * this.p1Diam / 1000;
      int var5 = this.p1OldX * this.nWidth / 1000 - var3 / 2;
      int var6 = 4 * this.nHeight / 5 - var4 - this.p1OldY * this.nHeight / 1000;
      this.screen.setColor(this.SKY_COL);
      this.screen.fillRect(var5, var6, var3, var4);
      var3 = this.nWidth * this.p2Diam / 1000;
      var4 = this.nHeight * this.p2Diam / 1000;
      var5 = this.p2OldX * this.nWidth / 1000 - var3 / 2;
      var6 = 4 * this.nHeight / 5 - var4 - this.p2OldY * this.nHeight / 1000;
      this.screen.fillRect(var5, var6, var3, var4);
      var3 = this.nWidth / 10;
      var4 = this.nHeight / 10;
      var5 = this.p3X * this.nWidth / 1000 - var3 / 2;
      var6 = 4 * this.nHeight / 5 - var4 - this.p3OldY * this.nHeight / 1000;
      this.screen.fillRect(var5, var6, var3, var4);
      byte var7 = 5;
      int var8 = (this.ballRad + var7) * this.nHeight / 1000;
      this.screen.fillOval(var1 - var8, var2 - var8, 2 * var8, 2 * var8);
      this.screen.setColor(ShimmedColor.white);
      this.screen.fillRect(this.nWidth * this.postPos / 1000 - 2, this.nHeight * 7 / 10, 3, this.nHeight / 10);
      var3 = this.nWidth * this.p1Diam / 1000;
      var4 = this.nHeight * this.p1Diam / 1000;
      var5 = this.p1X * this.nWidth / 1000 - var3 / 2;
      var6 = 4 * this.nHeight / 5 - var4 - this.p1Y * this.nHeight / 1000;
      this.screen.setColor(this.slimeColours2[this.p1Col]);
      this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
      this.screen.setColor(this.slimeColours[this.p1Col]);
      this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);
      this.screen.fillRect(var5 + var3 / 5, var6 + var4 / 5, var3 * 3 / 5, var4 * 4 / 5);
      int var9 = this.p1X + 38 * this.p1Diam / 100;
      int var10 = this.p1Y - 60 * this.p1Diam / 100;
      var5 = var9 * this.nWidth / 1000;
      var6 = 4 * this.nHeight / 5 - var4 - var10 * this.nHeight / 1000;
      int var11 = var5 - var1;
      int var12 = var6 - var2;
      int var13 = (int)Math.sqrt((double)(var11 * var11 + var12 * var12));
      if(var13 == 0) {
         var13 = 1;
      }

      int var14 = this.nWidth / 50 * this.p1Diam / 100;
      int var15 = this.nHeight / 25 * this.p1Diam / 100;
      this.screen.setColor(ShimmedColor.white);
      this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
      this.screen.setColor(ShimmedColor.black);
      this.screen.fillOval(var5 - 4 * var11 / var13 - 3 * var14 / 4, var6 - 4 * var12 / var13 - 3 * var15 / 4, var14 / 2, var15 / 2);
      var3 = this.nWidth * this.p2Diam / 1000;
      var4 = this.nHeight * this.p2Diam / 1000;
      var5 = this.p2X * this.nWidth / 1000 - var3 / 2;
      var6 = 4 * this.nHeight / 5 - this.p2Diam * this.nHeight / 1000 - this.p2Y * this.nHeight / 1000;
      this.screen.setColor(this.slimeColours2[this.p2Col]);
      this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
      this.screen.setColor(this.slimeColours[this.p2Col]);
      this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);
      this.screen.fillRect(var5 + var3 / 5, var6 + var4 / 5, var3 * 3 / 5, var4 * 4 / 5);
      var9 = this.p2X - 18 * this.p2Diam / 100;
      var10 = this.p2Y - 60 * this.p2Diam / 100;
      var5 = var9 * this.nWidth / 1000;
      var6 = 4 * this.nHeight / 5 - var4 - var10 * this.nHeight / 1000;
      var11 = var5 - var1;
      var12 = var6 - var2;
      var13 = (int)Math.sqrt((double)(var11 * var11 + var12 * var12));
      if(var13 == 0) {
         var13 = 1;
      }

      var14 = this.nWidth / 50 * this.p2Diam / 100;
      var15 = this.nHeight / 25 * this.p2Diam / 100;
      this.screen.setColor(ShimmedColor.white);
      this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
      this.screen.setColor(ShimmedColor.black);
      this.screen.fillOval(var5 - 4 * var11 / var13 - 3 * var14 / 4, var6 - 4 * var12 / var13 - 3 * var15 / 4, var14 / 2, var15 / 2);
      var3 = this.nWidth * this.p1Diam / 1000;
      var4 = this.nHeight * this.p1Diam / 1000;
      var5 = this.p3X * this.nWidth / 1000 - var3 / 2;
      var6 = 4 * this.nHeight / 5 - this.p1Diam * this.nHeight / 1000 - this.p3Y * this.nHeight / 1000;
      this.screen.setColor(this.slimeColours2[this.p1Col]);
      this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);
      this.screen.setColor(this.slimeColours[this.p1Col]);
      this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);
      this.screen.fillRect(var5 + var3 / 5, var6 + var4 / 5, var3 * 3 / 5, var4 * 4 / 5);
      var9 = this.p3X - 18 * this.p1Diam / 100;
      var10 = this.p3Y - 60 * this.p1Diam / 100;
      var5 = var9 * this.nWidth / 1000;
      var6 = 4 * this.nHeight / 5 - var4 - var10 * this.nHeight / 1000;
      var11 = var5 - var1;
      var12 = var6 - var2;
      var13 = (int)Math.sqrt((double)(var11 * var11 + var12 * var12));
      if(var13 == 0) {
         var13 = 1;
      }

      var14 = this.nWidth / 50 * this.p1Diam / 100;
      var15 = this.nHeight / 25 * this.p1Diam / 100;
      this.screen.setColor(ShimmedColor.white);
      this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);
      this.screen.setColor(ShimmedColor.black);
      this.screen.fillOval(var5 - 4 * var11 / var13 - 3 * var14 / 4, var6 - 4 * var12 / var13 - 3 * var15 / 4, var14 / 2, var15 / 2);
      this.MoveBall();
   }

   private void MoveBall() {
      byte var1 = 5;
      byte var2 = 11;
      byte var3 = 21;
      byte var4 = 17;
      int var5 = (this.ballRad + var1) * this.nHeight / 1000;
      int var6 = this.ballOldX * this.nWidth / 1000;
      int var7 = 4 * this.nHeight / 5 - this.ballOldY * this.nHeight / 1000;
      this.ballY += --this.ballVY;
      this.ballX += this.ballVX;
      this.ballbowled = this.ballbowled || this.ballX > this.bowlingCrease;
      if(this.ballVX >= 2 || this.ballVY >= 2 || this.p1XV + this.p1YV + this.p2XV + this.p2YV + this.p3YV != 0 || this.ballX == 200 || this.p2X > this.runningCrease + this.p2Diam / 2 && this.p2X < this.battingCrease - this.p2Diam / 2) {
         this.stillFrames = 0;
      } else if(this.stillFrames++ > 75) {
         this.promptMsg = " ";
      }

      if(this.ballY < this.ballRad + 5) {
         this.ballY = this.ballRad + 5;
         this.ballVY = -this.ballVY * 2 / 3;
         this.ballVX = this.ballVX * 19 / 20;
         ++this.bounces;
         if(!this.fP2Touched && this.bounces > 1 && !this.fHitBackWall) {
            this.fNoBall = true;
            this.drawPrompt("No ball! (grubber)", 2);
         }
      }

      if(this.ballX > this.postPos && !this.fP2Touched) {
         this.fP2Touched = true;
      }

      if(this.ballY > 300 && this.ballX > this.battingCrease - this.p2Diam / 2 && this.p2X >= this.battingCrease - this.p2Diam / 2 && !this.fP2Touched && this.p2XMin > this.battingCrease - this.p2Diam * 3 / 4) {
         this.fNoBall = true;
         this.drawPrompt("No ball! (too high)", 2);
      }

      if(!this.fEndGame) {
         int var8 = 2 * (this.ballX - this.p1X);
         int var9 = this.ballY - this.p1Y;
         int var10 = (int)Math.sqrt((double)(var8 * var8 + var9 * var9));
         int var11 = this.ballVX - this.p1XV;
         int var12 = this.ballVY - this.p1YV;
         int var13;
         if(var9 > 0 && var10 < this.p1Diam + this.ballRad && var10 > var1) {
            var13 = (var8 * var11 + var9 * var12) / var10;
            this.ballX = this.p1X + (this.p1Diam + this.ballRad) / 2 * var8 / var10;
            this.ballY = this.p1Y + (this.p1Diam + this.ballRad) * var9 / var10;
            if(var13 <= 0) {
               if(!this.p1Hold) {
                  this.ballVX += this.p1XV - 2 * var8 * var13 / var10;
               } else {
                  this.ballVX = 0;
                  this.ballVY = 0;
               }

               if(this.ballVX < -var2) {
                  this.ballVX = -var2;
               }

               if(this.ballVX > var2) {
                  this.ballVX = var2;
               }

               this.ballVY += this.p1YV - 2 * var9 * var13 / var10;
               if(this.ballVY < -var3) {
                  this.ballVY = -var3;
               }

               if(this.ballVY > var3) {
                  this.ballVY = var3;
               }
            }

            if(this.p1Touches > 0 && !this.fP2Touched && this.ballOldX == this.ballXMax && !this.fHitBackWall) {
               this.drawPrompt("No ball! (too many touches)", 2);
               this.fNoBall = true;
            }

            if(this.fP2Touched) {
               this.fP1Touched = true;
            }

            if(this.p1X != this.runningCrease - this.p1Diam / 2) {
               ++this.p1Touches;
            }

            if(this.fP2Touched && this.bounces == 0 && !this.fNoBall && !this.fHitBackWall && this.ballX >= this.p1X) {
               this.promptMsg = this.COMM_CAUGHT[(int)((double)this.COMM_CAUGHT.length * Math.random())];
               this.thisBall = -this.wicketPenalty;
            }
         }

         if(!this.fP2Touched) {
            var8 = 2 * (this.ballX - this.p2X);
            var9 = this.ballY - this.p2Y;
            var10 = (int)Math.sqrt((double)(var8 * var8 + var9 * var9));
            var11 = this.ballVX - this.p2XV;
            var12 = this.ballVY - this.p2YV;
            if(var9 > 0 && var10 < this.p2Diam + this.ballRad && var10 > var1 && this.p1Touches > 0) {
               var13 = (var8 * var11 + var9 * var12) / var10;
               this.ballX = this.p2X + (this.p2Diam + this.ballRad) / 2 * var8 / var10;
               this.ballY = this.p2Y + (this.p2Diam + this.ballRad) * var9 / var10;
               if(var13 <= 0) {
                  this.ballVX += this.p2XV - 2 * var8 * var13 / var10;
                  if(this.ballVX < -var4) {
                     this.ballVX = -var4;
                  }

                  if(this.ballVX > var2) {
                     this.ballVX = var2;
                  }

                  this.ballVY += this.p2YV - 2 * var9 * var13 / var10;
                  if(this.ballVY < -var3) {
                     this.ballVY = -var3;
                  }

                  if(this.ballVY > var3) {
                     this.ballVY = var3;
                  }
               }

               this.fP2Touched = true;
               this.bounces = 0;
            }
         }

         var8 = 2 * (this.ballX - this.p3X);
         var9 = this.ballY - this.p3Y;
         var10 = (int)Math.sqrt((double)(var8 * var8 + var9 * var9));
         var11 = this.ballVX;
         var12 = this.ballVY - this.p3YV;
         if(var9 > 0 && var10 < this.p1Diam + this.ballRad && var10 > var1) {
            var13 = (var8 * var11 + var9 * var12) / var10 * 2 / 3;
            this.ballX = this.p3X + (this.p1Diam + this.ballRad) / 2 * var8 / var10;
            this.ballY = this.p3Y + (this.p1Diam + this.ballRad) * var9 / var10;
            if(var13 <= 0) {
               this.ballVX += -2 * var8 * var13 / var10;
               if(this.ballVX < -var4) {
                  this.ballVX = -var4;
               }

               if(this.ballVX > var2) {
                  this.ballVX = var2;
               }

               this.ballVY += this.p3YV - 2 * var9 * var13 / var10;
               if(this.ballVY < -var3) {
                  this.ballVY = -var3;
               }

               if(this.ballVY > var3) {
                  this.ballVY = var3;
               }
            }

            if(!this.fP1Touched && this.fP2Touched && this.bounces == 0 && !this.fNoBall) {
               this.promptMsg = this.COMM_CTBEHIND[(int)((double)this.COMM_CTBEHIND.length * Math.random())];
               this.thisBall = -this.wicketPenalty;
            } else if(this.p2X < this.battingCrease - this.p2Diam / 2 && this.p2X > this.runningCrease + this.p2Diam / 2 || this.p2Y != 0) {
               if(this.p2XMin - this.p2Diam / 2 > this.runningCrease && !this.fNoBall && !this.fP1Touched) {
                  this.promptMsg = this.COMM_STUMPED[(int)((double)this.COMM_STUMPED.length * Math.random())];
               } else {
                  this.promptMsg = this.COMM_RUNOUT[(int)((double)this.COMM_RUNOUT.length * Math.random())];
               }

               this.thisBall = -this.wicketPenalty;
            }

            this.fP1Touched = true;
         }

         if(this.ballX < 5) {
            this.ballX = 5;
            this.ballVX = -this.ballVX * 2 / 3;
            if(this.fP2Touched && this.bounces == 0 && !this.fHitBackWall) {
               this.promptMsg = this.COMM_SIX[(int)((double)this.COMM_SIX.length * Math.random())];
               if(this.fP1Touched && Math.random() < 0.7D) {
                  this.promptMsg = this.COMM_SIXTOUCHED[(int)((double)this.COMM_SIXTOUCHED.length * Math.random())];
               }

               this.drawPrompt(this.promptMsg, 1);
               this.promptMsg = "";
               this.thisBall += 6;
            } else if(this.fP2Touched && !this.fHitBackWall) {
               this.promptMsg = this.COMM_FOUR[(int)((double)this.COMM_FOUR.length * Math.random())];
               if(this.fP1Touched && Math.random() < 0.7D) {
                  this.promptMsg = this.COMM_FOURTOUCHED[(int)((double)this.COMM_FOURTOUCHED.length * Math.random())];
               }

               this.drawPrompt(this.promptMsg, 1);
               this.promptMsg = "";
               this.thisBall += 4;
            } else if(!this.fP2Touched) {
               this.fNoBall = true;
               this.drawPrompt("No ball! (must bowl forwards)", 2);
            }

            if(this.fP2Touched) {
               this.fHitBackWall = true;
            }
         }

         if(this.ballX > 995) {
            this.ballX = 995;
            this.ballVX = -this.ballVX * 2 / 3;
            this.fHitBackWall = true;
         }

         if(this.ballX > this.postPos - this.ballRad && this.ballX < this.postPos + this.ballRad && this.ballY < 105 + this.ballRad) {
            if((this.p2X < this.battingCrease - this.p2Diam / 2 && this.p2X > this.runningCrease + this.p2Diam / 2 || this.p2Y != 0) && this.fP1Touched && this.fP2Touched) {
               this.promptMsg = this.COMM_RUNOUT[(int)((double)this.COMM_RUNOUT.length * Math.random())];
               this.thisBall = -this.wicketPenalty;
            } else if(!this.fNoBall && !this.fHitBackWall && this.p1Touches == 1) {
               this.promptMsg = this.COMM_BOWLED[(int)((double)this.COMM_BOWLED.length * Math.random())];
               if(this.fP2Touched && Math.random() < 0.5D) {
                  this.promptMsg = this.COMM_PLAYEDON[(int)((double)this.COMM_PLAYEDON.length * Math.random())];
               }

               this.thisBall = -this.wicketPenalty;
            }

            this.fHitBackWall = true;
            if(this.ballVY < 0 && this.ballY > 105 + this.ballRad) {
               this.ballVY *= -1;
               this.ballY = 105 + this.ballRad;
            } else if(this.ballX < this.postPos) {
               this.ballX = this.postPos - 17;
               this.ballVX = (this.ballVX >= 0?-this.ballVX:this.ballVX) * 3 / 4;
            } else {
               this.ballX = this.postPos + 17;
               this.ballVX = (this.ballVX <= 0?-this.ballVX:this.ballVX) * 3 / 4;
            }

            this.fP2Touched = true;
         }
      }

      if(this.ballX > this.ballXMax) {
         this.ballXMax = this.ballX;
      }

      var6 = this.ballX * this.nWidth / 1000;
      var7 = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      this.screen.setColor(this.BALL_COL);
      this.screen.fillOval(var6 - var5, var7 - var5, 2 * var5, 2 * var5);
      this.drawScores();
      if(this.promptMsg.length() > 0) {
         if(this.promptMsg.length() > 1 && Math.random() < 0.3D) {
            this.promptMsg = this.COMM_OUT_GENERIC[(int)((double)this.COMM_OUT_GENERIC.length * Math.random())];
         }

         this.drawPrompt(this.promptMsg, 0);
         this.getGraphics().drawImage(this.buffer, 0, 0, this);
         if(this.promptMsg.length() > 1) {
            ShimmedThread.sleep(1500L);
         }

         this.promptMsg = "";
         this.nextBall();
      }

   }

   private void sleep(long var1) {
      if(this.gameThread != null) {
         try {
            ShimmedThread.sleep(var1);
         } catch (InterruptedException var3) {
            ;
         }
      }
   }

   public void drawPrompt() {
      this.screen.setColor(this.COURT_COL);
      this.screen.fillRect(0, 4 * this.nHeight / 5 + 6, this.nWidth, this.nHeight / 5 - 10);
      this.drawPrompt(this.promptMsg, 0);
   }

   public void drawPrompt(String var1, int var2) {
      ShimmedFontMetrics var3 = this.screen.getFontMetrics();
      this.screen.setColor(ShimmedColor.white);
      this.screen.drawString(var1, (this.nWidth - var3.stringWidth(var1)) / 2, this.nHeight * 4 / 5 + var3.getHeight() * (var2 + 1) + 10);
   }

   private void drawScores() {
      if(this.inns != 0) {
         ShimmedGraphics var1 = this.screen;
         ShimmedFontMetrics var2 = var1.getFontMetrics();
         byte var3 = 1;
         var1.setColor(this.SKY_COL);
         var1.fillRect(0, 0, this.nWidth / 2, 3 * var2.getAscent() + 10);
         var1.setColor(ShimmedColor.white);
         String var4 = this.slimeColText[this.p2Col] + (this.p2Score + (long)this.thisBall);
         var1.drawString(var4, 10, (var2.getAscent() + 3) * var3 + 10);
         int var5 = var3 + 1;
         if(this.inns != 1) {
            var4 = this.slimeColText[this.p1Col] + this.p1Score;
            var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 10);
            ++var5;
         }

         if(this.ballCount < 6 * this.overs - 1) {
            var4 = "Over: " + this.ballCount / 6;
            if(this.ballCount % 6 != 0) {
               var4 = var4 + "." + this.ballCount % 6;
            }

            var4 = var4 + " (" + this.overs + ")";
         } else if(this.ballCount == 6 * this.overs - 1) {
            var4 = "Last ball";
         } else {
            var4 = "Over: " + this.overs;
         }

         var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 20);
         ++var5;
         if(this.p1X != 200 || this.p2X != 800 || this.fP1Touched || this.fP2Touched) {
            ;
         }
      }
   }

   private void drawWorm() {
      ShimmedGraphics var1 = this.buffer.getGraphics();
      ShimmedFontMetrics var2 = var1.getFontMetrics();
      long var5 = this.getMinScore(1);
      long var7 = this.getMinScore(2);
      long var11 = this.getMaxScore(1);
      long var13 = this.getMaxScore(2);
      long var3 = var5 < var7?var5:var7;
      long var9 = var11 > var13?var11:var13;
      if(var3 != 0L || var9 != 0L) {
         int var15 = this.nWidth * 4 / 5 - 5;
         int var16 = this.nWidth / 5;
         int var17 = (int)(5L + (long)(this.nHeight / 5) * var9 / (var9 - var3));
         int var18 = this.nHeight / 5;
         if(this.fEndOfOver) {
            var15 = this.nWidth / 10 - 5;
            var16 = this.nWidth * 4 / 5;
            var17 = (int)((long)(this.nHeight * 2 / 5) * var9 / (var9 - var3) + (long)(this.nHeight * 3 / 10));
            var18 = this.nHeight * 2 / 5;
         }

         if(this.inns == 2) {
            var1.setColor(this.slimeColours[this.p1Col]);
            var1.drawString(this.slimeColAbbr[this.p1Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p1Col]) - 5, var17 - (int)((var9 + var3) / 2L * (long)var18 / (var9 - var3)));
            var1.drawLine(var15, var17, var15 + var16 / (6 * this.overs), (int)((long)var17 - (long)var18 * this.p1bxb[0] / (var9 - var3)));

            for(int var19 = 1; var19 < 6 * this.overs; ++var19) {
               var1.drawLine(var15 + var16 * var19 / (6 * this.overs), (int)((long)var17 - (long)var18 * this.p1bxb[var19 - 1] / (var9 - var3)), var15 + var16 * (var19 + 1) / (6 * this.overs), (int)((long)var17 - (long)var18 * this.p1bxb[var19] / (var9 - var3)));
            }

            var1.setColor(this.slimeColours[this.p2Col]);
            var1.drawString(this.slimeColAbbr[this.p2Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p2Col]) - 5, var17 - (int)((var9 + var3) / 2L * (long)var18 / (var9 - var3)) + var2.getAscent());
            var1.drawLine(var15, var17, var15 + var16 / (6 * this.overs), (int)((long)var17 - (long)var18 * this.p2bxb[0] / (var9 - var3)));

            for(int var20 = 1; var20 < this.ballCount; ++var20) {
               var1.drawLine(var15 + var16 * var20 / (6 * this.overs), (int)((long)var17 - (long)var18 * this.p2bxb[var20 - 1] / (var9 - var3)), var15 + var16 * (var20 + 1) / (6 * this.overs), (int)((long)var17 - (long)var18 * this.p2bxb[var20] / (var9 - var3)));
            }

            var1.setColor(ShimmedColor.white);
            var1.drawString(String.valueOf(var9), var15 - 5 - var2.stringWidth(String.valueOf(var9)), var17 - (int)(var9 * (long)var18 / (var9 - var3)) + var2.getAscent());
            var1.drawString(String.valueOf(var3), var15 - 5 - var2.stringWidth(String.valueOf(var3)), var17 - (int)(var3 * (long)var18 / (var9 - var3)));
            var1.drawLine(var15, var17 - (int)(var9 * (long)var18 / (var9 - var3)), var15, var17 - (int)(var3 * (long)var18 / (var9 - var3)));
            var1.drawLine(var15, var17, var15 + var16, var17);
         }

      }
   }

   public void run() {
      ShimmedGraphics var1 = this.getGraphics();

      while(this.gameThread != null) {
         if(this.wait > 0) {
            --this.wait;
         }

         this.p1OldX = this.p1X;
         this.p1OldY = this.p1Y;
         this.p2OldX = this.p2X;
         this.p2OldY = this.p2Y;
         this.p3OldY = this.p3Y;
         this.ballOldX = this.ballX;
         this.ballOldY = this.ballY;
         this.MoveSlimers();
         this.DrawSlimers();
         var1.drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
         if(this.ballCount == this.overs * 6 && !this.fNoBall) {
            this.fInPlay = false;
            if(this.inns == 1) {
               this.promptMsg = "Click the mouse to continue...";
            } else {
               this.DoFatality();
               this.promptMsg = "Click team names to select teams, then choose an innings length to start!";
               this.fEndGame = true;
               if(this.p1ai) {
                  this.p1Col = 9;
               }

               if(this.p2ai) {
                  this.p2Col = 9;
               }

               this.p1ai = this.p2ai = false;
            }

            this.gameThread = null;
         }

         if(this.gameThread != null) {
            try {
               ShimmedThread.sleep(20L);
            } catch (InterruptedException var2) {
               ;
            }
         }
      }

      if(!this.fEndOfOver) {
         this.fInPlay = false;
      }

      this.repaint();
   }

   private void DoFatality() {
      this.getGraphics();
      if(this.p1Score > this.p2Score) {
         this.p1J();
         this.drawPrompt(this.slimeColText[this.p1Col] + " wins!", 1);
      } else if(this.p2Score > this.p1Score) {
         this.p2J();
         this.drawPrompt(this.slimeColText[this.p1Col] + " wins!", 1);
      } else {
         this.drawPrompt("It\'s a tie!", 1);
      }

      this.p1ai = this.p2ai = false;
   }

   public void destroy() {
      this.gameThread.stop();
      this.gameThread = null;
   }

   private void bowl() {
      if(this.wait <= 0) {
         if(this.balltype == -1) {
            switch(this.difficulty) {
            case 0:
               this.balltype = 0;
               break;
            case 1:
               this.balltype = (int)(4.0D * Math.random());
               break;
            case 2:
               this.balltype = (int)(2.0D * Math.random()) + 2;
            }
         }

         if(this.difficulty == 2 && this.p2X - this.p2Diam / 2 < this.battingCrease - (this.battingCrease - this.runningCrease) / 4) {
            this.balltype = 1;
         }

         switch(this.balltype) {
         case 0:
            if(this.p1X > this.runningCrease - this.p1Diam * 5 / 6) {
               this.p1L();
               return;
            }

            if(this.ballY < 200 && this.ballVY < 0) {
               this.p1J();
               return;
            }

            this.p1S();
            return;
         case 1:
            if(this.p1X > this.runningCrease - this.p1Diam * 3 / 4) {
               this.p1L();
            } else {
               this.p1S();
            }

            if(this.ballY < 320 && this.ballVY < 0) {
               this.p1J();
               return;
            }
            break;
         case 2:
            if(this.ballVY > 0 && this.p1X > this.runningCrease - this.p1Diam * 5 / 6) {
               this.p1L();
            } else {
               this.p1S();
            }

            if(this.ballY > 270 && this.ballVY > 0) {
               this.p1J();
               return;
            }
            break;
         case 3:
            if(this.p1X > this.runningCrease - this.p1Diam * 2 / 3) {
               this.p1L();
               return;
            }

            this.p1S();
            return;
         }

      }
   }

   private void field() {
      if(this.bounces == 0) {
         if(this.difficulty > 1 && this.ballX > this.p1X && this.ballVX < 0 && this.ballY > this.p1Diam / 2 && Math.sqrt((double)((this.ballX - this.p1X) * (this.ballX - this.p1X) + (this.ballY - this.p1Y) * (this.ballY - this.p1Y))) < 250.0D) {
            this.p1J();
         }

         if(this.difficulty == 2 && this.ballX > this.postPos && Math.sqrt((double)((this.ballX - this.p3X) * (this.ballX - this.p3X) + (this.ballY - this.p3Y) * (this.ballY - this.p3Y))) < 250.0D) {
            this.p3J();
         }
      }

      if(this.difficulty < 2 && !this.fP2Touched && this.ballbowled) {
         this.p1S();
      } else if(this.p1X + this.p1Diam / 2 > this.ballX) {
         this.p1L();
      } else if(this.p1X + this.p1Diam + this.ballRad * 3 / 2 < this.postPos) {
         this.p1R();
      } else if((this.p2X + this.p2Diam / 2 < this.battingCrease && this.p2X - this.p2Diam / 2 > this.runningCrease || this.p2Y != 0) && this.fP1Touched) {
         this.p1R();
      } else {
         this.p1S();
      }

      if(this.ballX > this.p1Diam && this.ballY < this.p1Diam / 2 && this.ballVX <= 0 && !this.fHitBackWall && this.p1X - this.ballX < this.p1Diam && this.p1X > this.ballX && this.bounces > 0 && this.difficulty == 2) {
         this.p1J();
      }

   }

   private void playball() {
      double var1 = Math.sqrt((double)((this.ballX - this.p2X) * (this.ballX - this.p2X) + (this.ballY - this.p2Y) * (this.ballY - this.p2Y)));
      boolean var3 = false;
      int var4 = 0;
      int var5 = this.ballY;

      for(int var6 = this.ballVY; var5 > 0; var5 += var6) {
         ++var4;
         --var6;
      }

      int var8 = this.ballX + this.ballVX * var4;
      boolean var7 = var8 < this.postPos - this.p2Diam && var8 >= this.p2X - var4 * 8;
      switch(this.difficulty) {
      case 0:
         if(var1 < 400.0D && this.ballX - this.p2X < this.p2Diam * 3 / 2 && this.ballX < this.p2X && this.ballY < this.p2Y + this.p2Diam * 3 / 2) {
            this.p2L();
         } else {
            this.p2S();
         }

         if(var1 < 350.0D && this.ballY > this.p2Diam * 2 && this.ballX > this.p2X - this.p2Diam) {
            this.p2J();
            return;
         }
         break;
      case 1:
      case 2:
         if(this.ballbowled && this.shottype == -1) {
            if(this.p2Score > this.p1Score && this.inns == 2 && var7) {
               this.shottype = 1;
            } else if(var7 && Math.random() < 0.5D) {
               if(Math.random() < 0.75D) {
                  this.shottype = 4;
               } else {
                  this.shottype = 1;
               }
            } else if(var8 <= this.battingCrease && Math.random() >= 0.6D) {
               this.shottype = 2;
            } else {
               this.shottype = 3;
            }
         }

         switch(this.shottype) {
         case 1:
            if(this.ballbowled && this.p2X - this.p2XV - this.p2Diam / 2 > var8) {
               this.p2L();
               return;
            }

            this.p2S();
            return;
         case 2:
            if(this.ballbowled && this.p2X - this.p2XV - this.p2Diam > var8) {
               this.p2L();
               return;
            }

            this.p2S();
            if(this.ballX > this.p2X - this.p2Diam * 2 / 3) {
               this.p2J();
               return;
            }
            break;
         case 3:
            if(this.ballbowled && this.p2X + this.p2XV + 50 > var8) {
               this.p2L();
               return;
            }

            this.p2S();
            if(this.ballX > this.p2X - this.p2Diam / 2) {
               this.p2J();
               return;
            }
            break;
         case 4:
            if(!this.ballbowled || this.p2X - this.p2XV - this.p2Diam / 2 <= var8 && this.ballX + 3 * this.ballVX <= this.p2X - this.p2Diam / 2) {
               this.p2S();
               return;
            }

            this.p2L();
            return;
         }
      }

   }

   private void running() {
      boolean var1 = false;
      if(this.ballX > this.postPos || this.ballX > this.p1X && (this.p1X - this.ballX < 400 || this.p1X - this.ballX < 300 && this.ballVX > 0)) {
         var1 = true;
      }

      if(this.ballX < this.runningCrease || this.p1X < this.runningCrease && this.ballVX < 0 && this.ballX < this.battingCrease) {
         var1 = false;
      }

      if(this.ballX < this.postPos && this.p1X < this.p2X && this.ballX > this.p2X && this.p2X - this.p2Diam / 2 <= this.runningCrease) {
         var1 = false;
      }

      if(this.ballX < this.postPos && this.ballX - this.p2X > this.battingCrease - this.runningCrease) {
         var1 = false;
      }

      if(var1 && (this.p2X + this.p2Diam / 2 >= this.battingCrease || this.p2X - this.p2Diam / 2 <= this.runningCrease)) {
         this.p2S();
      } else if(var1) {
         if(this.p2X <= this.runningCrease + (this.battingCrease - this.runningCrease) / 2 && this.difficulty >= 2) {
            this.p2L();
         } else {
            this.p2R();
         }
      } else if(!var1 && this.p2X - this.p2Diam / 2 <= this.runningCrease && this.p2X == this.p2XMax) {
         this.p2R();
      } else {
         if(!var1 && this.p2X + this.p2Diam / 2 >= this.battingCrease && this.p2X >= this.p2XMin) {
            this.p2L();
         }

      }
   }

   public SlimeCricket2() {
      this.p3X = 1000 - this.p1Diam / 2;
      this.slimeColours = new ShimmedColor[]{ShimmedColor.yellow, new ShimmedColor(0, 0, 128), new ShimmedColor(164, 164, 255), ShimmedColor.black, new ShimmedColor(0, 100, 0), new ShimmedColor(0, 162, 0), new ShimmedColor(0, 0, 210), new ShimmedColor(128, 78, 0), ShimmedColor.red, ShimmedColor.black};
      this.slimeColours2 = new ShimmedColor[]{new ShimmedColor(0, 100, 0), ShimmedColor.red, ShimmedColor.yellow, ShimmedColor.gray, ShimmedColor.white, ShimmedColor.yellow, ShimmedColor.yellow, new ShimmedColor(60, 160, 60), ShimmedColor.yellow, ShimmedColor.white};
      this.slimeColText = new String[]{"Australia ", "England ", "India ", "New Zealand ", "Pakistan ", "South Africa ", "Sri Lanka ", "West Indies ", "Zimbabwe ", "Computer"};
      this.slimeColAbbr = new String[]{"AUS", "ENG", "IND", "NZ", "PAK", "RSA", "SL", "WI", "ZIM", "AI"};
      this.difficultyColours = new ShimmedColor[]{ShimmedColor.blue, ShimmedColor.green, ShimmedColor.red};
      this.difficultyText = new String[]{"Grade", "Domestic", "International"};
      this.BALL_COL = ShimmedColor.white;
      this.COURT_COL = new ShimmedColor(0, 160, 0);
      this.DAY_COL = new ShimmedColor(85, 85, 255);
      this.NIGHT_COL = new ShimmedColor(0, 0, 68);
      this.SKY_COL = this.DAY_COL;
      this.fHitBackWall = false;
      this.postPos = 1000 - this.p1Diam - 5;
      this.bowlingCrease = 450;
      this.runningCrease = 450;
      this.battingCrease = this.postPos - this.p2Diam / 2 - 20;
      this.inns = 1;
      this.wicketPenalty = 5;
      this.fNoBall = false;
      this.overs = 5;
      this.p1Hold = false;
      this.p1ai = false;
      this.p2ai = false;
      this.balltype = -1;
      this.shottype = -1;
      this.AI_COL = 9;
      this.COMM_FOUR = new String[]{"Along the carpet it goes for four.", "Back past the bowler for four.", "Picks the gap nicely and into the fence it goes for four.", "Shot!", "Four more added to the total.", "It\'s certainly a batsman\'s paradise out there today.", "... and the umpire waves his arm once more.", "Exactly not what the bowler had planned.", "Well it\'s bounced up off the rope and smacked some guy in the face!"};
      this.COMM_FOURTOUCHED = new String[]{"Terrible fielding effort there.", "The bowler won\'t be pleased with that effort.", "Well that should never have been a four."};
      this.COMM_SIX = new String[]{"He\'s carving them up like a Christmas cake!", "That\'s come right orf the meat of the bat.", "He\'s hit that one very hored indeed.", "He\'s smacked that one.", "He\'s gone for it... it\'s gone all the way!", "Must be playing on a road out there today.", "Looks like he\'s chasing Andrew Symonds\' record here..."};
      this.COMM_SIXTOUCHED = new String[]{"Oh no, he\'s done a Paul Reiffel!", "Well that\'s six more on top of the no ball, he can\'t be happy."};
      this.COMM_STUMPED = new String[]{"Stumped him!", "A fine example of wicket keeping there. Excellent stuff.", "There goes the red light! What quick hands this keeper has!"};
      this.COMM_RUNOUT = new String[]{"He\'s run out! What a tragedy!", "... and there\'s the red light. He\'s out.", "Allan Donald would be pleased with that effort.", "Well the fielder\'s decided to chance his arm, and it\'s come off!", "The bails were off in a flash, he never had a chance.", "Poor calling there, he deserved to get out.", "Well what else do you expect if you run like Ranatunga?"};
      this.COMM_BOWLED = new String[]{"Bowled him neck and crop.", "Tremendous delivery, he really had no idea about that.", "What a marvellous ball!", "That\'s a ripsnorter of a ball!", "I think that\'s just knocked Joe the stumpcameraman out.", "Well the bowler\'s certainly had his weeties this morning.", "There\'s the death rattle.", "That\'s gotta be a contender for today\'s fastest ball.", "Straight through the gate. The batsman won\'t be pleased with that.", "Completely bamboozled.", "A wonderful spell of bowling, this."};
      this.COMM_PLAYEDON = new String[]{"He\'s played on!", "A magnificent chop shot, oh wait, it\'s hit the stumps.", "He\'s done an Adam Gilchrist!"};
      this.COMM_CAUGHT = new String[]{"He\'s hit it straight down his throat.", "A safe pair of hands, he doesn\'t drop those.", "What a magnificent shot! No, he\'s been caught!", "A marvellous catch, that.", "... and he takes a straightforward catch.", "Well, they say \"catches win matches\".", "Caught, yes!", "Well, he\'s picked out the only fielder in front of the bat!", "Can\'t be happy with that shot.", "What a shame, we can\'t use the snickometer on that one it\'s so damned obvious."};
      this.COMM_CTBEHIND = new String[]{"... the keeper gobbles up the catch.", "... and the snickometer shows that that\'s clearly out.", "Excellent line and length, he\'s got another edge.", "Yes, there was some bat in that, he\'s gone!"};
      this.COMM_OUT_GENERIC = new String[]{"Got him, yes!", "It\'s all happening here!", "A marvellous effort, that!", "He\'s out.", "Oh dear.", "Gone!", "What a magnificent fielding side this team is.", "Yes, another one! He\'s a hero, this man!"};
   }
}

ENDOFJAVAMARKER
{
  "startTime": "2019-01-12 18:35:28",
  "sourceLength": 0,
  "success": true,
  "endTime": "2019-01-12 18:35:30",
  "durationMillis": 1700,
  "errors": [],
  "jsout": "var __extends \u003d (this \u0026\u0026 this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] \u003d b[p];\n    function __() { this.constructor \u003d d; }\n    d.prototype \u003d b \u003d\u003d\u003d null ? Object.create(b) : (__.prototype \u003d b.prototype, new __());\n};\n/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nvar ShimmedSize \u003d (function () {\n    function ShimmedSize() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n    return ShimmedSize;\n}());\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\nvar ShimmedApplet \u003d (function () {\n    function ShimmedApplet() {\n    }\n    ShimmedApplet.prototype.size \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.createImage \u003d function (x, y) {\n        return null;\n    };\n    ShimmedApplet.prototype.showStatus \u003d function (s) {\n    };\n    ShimmedApplet.prototype.repaint \u003d function () {\n    };\n    ShimmedApplet.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.requestFocus \u003d function () {\n    };\n    ShimmedApplet.prototype.getWidth \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getDocumentBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAppletContext \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getCodeBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAudioClip \u003d function (u, s) {\n        return null;\n    };\n    ShimmedApplet.prototype.getImage \u003d function (u, s) {\n        return null;\n    };\n    return ShimmedApplet;\n}());\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\nvar ShimmedColor \u003d (function () {\n    function ShimmedColor(r, g, b) {\n    }\n    return ShimmedColor;\n}());\nShimmedColor.yellow \u003d null;\nShimmedColor.black \u003d null;\nShimmedColor.red \u003d null;\nShimmedColor.gray \u003d null;\nShimmedColor.white \u003d null;\nShimmedColor.blue \u003d null;\nShimmedColor.green \u003d null;\nShimmedColor.pink \u003d null;\nShimmedColor.cyan \u003d null;\nShimmedColor.lightGray \u003d null;\nShimmedColor.darkGray \u003d null;\nShimmedColor.orange \u003d null;\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\nvar ShimmedGraphics \u003d (function () {\n    function ShimmedGraphics() {\n    }\n    ShimmedGraphics.prototype.getFont \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.setFont \u003d function (f) {\n    };\n    ShimmedGraphics.prototype.setColor \u003d function (c) {\n    };\n    ShimmedGraphics.prototype.fillRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.getFontMetrics \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.drawString \u003d function (s, x, y) {\n    };\n    ShimmedGraphics.prototype.drawImage \u003d function (i, x, y, o) {\n    };\n    ShimmedGraphics.prototype.drawOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillArc \u003d function (x, y, w, h, s, e) {\n    };\n    ShimmedGraphics.prototype.drawLine \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.drawRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillPolygon$int_A$int_A$int \u003d function (xs, ys, n) {\n    };\n    ShimmedGraphics.prototype.fillPolygon \u003d function (xs, ys, n) {\n        if (((xs !\u003d null \u0026\u0026 xs instanceof Array \u0026\u0026 (xs.length \u003d\u003d 0 || xs[0] \u003d\u003d null || (typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof Array \u0026\u0026 (ys.length \u003d\u003d 0 || ys[0] \u003d\u003d null || (typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return this.fillPolygon$int_A$int_A$int(xs, ys, n);\n        }\n        else if (((xs !\u003d null \u0026\u0026 xs instanceof ShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return this.fillPolygon$ShimmedPolygon(xs);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedGraphics.prototype.fillPolygon$ShimmedPolygon \u003d function (p) {\n    };\n    ShimmedGraphics.prototype.drawArc \u003d function (x, y, w, h, s, e) {\n    };\n    return ShimmedGraphics;\n}());\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\nvar ShimmedImage \u003d (function () {\n    function ShimmedImage() {\n    }\n    ShimmedImage.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedImage.prototype.getHeight \u003d function (a) {\n        return 0;\n    };\n    return ShimmedImage;\n}());\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\nvar ShimmedEvent \u003d (function () {\n    function ShimmedEvent() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n    return ShimmedEvent;\n}());\nShimmedEvent.KEY_ACTION \u003d 0;\nShimmedEvent.LEFT \u003d 1;\nShimmedEvent.RIGHT \u003d 2;\nShimmedEvent.UP \u003d 3;\nShimmedEvent.DOWN \u003d 4;\nShimmedEvent.KEY_ACTION_RELEASE \u003d 5;\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\nvar ShimmedFont \u003d (function () {\n    function ShimmedFont(name, w, h) {\n    }\n    ShimmedFont.prototype.getName \u003d function () {\n        return null;\n    };\n    return ShimmedFont;\n}());\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\nvar ShimmedFontMetrics \u003d (function () {\n    function ShimmedFontMetrics() {\n    }\n    ShimmedFontMetrics.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.stringWidth \u003d function (s) {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.getAscent \u003d function () {\n        return 0;\n    };\n    return ShimmedFontMetrics;\n}());\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\nvar ShimmedThread \u003d (function () {\n    function ShimmedThread(r) {\n    }\n    ShimmedThread.sleep$long \u003d function (ms) {\n    };\n    ShimmedThread.sleep$long$boolean \u003d function (ms, b) {\n    };\n    ShimmedThread.sleep \u003d function (ms, b) {\n        if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return ShimmedThread.sleep$long$boolean(ms, b);\n        }\n        else if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return ShimmedThread.sleep$long(ms);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedThread.prototype.start \u003d function () {\n    };\n    ShimmedThread.prototype.stop \u003d function () {\n    };\n    return ShimmedThread;\n}());\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\nvar ShimmedAppletContext \u003d (function () {\n    function ShimmedAppletContext() {\n    }\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL \u003d function (u) {\n    };\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL$java_lang_String \u003d function (u, s) {\n    };\n    ShimmedAppletContext.prototype.showDocument \u003d function (u, s) {\n        if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return this.showDocument$ShimmedURL$java_lang_String(u, s);\n        }\n        else if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return this.showDocument$ShimmedURL(u);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedAppletContext;\n}());\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\nvar ShimmedDocumentBase \u003d (function () {\n    function ShimmedDocumentBase() {\n    }\n    ShimmedDocumentBase.prototype.getHost \u003d function () {\n        return null;\n    };\n    return ShimmedDocumentBase;\n}());\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\nvar ShimmedURL \u003d (function () {\n    function ShimmedURL(s) {\n    }\n    ShimmedURL.prototype.openStream \u003d function () {\n        return null;\n    };\n    return ShimmedURL;\n}());\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\nvar ShimmedPrintStream \u003d (function () {\n    function ShimmedPrintStream() {\n    }\n    ShimmedPrintStream.prototype.print \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$ \u003d function () {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$java_lang_Object \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println \u003d function (s) {\n        if (((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return this.println$java_lang_Object(s);\n        }\n        else if (s \u003d\u003d\u003d undefined) {\n            return this.println$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedPrintStream;\n}());\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\nvar ShimmedSystem \u003d (function () {\n    function ShimmedSystem() {\n    }\n    ShimmedSystem.currentTimeMillis \u003d function () {\n        return 0;\n    };\n    return ShimmedSystem;\n}());\nShimmedSystem.out \u003d null;\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\nvar ShimmedVector \u003d (function () {\n    function ShimmedVector(n) {\n    }\n    ShimmedVector.prototype.removeAllElements \u003d function () {\n    };\n    ShimmedVector.prototype.get \u003d function (i) {\n        return null;\n    };\n    ShimmedVector.prototype.size \u003d function () {\n        return 0;\n    };\n    ShimmedVector.prototype.add \u003d function (x) {\n    };\n    return ShimmedVector;\n}());\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\nvar ShimmedElement \u003d (function () {\n    function ShimmedElement() {\n    }\n    ShimmedElement.prototype.add \u003d function (e) {\n    };\n    return ShimmedElement;\n}());\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\nvar ShimmedPolygon \u003d (function () {\n    function ShimmedPolygon(xs, ys, n) {\n    }\n    return ShimmedPolygon;\n}());\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\nvar ShimmedInputStream \u003d (function () {\n    function ShimmedInputStream() {\n    }\n    ShimmedInputStream.prototype.close \u003d function () {\n    };\n    return ShimmedInputStream;\n}());\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\nvar ShimmedBufferedReader \u003d (function () {\n    function ShimmedBufferedReader(i) {\n    }\n    ShimmedBufferedReader.prototype.readLine \u003d function () {\n        return null;\n    };\n    ShimmedBufferedReader.prototype.close \u003d function () {\n    };\n    return ShimmedBufferedReader;\n}());\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\nvar ShimmedInputStreamReader \u003d (function () {\n    function ShimmedInputStreamReader(is) {\n    }\n    return ShimmedInputStreamReader;\n}());\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\nvar ShimmedGridLayout \u003d (function () {\n    function ShimmedGridLayout(x, y) {\n    }\n    return ShimmedGridLayout;\n}());\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\nvar ShimmedLong \u003d (function () {\n    function ShimmedLong() {\n    }\n    ShimmedLong.parseLong \u003d function (s) {\n        return 0;\n    };\n    return ShimmedLong;\n}());\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\nvar ShimmedChars \u003d (function () {\n    function ShimmedChars() {\n    }\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    ShimmedChars.charCodeArray \u003d function (s) {\n        return null;\n    };\n    return ShimmedChars;\n}());\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\nvar ShimmedImageObserver \u003d (function () {\n    function ShimmedImageObserver() {\n    }\n    return ShimmedImageObserver;\n}());\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\nvar ShimmedRandom \u003d (function () {\n    function ShimmedRandom() {\n    }\n    ShimmedRandom.prototype.nextInt \u003d function (m) {\n        return 0;\n    };\n    return ShimmedRandom;\n}());\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\nvar ShimmedAudioClip \u003d (function () {\n    function ShimmedAudioClip() {\n    }\n    ShimmedAudioClip.prototype.play \u003d function () {\n    };\n    return ShimmedAudioClip;\n}());\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\nvar ShimmedStringBuffer \u003d (function () {\n    function ShimmedStringBuffer(i) {\n        if (((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else if (i \u003d\u003d\u003d undefined) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    }\n    ShimmedStringBuffer.prototype.append \u003d function (s) {\n        return null;\n    };\n    return ShimmedStringBuffer;\n}());\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\nvar EndOfShimDeclarations \u003d (function () {\n    function EndOfShimDeclarations() {\n    }\n    return EndOfShimDeclarations;\n}());\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\nvar SlimeCricket2 \u003d (function (_super) {\n    __extends(SlimeCricket2, _super);\n    function SlimeCricket2() {\n        var _this \u003d _super.call(this) || this;\n        /*private*/ _this.p1Diam \u003d 75;\n        /*private*/ _this.p2Diam \u003d 75;\n        /*private*/ _this.ballRad \u003d 13;\n        _this.nWidth \u003d 0;\n        _this.nHeight \u003d 0;\n        _this.p1X \u003d 0;\n        _this.p1Y \u003d 0;\n        _this.p2X \u003d 0;\n        _this.p2Y \u003d 0;\n        _this.p3X \u003d 0;\n        _this.p3Y \u003d 0;\n        _this.p1Col \u003d 0;\n        _this.p2Col \u003d 0;\n        _this.slimeColours \u003d null;\n        _this.slimeColours2 \u003d null;\n        _this.slimeColText \u003d null;\n        _this.slimeColAbbr \u003d null;\n        _this.difficultyColours \u003d null;\n        _this.difficultyText \u003d null;\n        _this.difficulty \u003d 0;\n        _this.p1OldX \u003d 0;\n        _this.p1OldY \u003d 0;\n        _this.p2OldX \u003d 0;\n        _this.p2OldY \u003d 0;\n        _this.p3OldY \u003d 0;\n        _this.p1XV \u003d 0;\n        _this.p1YV \u003d 0;\n        _this.p2XV \u003d 0;\n        _this.p2YV \u003d 0;\n        _this.p3YV \u003d 0;\n        _this.ballX \u003d 0;\n        _this.ballY \u003d 0;\n        _this.ballVX \u003d 0;\n        _this.ballVY \u003d 0;\n        _this.ballOldX \u003d 0;\n        _this.ballOldY \u003d 0;\n        _this.screen \u003d null;\n        _this.promptMsg \u003d null;\n        _this.mousePressed \u003d false;\n        _this.fCanChangeCol \u003d false;\n        _this.fInPlay \u003d false;\n        _this.p1Blink \u003d 0;\n        _this.p2Blink \u003d 0;\n        _this.fP1Touched \u003d false;\n        _this.fP2Touched \u003d false;\n        _this.gameThread \u003d null;\n        _this.fEndGame \u003d false;\n        _this.BALL_COL \u003d null;\n        _this.COURT_COL \u003d null;\n        _this.DAY_COL \u003d null;\n        _this.NIGHT_COL \u003d null;\n        _this.SKY_COL \u003d null;\n        _this.bounces \u003d 0;\n        _this.fEndOfOver \u003d false;\n        _this.fHitBackWall \u003d false;\n        _this.p1XMin \u003d 0;\n        _this.p2XMin \u003d 0;\n        _this.p2XMax \u003d 0;\n        _this.ballXMax \u003d 0;\n        _this.p1Touches \u003d 0;\n        _this.ballCount \u003d 0;\n        _this.postPos \u003d 0;\n        _this.bowlingCrease \u003d 0;\n        _this.runningCrease \u003d 0;\n        _this.battingCrease \u003d 0;\n        _this.p1Score \u003d 0;\n        _this.p2Score \u003d 0;\n        _this.inns \u003d 0;\n        _this.wicketPenalty \u003d 0;\n        _this.fNoBall \u003d false;\n        _this.overs \u003d 0;\n        _this.stillFrames \u003d 0;\n        _this.buffer \u003d null;\n        _this.thisBall \u003d 0;\n        _this.thisOver \u003d null;\n        _this.p1bxb \u003d null;\n        _this.p2bxb \u003d null;\n        _this.p1Hold \u003d false;\n        _this.ballbowled \u003d false;\n        _this.p1next \u003d false;\n        _this.p2next \u003d false;\n        _this.__wait \u003d 0;\n        _this.p1ai \u003d false;\n        _this.p2ai \u003d false;\n        _this.balltype \u003d 0;\n        _this.shottype \u003d 0;\n        _this.AI_COL \u003d 0;\n        _this.COMM_FOUR \u003d null;\n        _this.COMM_FOURTOUCHED \u003d null;\n        _this.COMM_SIX \u003d null;\n        _this.COMM_SIXTOUCHED \u003d null;\n        _this.COMM_STUMPED \u003d null;\n        _this.COMM_RUNOUT \u003d null;\n        _this.COMM_BOWLED \u003d null;\n        _this.COMM_PLAYEDON \u003d null;\n        _this.COMM_CAUGHT \u003d null;\n        _this.COMM_CTBEHIND \u003d null;\n        _this.COMM_OUT_GENERIC \u003d null;\n        _this.p3X \u003d 1000 - (_this.p1Diam / 2 | 0);\n        _this.slimeColours \u003d [ShimmedColor.yellow, new ShimmedColor(0, 0, 128), new ShimmedColor(164, 164, 255), ShimmedColor.black, new ShimmedColor(0, 100, 0), new ShimmedColor(0, 162, 0), new ShimmedColor(0, 0, 210), new ShimmedColor(128, 78, 0), ShimmedColor.red, ShimmedColor.black];\n        _this.slimeColours2 \u003d [new ShimmedColor(0, 100, 0), ShimmedColor.red, ShimmedColor.yellow, ShimmedColor.gray, ShimmedColor.white, ShimmedColor.yellow, ShimmedColor.yellow, new ShimmedColor(60, 160, 60), ShimmedColor.yellow, ShimmedColor.white];\n        _this.slimeColText \u003d [\"Australia \", \"England \", \"India \", \"New Zealand \", \"Pakistan \", \"South Africa \", \"Sri Lanka \", \"West Indies \", \"Zimbabwe \", \"Computer\"];\n        _this.slimeColAbbr \u003d [\"AUS\", \"ENG\", \"IND\", \"NZ\", \"PAK\", \"RSA\", \"SL\", \"WI\", \"ZIM\", \"AI\"];\n        _this.difficultyColours \u003d [ShimmedColor.blue, ShimmedColor.green, ShimmedColor.red];\n        _this.difficultyText \u003d [\"Grade\", \"Domestic\", \"International\"];\n        _this.BALL_COL \u003d ShimmedColor.white;\n        _this.COURT_COL \u003d new ShimmedColor(0, 160, 0);\n        _this.DAY_COL \u003d new ShimmedColor(85, 85, 255);\n        _this.NIGHT_COL \u003d new ShimmedColor(0, 0, 68);\n        _this.SKY_COL \u003d _this.DAY_COL;\n        _this.fHitBackWall \u003d false;\n        _this.postPos \u003d 1000 - _this.p1Diam - 5;\n        _this.bowlingCrease \u003d 450;\n        _this.runningCrease \u003d 450;\n        _this.battingCrease \u003d _this.postPos - (_this.p2Diam / 2 | 0) - 20;\n        _this.inns \u003d 1;\n        _this.wicketPenalty \u003d 5;\n        _this.fNoBall \u003d false;\n        _this.overs \u003d 5;\n        _this.p1Hold \u003d false;\n        _this.p1ai \u003d false;\n        _this.p2ai \u003d false;\n        _this.balltype \u003d -1;\n        _this.shottype \u003d -1;\n        _this.AI_COL \u003d 9;\n        _this.COMM_FOUR \u003d [\"Along the carpet it goes for four.\", \"Back past the bowler for four.\", \"Picks the gap nicely and into the fence it goes for four.\", \"Shot!\", \"Four more added to the total.\", \"It\\\u0027s certainly a batsman\\\u0027s paradise out there today.\", \"... and the umpire waves his arm once more.\", \"Exactly not what the bowler had planned.\", \"Well it\\\u0027s bounced up off the rope and smacked some guy in the face!\"];\n        _this.COMM_FOURTOUCHED \u003d [\"Terrible fielding effort there.\", \"The bowler won\\\u0027t be pleased with that effort.\", \"Well that should never have been a four.\"];\n        _this.COMM_SIX \u003d [\"He\\\u0027s carving them up like a Christmas cake!\", \"That\\\u0027s come right orf the meat of the bat.\", \"He\\\u0027s hit that one very hored indeed.\", \"He\\\u0027s smacked that one.\", \"He\\\u0027s gone for it... it\\\u0027s gone all the way!\", \"Must be playing on a road out there today.\", \"Looks like he\\\u0027s chasing Andrew Symonds\\\u0027 record here...\"];\n        _this.COMM_SIXTOUCHED \u003d [\"Oh no, he\\\u0027s done a Paul Reiffel!\", \"Well that\\\u0027s six more on top of the no ball, he can\\\u0027t be happy.\"];\n        _this.COMM_STUMPED \u003d [\"Stumped him!\", \"A fine example of wicket keeping there. Excellent stuff.\", \"There goes the red light! What quick hands this keeper has!\"];\n        _this.COMM_RUNOUT \u003d [\"He\\\u0027s run out! What a tragedy!\", \"... and there\\\u0027s the red light. He\\\u0027s out.\", \"Allan Donald would be pleased with that effort.\", \"Well the fielder\\\u0027s decided to chance his arm, and it\\\u0027s come off!\", \"The bails were off in a flash, he never had a chance.\", \"Poor calling there, he deserved to get out.\", \"Well what else do you expect if you run like Ranatunga?\"];\n        _this.COMM_BOWLED \u003d [\"Bowled him neck and crop.\", \"Tremendous delivery, he really had no idea about that.\", \"What a marvellous ball!\", \"That\\\u0027s a ripsnorter of a ball!\", \"I think that\\\u0027s just knocked Joe the stumpcameraman out.\", \"Well the bowler\\\u0027s certainly had his weeties this morning.\", \"There\\\u0027s the death rattle.\", \"That\\\u0027s gotta be a contender for today\\\u0027s fastest ball.\", \"Straight through the gate. The batsman won\\\u0027t be pleased with that.\", \"Completely bamboozled.\", \"A wonderful spell of bowling, this.\"];\n        _this.COMM_PLAYEDON \u003d [\"He\\\u0027s played on!\", \"A magnificent chop shot, oh wait, it\\\u0027s hit the stumps.\", \"He\\\u0027s done an Adam Gilchrist!\"];\n        _this.COMM_CAUGHT \u003d [\"He\\\u0027s hit it straight down his throat.\", \"A safe pair of hands, he doesn\\\u0027t drop those.\", \"What a magnificent shot! No, he\\\u0027s been caught!\", \"A marvellous catch, that.\", \"... and he takes a straightforward catch.\", \"Well, they say \\\"catches win matches\\\".\", \"Caught, yes!\", \"Well, he\\\u0027s picked out the only fielder in front of the bat!\", \"Can\\\u0027t be happy with that shot.\", \"What a shame, we can\\\u0027t use the snickometer on that one it\\\u0027s so damned obvious.\"];\n        _this.COMM_CTBEHIND \u003d [\"... the keeper gobbles up the catch.\", \"... and the snickometer shows that that\\\u0027s clearly out.\", \"Excellent line and length, he\\\u0027s got another edge.\", \"Yes, there was some bat in that, he\\\u0027s gone!\"];\n        _this.COMM_OUT_GENERIC \u003d [\"Got him, yes!\", \"It\\\u0027s all happening here!\", \"A marvellous effort, that!\", \"He\\\u0027s out.\", \"Oh dear.\", \"Gone!\", \"What a magnificent fielding side this team is.\", \"Yes, another one! He\\\u0027s a hero, this man!\"];\n        return _this;\n    }\n    SlimeCricket2.prototype.init \u003d function () {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.buffer \u003d this.createImage(this.nWidth, this.nHeight);\n        this.fInPlay \u003d false;\n        this.fEndGame \u003d true;\n        this.fEndOfOver \u003d false;\n        this.fCanChangeCol \u003d true;\n        this.promptMsg \u003d \"Click team names to select teams, an opponent, then choose an innings length to start!\";\n        this.screen \u003d this.buffer.getGraphics();\n        this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n        this.p1Col \u003d 9;\n        this.p2Col \u003d 9;\n        this.inns \u003d 0;\n    };\n    SlimeCricket2.prototype.paint \u003d function (var1) {\n        var var2 \u003d this.buffer.getGraphics();\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        var2.setColor(this.SKY_COL);\n        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));\n        var2.setColor(this.COURT_COL);\n        var2.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));\n        var2.setColor(ShimmedColor.white);\n        var2.fillRect((this.nWidth * this.postPos / 1000 | 0) - 2, (this.nHeight * 7 / 10 | 0), 3, (this.nHeight / 10 | 0));\n        var2.fillRect((this.nWidth * this.bowlingCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);\n        var2.fillRect((this.nWidth * this.runningCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);\n        var2.fillRect((this.nWidth * this.battingCrease / 1000 | 0) - 1, (this.nHeight * 4 / 5 | 0), 2, 5);\n        this.drawPrompt();\n        var var3;\n        if (!this.fInPlay \u0026\u0026 this.fEndGame) {\n            var3 \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(\"Slime Cricket 2: World Cup Edition BETA\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Slime Cricket 2: World Cup Edition BETA\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 7);\n            this.screen.drawString(\"This is not the final version of the game!\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"This is not the final version of the game!\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 6);\n            this.screen.setColor(this.slimeColours[this.p2Col]);\n            this.screen.fillRect((this.nWidth / 4 | 0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p2Col]) + 20, var3.getAscent() * 2);\n            this.screen.setColor(this.slimeColours2[this.p2Col]);\n            this.screen.drawString(this.slimeColText[this.p2Col], (this.nWidth / 4 | 0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));\n            this.screen.setColor(this.slimeColours[this.p1Col]);\n            this.screen.fillRect((this.nWidth / 2 | 0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p1Col]) + 20, var3.getAscent() * 2);\n            this.screen.setColor(this.slimeColours2[this.p1Col]);\n            this.screen.drawString(this.slimeColText[this.p1Col], (this.nWidth / 2 | 0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));\n            this.screen.setColor(this.difficultyColours[this.difficulty]);\n            this.screen.fillRect((this.nWidth * 3 / 4 | 0) - (var3.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0) - 10, (this.nHeight / 2 | 0) - var3.getAscent() * 2, var3.stringWidth(this.difficultyText[this.difficulty]) + 20, var3.getAscent() * 2);\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(this.difficultyText[this.difficulty], (this.nWidth * 3 / 4 | 0) - (var3.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0), (this.nHeight / 2 | 0) - (var3.getAscent() / 2 | 0));\n            var2.setColor(ShimmedColor.white);\n            this.screen.setColor(this.SKY_COL);\n            for (var var4 \u003d 0; var4 \u003c 5; ++var4) {\n                var2.fillRect((this.nWidth / 4 | 0) + (var4 * this.nWidth / 10 | 0) + 5, (this.nHeight * 2 / 3 | 0) - (var3.getAscent() * 3 / 2 | 0), (this.nWidth / 10 | 0) - 10, 2 * var3.getAscent());\n                this.screen.drawString(var4 + 1 + \" overs\", (this.nWidth * 3 / 10 | 0) + (var4 * this.nWidth / 10 | 0) - (var3.stringWidth(var4 + 1 + \" overs\") / 2 | 0), (this.nHeight * 2 / 3 | 0) - var3.getAscent() * 0);\n            }\n            ;\n            var3 \u003d var2.getFontMetrics();\n            var2.setColor(ShimmedColor.white);\n            var2.drawString(\"Written by Wedgey and Fractoid\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Written by Wedgey and Fractoid\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 6);\n            var2.drawString(\"with input from Browny, Chucky and Damo\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"with input from Browny, Chucky and Damo\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);\n            this.drawScores();\n            var2.drawString(\"Bowling first\", (this.nWidth / 4 | 0) - (var3.stringWidth(\"Bowling first\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);\n            var2.drawString(\"Batting first\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Batting first\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);\n            var2.drawString(\"Difficulty\", (this.nWidth * 3 / 4 | 0) - (var3.stringWidth(\"Difficulty\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getAscent() * 3);\n            var2.drawString(\"Click on innings length to start...\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Click on innings length to start...\") / 2 | 0), (this.nHeight * 2 / 3 | 0) - var3.getHeight() * 2);\n            this.screen.setColor(this.SKY_COL);\n        }\n        else if (!this.fInPlay \u0026\u0026 !this.fEndGame \u0026\u0026 !this.fEndOfOver) {\n            var3 \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(\"Change of innings\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Change of innings\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);\n            this.drawScores();\n        }\n        else if (this.fEndOfOver) {\n            var3 \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            switch ((this.inns)) {\n                case 1:\n                    this.drawScores();\n                    this.screen.drawString(\"Over\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Over\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 3);\n                    this.screen.drawString(\"Last over: \" + this.thisOver, (this.nWidth / 2 | 0) - (var3.stringWidth(\"Last over: \" + this.thisOver) / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight());\n                    break;\n                case 2:\n                    this.drawScores();\n                    this.screen.drawString(\"Over\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Over\") / 2 | 0), var3.getHeight());\n                    this.screen.drawString(\"Last over: \" + this.thisOver, (this.nWidth / 2 | 0) - (var3.stringWidth(\"Last over: \" + this.thisOver) / 2 | 0), var3.getHeight() * 2);\n                    this.drawWorm();\n                    this.screen.drawString(\"After \" + (this.ballCount / 6 | 0) + ((this.ballCount / 6 | 0) \u003d\u003d\u003d 1 ? \" over...\" : \" overs...\"), (this.nWidth / 2 | 0) - (var3.stringWidth(\"After \" + (this.ballCount / 6 | 0) + ((this.ballCount / 6 | 0) \u003d\u003d\u003d 1 ? \" over...\" : \" overs...\")) / 2 | 0), var3.getHeight() * 4);\n                    this.screen.drawString(this.slimeColText[this.p2Col].toUpperCase(), (this.nWidth / 3 | 0), var3.getHeight() * 5);\n                    this.screen.drawString(/* valueOf */ new String(this.p2Score).toString(), (this.nWidth * 2 / 3 | 0) - var3.stringWidth(/* valueOf */ new String(this.p2Score).toString()), var3.getHeight() * 5);\n                    this.screen.drawString(this.slimeColText[this.p1Col] + \" (\" + this.p1Score + \")\", (this.nWidth / 3 | 0), var3.getHeight() * 6);\n                    this.screen.drawString(/* valueOf */ new String(this.p1bxb[this.ballCount - 1]).toString(), (this.nWidth * 2 / 3 | 0) - var3.stringWidth(/* valueOf */ new String(this.p1bxb[this.ballCount - 1]).toString()), var3.getHeight() * 6);\n            }\n        }\n        else {\n            this.drawScores();\n            this.drawWorm();\n        }\n        var1.drawImage(this.buffer, 0, 0, null);\n    };\n    SlimeCricket2.prototype.handleEvent \u003d function (var1) {\n        switch ((var1.id)) {\n            case 401:\n            case 403:\n                if (!this.fEndGame) {\n                    switch ((var1.key)) {\n                        case 32:\n                            this.mousePressed \u003d true;\n                            break;\n                        case 65:\n                        case 97:\n                            if (!this.p1ai) {\n                                this.p1L();\n                            }\n                            break;\n                        case 68:\n                        case 100:\n                            if (!this.p1ai) {\n                                this.p1R();\n                            }\n                            break;\n                        case 69:\n                        case 81:\n                        case 101:\n                        case 113:\n                            if (!this.p1ai) {\n                                this.p3J();\n                            }\n                            break;\n                        case 73:\n                        case 105:\n                        case 1004:\n                            if (!this.p2ai) {\n                                this.p2J();\n                            }\n                            break;\n                        case 74:\n                        case 106:\n                        case 1006:\n                            if (!this.p2ai) {\n                                this.p2L();\n                            }\n                            break;\n                        case 75:\n                        case 107:\n                        case 1005:\n                            this.p2next \u003d true;\n                            if (!this.fEndOfOver \u0026\u0026 this.p1next \u0026\u0026 this.p2next) {\n                                this.nextBall();\n                            }\n                            break;\n                        case 76:\n                        case 108:\n                        case 1007:\n                            if (!this.p2ai) {\n                                this.p2R();\n                            }\n                            break;\n                        case 83:\n                        case 115:\n                            this.p1next \u003d true;\n                            if (!this.fEndOfOver \u0026\u0026 this.p1next \u0026\u0026 this.p2next) {\n                                this.nextBall();\n                            }\n                            break;\n                        case 87:\n                        case 119:\n                            if (!this.p1ai) {\n                                this.p1J();\n                            }\n                    }\n                }\n                break;\n            case 402:\n            case 404:\n                switch ((var1.key)) {\n                    case 65:\n                    case 97:\n                        if (this.p1XV \u003c 0 \u0026\u0026 !this.p1ai) {\n                            this.p1S();\n                        }\n                        return false;\n                    case 68:\n                    case 100:\n                        if (this.p1XV \u003e 0 \u0026\u0026 !this.p1ai) {\n                            this.p1S();\n                        }\n                        return false;\n                    case 74:\n                    case 106:\n                    case 1006:\n                        if (this.p2XV \u003c 0 \u0026\u0026 !this.p2ai) {\n                            this.p2S();\n                        }\n                        return false;\n                    case 76:\n                    case 108:\n                    case 1007:\n                        if (this.p2XV \u003e 0 \u0026\u0026 !this.p2ai) {\n                            this.p2S();\n                        }\n                        return false;\n                    case 83:\n                    case 115:\n                        this.p1Hold \u003d false;\n                        return false;\n                    default:\n                        return false;\n                }\n            case 501:\n                this.mousePressed \u003d true;\n                if (this.fEndOfOver) {\n                    this.gameThread \u003d new ShimmedThread(this);\n                    this.gameThread.start();\n                    this.thisOver \u003d \"\";\n                    this.fEndOfOver \u003d false;\n                    this.promptMsg \u003d \"\";\n                    this.repaint();\n                }\n                else if (!this.fInPlay) {\n                    if (!this.fEndGame) {\n                        this.fInPlay \u003d true;\n                        ++this.inns;\n                        var var7 \u003d this.p1Col;\n                        this.p1Col \u003d this.p2Col;\n                        this.p2Col \u003d var7;\n                        var var8 \u003d this.p1Score;\n                        this.p1Score \u003d this.p2Score;\n                        this.p2Score \u003d var8;\n                        var var9 \u003d this.p1bxb;\n                        this.p1bxb \u003d this.p2bxb;\n                        this.p2bxb \u003d var9;\n                        if (Math.random() \u003c 0.8) {\n                            this.SKY_COL \u003d this.NIGHT_COL;\n                        }\n                        var var6 \u003d this.p1ai;\n                        this.p1ai \u003d this.p2ai;\n                        this.p2ai \u003d var6;\n                    }\n                    else {\n                        var var2 \u003d this.screen.getFontMetrics();\n                        if (var1.y \u003e (this.nHeight * 2 / 3 | 0) - (var2.getAscent() * 3 / 2 | 0) \u0026\u0026 var1.y \u003c (this.nHeight * 2 / 3 | 0) + (var2.getAscent() / 2 | 0)) {\n                            for (var var3 \u003d 0; var3 \u003c 5 \u0026\u0026 !this.fInPlay; ++var3) {\n                                if (var1.x \u003e (this.nWidth / 4 | 0) + (var3 * this.nWidth / 10 | 0) + 5 \u0026\u0026 var1.x \u003c (this.nWidth / 4 | 0) + ((var3 + 1) * this.nWidth / 10 | 0) - 5) {\n                                    this.fEndGame \u003d false;\n                                    this.fInPlay \u003d true;\n                                    this.p1ai \u003d this.p2ai \u003d false;\n                                    if (this.p1Col \u003d\u003d\u003d 9) {\n                                        this.p2ai \u003d true;\n                                        while (((this.p1Col \u003d ((Math.random() * this.slimeColours.length) | 0)) \u003d\u003d\u003d this.p2Col)) {\n                                        }\n                                        ;\n                                    }\n                                    if (this.p2Col \u003d\u003d\u003d 9) {\n                                        this.p1ai \u003d true;\n                                        while (((this.p2Col \u003d ((Math.random() * this.slimeColours.length) | 0)) \u003d\u003d\u003d this.p1Col)) {\n                                        }\n                                        ;\n                                    }\n                                    this.inns \u003d 1;\n                                    this.p1Score \u003d this.p2Score \u003d 0;\n                                    var var4 \u003d this.p1Col;\n                                    this.p1Col \u003d this.p2Col;\n                                    this.p2Col \u003d var4;\n                                    this.SKY_COL \u003d this.DAY_COL;\n                                    this.overs \u003d var3 + 1;\n                                    this.p1bxb \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n                                        a.push(0); return a; })(this.overs * 6);\n                                    this.p2bxb \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n                                        a.push(0); return a; })(this.overs * 6);\n                                    for (var var5 \u003d 0; var5 \u003c this.overs * 6; ++var5) {\n                                        this.p1bxb[var5] \u003d this.p2bxb[var5] \u003d 0;\n                                    }\n                                    ;\n                                }\n                            }\n                            ;\n                        }\n                        else if (var1.y \u003e (this.nHeight / 2 | 0) - var2.getAscent() * 2 \u0026\u0026 var1.y \u003c (this.nHeight / 2 | 0)) {\n                            if (var1.x \u003e (this.nWidth / 4 | 0) - (var2.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) - 10 \u0026\u0026 var1.x \u003c (this.nWidth / 4 | 0) + (var2.stringWidth(this.slimeColText[this.p2Col]) / 2 | 0) + 10) {\n                                while ((true)) {\n                                    this.p2Col \u003d this.p2Col !\u003d\u003d this.slimeColours.length - 1 ? this.p2Col + 1 : 0;\n                                    if (this.p1Col !\u003d\u003d this.p2Col) {\n                                        this.repaint();\n                                        break;\n                                    }\n                                }\n                                ;\n                            }\n                            else if (var1.x \u003e (this.nWidth / 2 | 0) - (var2.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) - 10 \u0026\u0026 var1.x \u003c (this.nWidth / 2 | 0) + (var2.stringWidth(this.slimeColText[this.p1Col]) / 2 | 0) + 10) {\n                                while ((true)) {\n                                    this.p1Col \u003d this.p1Col !\u003d\u003d this.slimeColours.length - 1 ? this.p1Col + 1 : 0;\n                                    if (this.p1Col !\u003d\u003d this.p2Col) {\n                                        this.repaint();\n                                        break;\n                                    }\n                                }\n                                ;\n                            }\n                            else if (var1.x \u003e (this.nWidth * 3 / 4 | 0) - (var2.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0) - 10 \u0026\u0026 var1.x \u003c (this.nWidth * 3 / 4 | 0) + (var2.stringWidth(this.difficultyText[this.difficulty]) / 2 | 0) + 10) {\n                                this.difficulty \u003d (this.difficulty + 1) % this.difficultyText.length;\n                                this.repaint();\n                            }\n                        }\n                    }\n                    if (this.fInPlay) {\n                        this.ballCount \u003d -1;\n                        this.thisOver \u003d \"\";\n                        this.promptMsg \u003d \"\";\n                        this.thisBall \u003d 0;\n                        this.nextBall();\n                        this.gameThread \u003d new ShimmedThread(this);\n                        this.gameThread.start();\n                    }\n                }\n                break;\n            case 503:\n                this.showStatus(\"Slime Cricket 2: by Wedgey: http://www.student.uwa.edu.au/~wedgey/slimec/\");\n        }\n        return false;\n    };\n    /*private*/ SlimeCricket2.prototype.p1L \u003d function () {\n        this.p1XV \u003d -8;\n    };\n    /*private*/ SlimeCricket2.prototype.p1R \u003d function () {\n        this.p1XV \u003d 8;\n    };\n    /*private*/ SlimeCricket2.prototype.p1J \u003d function () {\n        if (this.p1Y \u003d\u003d\u003d 0) {\n            this.p1YV \u003d 31;\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.p1S \u003d function () {\n        this.p1XV \u003d 0;\n    };\n    /*private*/ SlimeCricket2.prototype.p2L \u003d function () {\n        this.p2XV \u003d -8;\n    };\n    /*private*/ SlimeCricket2.prototype.p2R \u003d function () {\n        this.p2XV \u003d 8;\n    };\n    /*private*/ SlimeCricket2.prototype.p2J \u003d function () {\n        if (this.p2Y \u003d\u003d\u003d 0) {\n            this.p2YV \u003d 31;\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.p2S \u003d function () {\n        this.p2XV \u003d 0;\n    };\n    /*private*/ SlimeCricket2.prototype.p3J \u003d function () {\n        if (this.p3Y \u003d\u003d\u003d 0) {\n            this.p3YV \u003d 31;\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.nextBall \u003d function () {\n        this.__wait \u003d 50;\n        this.p1XMin \u003d this.p1X \u003d this.runningCrease - (this.p1Diam / 2 | 0);\n        this.p2XMin \u003d this.p2XMax \u003d this.p2X \u003d this.battingCrease + 20;\n        this.ballVX \u003d this.ballVY \u003d this.p1Y \u003d this.p2Y \u003d this.p2XV \u003d this.p2YV \u003d this.p3Y \u003d this.p3YV \u003d this.p1XV \u003d this.p1YV \u003d 0;\n        this.ballXMax \u003d this.ballX \u003d this.runningCrease - (this.p1Diam / 2 | 0);\n        this.ballY \u003d 400;\n        this.balltype \u003d -1;\n        this.shottype \u003d -1;\n        this.p1next \u003d this.p2next \u003d false;\n        this.ballbowled \u003d false;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.bounces \u003d 0;\n        this.p1Touches \u003d 0;\n        if (this.fNoBall) {\n            ++this.thisBall;\n        }\n        if (this.ballCount \u003e\u003d 0) {\n            this.p2bxb[this.ballCount] \u003d this.p2Score +\u003d Math.floor(this.thisBall);\n            if (this.fNoBall) {\n                this.thisOver \u003d this.thisOver + \"N\";\n            }\n            if (this.thisBall !\u003d\u003d -this.wicketPenalty \u0026\u0026 this.thisBall !\u003d\u003d -this.wicketPenalty + 1) {\n                if (this.thisBall \u003d\u003d\u003d 0) {\n                    this.thisOver \u003d this.thisOver + \".\";\n                }\n                else if (!this.fNoBall || this.thisBall !\u003d\u003d -this.wicketPenalty + 1 \u0026\u0026 this.thisBall !\u003d\u003d 0) {\n                    this.thisOver \u003d this.thisOver + (!this.fNoBall ? this.thisBall : this.thisBall - 1);\n                }\n            }\n            else {\n                this.thisOver \u003d this.thisOver + \"W\";\n            }\n            this.thisOver \u003d this.thisOver + \" \";\n        }\n        this.thisBall \u003d 0;\n        if (!this.fNoBall) {\n            ++this.ballCount;\n            if (this.ballCount % 6 \u003d\u003d\u003d 0 \u0026\u0026 this.ballCount !\u003d\u003d 0 \u0026\u0026 this.ballCount !\u003d\u003d this.overs * 6) {\n                this.fEndOfOver \u003d true;\n                this.gameThread \u003d null;\n                this.promptMsg \u003d \"Click the mouse to continue...\";\n            }\n        }\n        this.fNoBall \u003d false;\n        this.fHitBackWall \u003d false;\n        this.stillFrames \u003d 0;\n        this.repaint();\n    };\n    /*private*/ SlimeCricket2.prototype.getMinScore \u003d function (var1) {\n        var var2 \u003d 0;\n        for (var var4 \u003d 0; var4 \u003c this.overs * 6; ++var4) {\n            if ((var1 \u003d\u003d\u003d 1 ? this.p1bxb[var4] : this.p2bxb[var4]) \u003c var2) {\n                var2 \u003d var1 \u003d\u003d\u003d 1 ? this.p1bxb[var4] : this.p2bxb[var4];\n            }\n        }\n        ;\n        return var2;\n    };\n    /*private*/ SlimeCricket2.prototype.getMaxScore \u003d function (var1) {\n        var var2 \u003d 0;\n        for (var var4 \u003d 0; var4 \u003c this.overs * 6; ++var4) {\n            if ((var1 \u003d\u003d\u003d 1 ? this.p1bxb[var4] : this.p2bxb[var4]) \u003e var2) {\n                var2 \u003d var1 \u003d\u003d\u003d 1 ? this.p1bxb[var4] : this.p2bxb[var4];\n            }\n        }\n        ;\n        return var2;\n    };\n    /*private*/ SlimeCricket2.prototype.MoveSlimers \u003d function () {\n        if (this.p1ai) {\n            if (!this.ballbowled) {\n                this.bowl();\n            }\n            else {\n                this.field();\n            }\n        }\n        if (this.p2ai) {\n            if (!this.fP2Touched \u0026\u0026 !this.fHitBackWall) {\n                this.playball();\n            }\n            else {\n                this.running();\n            }\n        }\n        this.p1X +\u003d this.p1XV;\n        if (this.p1X \u003c (this.p1Diam / 2 | 0)) {\n            this.p1X \u003d (this.p1Diam / 2 | 0);\n        }\n        if (this.p1X \u003e this.postPos - (this.p1Diam / 2 | 0) - 5) {\n            this.p1X \u003d this.postPos - (this.p1Diam / 2 | 0) - 5;\n        }\n        if (this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d 2;\n            if (this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        if (this.ballX \u003d\u003d\u003d 200 \u0026\u0026 this.ballVX \u003d\u003d\u003d 200 \u0026\u0026 this.p1X \u003c this.p1XMin) {\n            this.p1XMin \u003d this.p1X;\n        }\n        this.p2X +\u003d this.p2XV;\n        if (this.p2X \u003e this.postPos - (this.p2Diam / 2 | 0) - 5) {\n            this.p2X \u003d this.postPos - (this.p2Diam / 2 | 0) - 5;\n        }\n        if (this.p2X \u003c (this.p2Diam / 2 | 0)) {\n            this.p2X \u003d (this.p2Diam / 2 | 0);\n        }\n        if (this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d 2;\n            if (this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n        if (this.p2X \u003c this.p2XMin \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            this.p2XMin \u003d this.p2X;\n        }\n        else if (this.p2X \u003e this.p2XMax \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            this.p2XMax \u003d this.p2X;\n        }\n        if (this.p2X - (this.p2Diam / 2 | 0) \u003c\u003d this.runningCrease \u0026\u0026 this.p2XMax + (this.p2Diam / 2 | 0) \u003e\u003d this.battingCrease \u0026\u0026 (this.fP2Touched || this.fHitBackWall) \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            ++this.thisBall;\n            this.p2XMin \u003d this.p2XMax \u003d this.p2X;\n            this.drawScores();\n        }\n        else if (this.p2XMin - (this.p2Diam / 2 | 0) \u003c\u003d this.runningCrease \u0026\u0026 this.p2X + (this.p2Diam / 2 | 0) \u003e\u003d this.battingCrease \u0026\u0026 (this.fP2Touched || this.fHitBackWall) \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            ++this.thisBall;\n            this.p2XMin \u003d this.p2XMax \u003d this.p2X;\n            this.drawScores();\n        }\n        if (this.p3YV !\u003d\u003d 0) {\n            this.p3Y +\u003d this.p3YV -\u003d 2;\n        }\n        if (this.p3Y \u003c 0) {\n            this.p3Y \u003d 0;\n            this.p3YV \u003d 0;\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.DrawSlimers \u003d function () {\n        var var1 \u003d (this.ballX * this.nWidth / 1000 | 0);\n        var var2 \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        var var3 \u003d (this.nWidth * this.p1Diam / 1000 | 0);\n        var var4 \u003d (this.nHeight * this.p1Diam / 1000 | 0);\n        var var5 \u003d (this.p1OldX * this.nWidth / 1000 | 0) - (var3 / 2 | 0);\n        var var6 \u003d (4 * this.nHeight / 5 | 0) - var4 - (this.p1OldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillRect(var5, var6, var3, var4);\n        var3 \u003d (this.nWidth * this.p2Diam / 1000 | 0);\n        var4 \u003d (this.nHeight * this.p2Diam / 1000 | 0);\n        var5 \u003d (this.p2OldX * this.nWidth / 1000 | 0) - (var3 / 2 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - var4 - (this.p2OldY * this.nHeight / 1000 | 0);\n        this.screen.fillRect(var5, var6, var3, var4);\n        var3 \u003d (this.nWidth / 10 | 0);\n        var4 \u003d (this.nHeight / 10 | 0);\n        var5 \u003d (this.p3X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - var4 - (this.p3OldY * this.nHeight / 1000 | 0);\n        this.screen.fillRect(var5, var6, var3, var4);\n        var var7 \u003d 5;\n        var var8 \u003d ((this.ballRad + var7) * this.nHeight / 1000 | 0);\n        this.screen.fillOval(var1 - var8, var2 - var8, 2 * var8, 2 * var8);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillRect((this.nWidth * this.postPos / 1000 | 0) - 2, (this.nHeight * 7 / 10 | 0), 3, (this.nHeight / 10 | 0));\n        var3 \u003d (this.nWidth * this.p1Diam / 1000 | 0);\n        var4 \u003d (this.nHeight * this.p1Diam / 1000 | 0);\n        var5 \u003d (this.p1X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - var4 - (this.p1Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.slimeColours2[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);\n        this.screen.setColor(this.slimeColours[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);\n        this.screen.fillRect(var5 + (var3 / 5 | 0), var6 + (var4 / 5 | 0), (var3 * 3 / 5 | 0), (var4 * 4 / 5 | 0));\n        var var9 \u003d this.p1X + (38 * this.p1Diam / 100 | 0);\n        var var10 \u003d this.p1Y - (60 * this.p1Diam / 100 | 0);\n        var5 \u003d (var9 * this.nWidth / 1000 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);\n        var var11 \u003d var5 - var1;\n        var var12 \u003d var6 - var2;\n        var var13 \u003d (Math.sqrt((var11 * var11 + var12 * var12)) | 0);\n        if (var13 \u003d\u003d\u003d 0) {\n            var13 \u003d 1;\n        }\n        var var14 \u003d ((this.nWidth / 50 | 0) * this.p1Diam / 100 | 0);\n        var var15 \u003d ((this.nHeight / 25 | 0) * this.p1Diam / 100 | 0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));\n        var3 \u003d (this.nWidth * this.p2Diam / 1000 | 0);\n        var4 \u003d (this.nHeight * this.p2Diam / 1000 | 0);\n        var5 \u003d (this.p2X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - (this.p2Diam * this.nHeight / 1000 | 0) - (this.p2Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.slimeColours2[this.p2Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);\n        this.screen.setColor(this.slimeColours[this.p2Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);\n        this.screen.fillRect(var5 + (var3 / 5 | 0), var6 + (var4 / 5 | 0), (var3 * 3 / 5 | 0), (var4 * 4 / 5 | 0));\n        var9 \u003d this.p2X - (18 * this.p2Diam / 100 | 0);\n        var10 \u003d this.p2Y - (60 * this.p2Diam / 100 | 0);\n        var5 \u003d (var9 * this.nWidth / 1000 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);\n        var11 \u003d var5 - var1;\n        var12 \u003d var6 - var2;\n        var13 \u003d (Math.sqrt((var11 * var11 + var12 * var12)) | 0);\n        if (var13 \u003d\u003d\u003d 0) {\n            var13 \u003d 1;\n        }\n        var14 \u003d ((this.nWidth / 50 | 0) * this.p2Diam / 100 | 0);\n        var15 \u003d ((this.nHeight / 25 | 0) * this.p2Diam / 100 | 0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));\n        var3 \u003d (this.nWidth * this.p1Diam / 1000 | 0);\n        var4 \u003d (this.nHeight * this.p1Diam / 1000 | 0);\n        var5 \u003d (this.p3X * this.nWidth / 1000 | 0) - (var3 / 2 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - (this.p1Diam * this.nHeight / 1000 | 0) - (this.p3Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.slimeColours2[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);\n        this.screen.setColor(this.slimeColours[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);\n        this.screen.fillRect(var5 + (var3 / 5 | 0), var6 + (var4 / 5 | 0), (var3 * 3 / 5 | 0), (var4 * 4 / 5 | 0));\n        var9 \u003d this.p3X - (18 * this.p1Diam / 100 | 0);\n        var10 \u003d this.p3Y - (60 * this.p1Diam / 100 | 0);\n        var5 \u003d (var9 * this.nWidth / 1000 | 0);\n        var6 \u003d (4 * this.nHeight / 5 | 0) - var4 - (var10 * this.nHeight / 1000 | 0);\n        var11 \u003d var5 - var1;\n        var12 \u003d var6 - var2;\n        var13 \u003d (Math.sqrt((var11 * var11 + var12 * var12)) | 0);\n        if (var13 \u003d\u003d\u003d 0) {\n            var13 \u003d 1;\n        }\n        var14 \u003d ((this.nWidth / 50 | 0) * this.p1Diam / 100 | 0);\n        var15 \u003d ((this.nHeight / 25 | 0) * this.p1Diam / 100 | 0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.fillOval(var5 - (4 * var11 / var13 | 0) - (3 * var14 / 4 | 0), var6 - (4 * var12 / var13 | 0) - (3 * var15 / 4 | 0), (var14 / 2 | 0), (var15 / 2 | 0));\n        this.MoveBall();\n    };\n    /*private*/ SlimeCricket2.prototype.MoveBall \u003d function () {\n        var var1 \u003d 5;\n        var var2 \u003d 11;\n        var var3 \u003d 21;\n        var var4 \u003d 17;\n        var var5 \u003d ((this.ballRad + var1) * this.nHeight / 1000 | 0);\n        var var6 \u003d (this.ballOldX * this.nWidth / 1000 | 0);\n        var var7 \u003d (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        this.ballbowled \u003d this.ballbowled || this.ballX \u003e this.bowlingCrease;\n        if (this.ballVX \u003e\u003d 2 || this.ballVY \u003e\u003d 2 || this.p1XV + this.p1YV + this.p2XV + this.p2YV + this.p3YV !\u003d\u003d 0 || this.ballX \u003d\u003d\u003d 200 || this.p2X \u003e this.runningCrease + (this.p2Diam / 2 | 0) \u0026\u0026 this.p2X \u003c this.battingCrease - (this.p2Diam / 2 | 0)) {\n            this.stillFrames \u003d 0;\n        }\n        else if (this.stillFrames++ \u003e 75) {\n            this.promptMsg \u003d \" \";\n        }\n        if (this.ballY \u003c this.ballRad + 5) {\n            this.ballY \u003d this.ballRad + 5;\n            this.ballVY \u003d (-this.ballVY * 2 / 3 | 0);\n            this.ballVX \u003d (this.ballVX * 19 / 20 | 0);\n            ++this.bounces;\n            if (!this.fP2Touched \u0026\u0026 this.bounces \u003e 1 \u0026\u0026 !this.fHitBackWall) {\n                this.fNoBall \u003d true;\n                this.drawPrompt$java_lang_String$int(\"No ball! (grubber)\", 2);\n            }\n        }\n        if (this.ballX \u003e this.postPos \u0026\u0026 !this.fP2Touched) {\n            this.fP2Touched \u003d true;\n        }\n        if (this.ballY \u003e 300 \u0026\u0026 this.ballX \u003e this.battingCrease - (this.p2Diam / 2 | 0) \u0026\u0026 this.p2X \u003e\u003d this.battingCrease - (this.p2Diam / 2 | 0) \u0026\u0026 !this.fP2Touched \u0026\u0026 this.p2XMin \u003e this.battingCrease - (this.p2Diam * 3 / 4 | 0)) {\n            this.fNoBall \u003d true;\n            this.drawPrompt$java_lang_String$int(\"No ball! (too high)\", 2);\n        }\n        if (!this.fEndGame) {\n            var var8 \u003d 2 * (this.ballX - this.p1X);\n            var var9 \u003d this.ballY - this.p1Y;\n            var var10 \u003d (Math.sqrt((var8 * var8 + var9 * var9)) | 0);\n            var var11 \u003d this.ballVX - this.p1XV;\n            var var12 \u003d this.ballVY - this.p1YV;\n            var var13 \u003d void 0;\n            if (var9 \u003e 0 \u0026\u0026 var10 \u003c this.p1Diam + this.ballRad \u0026\u0026 var10 \u003e var1) {\n                var13 \u003d ((var8 * var11 + var9 * var12) / var10 | 0);\n                this.ballX \u003d this.p1X + (((this.p1Diam + this.ballRad) / 2 | 0) * var8 / var10 | 0);\n                this.ballY \u003d this.p1Y + ((this.p1Diam + this.ballRad) * var9 / var10 | 0);\n                if (var13 \u003c\u003d 0) {\n                    if (!this.p1Hold) {\n                        this.ballVX +\u003d this.p1XV - (2 * var8 * var13 / var10 | 0);\n                    }\n                    else {\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                    }\n                    if (this.ballVX \u003c -var2) {\n                        this.ballVX \u003d -var2;\n                    }\n                    if (this.ballVX \u003e var2) {\n                        this.ballVX \u003d var2;\n                    }\n                    this.ballVY +\u003d this.p1YV - (2 * var9 * var13 / var10 | 0);\n                    if (this.ballVY \u003c -var3) {\n                        this.ballVY \u003d -var3;\n                    }\n                    if (this.ballVY \u003e var3) {\n                        this.ballVY \u003d var3;\n                    }\n                }\n                if (this.p1Touches \u003e 0 \u0026\u0026 !this.fP2Touched \u0026\u0026 this.ballOldX \u003d\u003d\u003d this.ballXMax \u0026\u0026 !this.fHitBackWall) {\n                    this.drawPrompt$java_lang_String$int(\"No ball! (too many touches)\", 2);\n                    this.fNoBall \u003d true;\n                }\n                if (this.fP2Touched) {\n                    this.fP1Touched \u003d true;\n                }\n                if (this.p1X !\u003d\u003d this.runningCrease - (this.p1Diam / 2 | 0)) {\n                    ++this.p1Touches;\n                }\n                if (this.fP2Touched \u0026\u0026 this.bounces \u003d\u003d\u003d 0 \u0026\u0026 !this.fNoBall \u0026\u0026 !this.fHitBackWall \u0026\u0026 this.ballX \u003e\u003d this.p1X) {\n                    this.promptMsg \u003d this.COMM_CAUGHT[((this.COMM_CAUGHT.length * Math.random()) | 0)];\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n            }\n            if (!this.fP2Touched) {\n                var8 \u003d 2 * (this.ballX - this.p2X);\n                var9 \u003d this.ballY - this.p2Y;\n                var10 \u003d (Math.sqrt((var8 * var8 + var9 * var9)) | 0);\n                var11 \u003d this.ballVX - this.p2XV;\n                var12 \u003d this.ballVY - this.p2YV;\n                if (var9 \u003e 0 \u0026\u0026 var10 \u003c this.p2Diam + this.ballRad \u0026\u0026 var10 \u003e var1 \u0026\u0026 this.p1Touches \u003e 0) {\n                    var13 \u003d ((var8 * var11 + var9 * var12) / var10 | 0);\n                    this.ballX \u003d this.p2X + (((this.p2Diam + this.ballRad) / 2 | 0) * var8 / var10 | 0);\n                    this.ballY \u003d this.p2Y + ((this.p2Diam + this.ballRad) * var9 / var10 | 0);\n                    if (var13 \u003c\u003d 0) {\n                        this.ballVX +\u003d this.p2XV - (2 * var8 * var13 / var10 | 0);\n                        if (this.ballVX \u003c -var4) {\n                            this.ballVX \u003d -var4;\n                        }\n                        if (this.ballVX \u003e var2) {\n                            this.ballVX \u003d var2;\n                        }\n                        this.ballVY +\u003d this.p2YV - (2 * var9 * var13 / var10 | 0);\n                        if (this.ballVY \u003c -var3) {\n                            this.ballVY \u003d -var3;\n                        }\n                        if (this.ballVY \u003e var3) {\n                            this.ballVY \u003d var3;\n                        }\n                    }\n                    this.fP2Touched \u003d true;\n                    this.bounces \u003d 0;\n                }\n            }\n            var8 \u003d 2 * (this.ballX - this.p3X);\n            var9 \u003d this.ballY - this.p3Y;\n            var10 \u003d (Math.sqrt((var8 * var8 + var9 * var9)) | 0);\n            var11 \u003d this.ballVX;\n            var12 \u003d this.ballVY - this.p3YV;\n            if (var9 \u003e 0 \u0026\u0026 var10 \u003c this.p1Diam + this.ballRad \u0026\u0026 var10 \u003e var1) {\n                var13 \u003d (((var8 * var11 + var9 * var12) / var10 | 0) * 2 / 3 | 0);\n                this.ballX \u003d this.p3X + (((this.p1Diam + this.ballRad) / 2 | 0) * var8 / var10 | 0);\n                this.ballY \u003d this.p3Y + ((this.p1Diam + this.ballRad) * var9 / var10 | 0);\n                if (var13 \u003c\u003d 0) {\n                    this.ballVX +\u003d (-2 * var8 * var13 / var10 | 0);\n                    if (this.ballVX \u003c -var4) {\n                        this.ballVX \u003d -var4;\n                    }\n                    if (this.ballVX \u003e var2) {\n                        this.ballVX \u003d var2;\n                    }\n                    this.ballVY +\u003d this.p3YV - (2 * var9 * var13 / var10 | 0);\n                    if (this.ballVY \u003c -var3) {\n                        this.ballVY \u003d -var3;\n                    }\n                    if (this.ballVY \u003e var3) {\n                        this.ballVY \u003d var3;\n                    }\n                }\n                if (!this.fP1Touched \u0026\u0026 this.fP2Touched \u0026\u0026 this.bounces \u003d\u003d\u003d 0 \u0026\u0026 !this.fNoBall) {\n                    this.promptMsg \u003d this.COMM_CTBEHIND[((this.COMM_CTBEHIND.length * Math.random()) | 0)];\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n                else if (this.p2X \u003c this.battingCrease - (this.p2Diam / 2 | 0) \u0026\u0026 this.p2X \u003e this.runningCrease + (this.p2Diam / 2 | 0) || this.p2Y !\u003d\u003d 0) {\n                    if (this.p2XMin - (this.p2Diam / 2 | 0) \u003e this.runningCrease \u0026\u0026 !this.fNoBall \u0026\u0026 !this.fP1Touched) {\n                        this.promptMsg \u003d this.COMM_STUMPED[((this.COMM_STUMPED.length * Math.random()) | 0)];\n                    }\n                    else {\n                        this.promptMsg \u003d this.COMM_RUNOUT[((this.COMM_RUNOUT.length * Math.random()) | 0)];\n                    }\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n                this.fP1Touched \u003d true;\n            }\n            if (this.ballX \u003c 5) {\n                this.ballX \u003d 5;\n                this.ballVX \u003d (-this.ballVX * 2 / 3 | 0);\n                if (this.fP2Touched \u0026\u0026 this.bounces \u003d\u003d\u003d 0 \u0026\u0026 !this.fHitBackWall) {\n                    this.promptMsg \u003d this.COMM_SIX[((this.COMM_SIX.length * Math.random()) | 0)];\n                    if (this.fP1Touched \u0026\u0026 Math.random() \u003c 0.7) {\n                        this.promptMsg \u003d this.COMM_SIXTOUCHED[((this.COMM_SIXTOUCHED.length * Math.random()) | 0)];\n                    }\n                    this.drawPrompt$java_lang_String$int(this.promptMsg, 1);\n                    this.promptMsg \u003d \"\";\n                    this.thisBall +\u003d 6;\n                }\n                else if (this.fP2Touched \u0026\u0026 !this.fHitBackWall) {\n                    this.promptMsg \u003d this.COMM_FOUR[((this.COMM_FOUR.length * Math.random()) | 0)];\n                    if (this.fP1Touched \u0026\u0026 Math.random() \u003c 0.7) {\n                        this.promptMsg \u003d this.COMM_FOURTOUCHED[((this.COMM_FOURTOUCHED.length * Math.random()) | 0)];\n                    }\n                    this.drawPrompt$java_lang_String$int(this.promptMsg, 1);\n                    this.promptMsg \u003d \"\";\n                    this.thisBall +\u003d 4;\n                }\n                else if (!this.fP2Touched) {\n                    this.fNoBall \u003d true;\n                    this.drawPrompt$java_lang_String$int(\"No ball! (must bowl forwards)\", 2);\n                }\n                if (this.fP2Touched) {\n                    this.fHitBackWall \u003d true;\n                }\n            }\n            if (this.ballX \u003e 995) {\n                this.ballX \u003d 995;\n                this.ballVX \u003d (-this.ballVX * 2 / 3 | 0);\n                this.fHitBackWall \u003d true;\n            }\n            if (this.ballX \u003e this.postPos - this.ballRad \u0026\u0026 this.ballX \u003c this.postPos + this.ballRad \u0026\u0026 this.ballY \u003c 105 + this.ballRad) {\n                if ((this.p2X \u003c this.battingCrease - (this.p2Diam / 2 | 0) \u0026\u0026 this.p2X \u003e this.runningCrease + (this.p2Diam / 2 | 0) || this.p2Y !\u003d\u003d 0) \u0026\u0026 this.fP1Touched \u0026\u0026 this.fP2Touched) {\n                    this.promptMsg \u003d this.COMM_RUNOUT[((this.COMM_RUNOUT.length * Math.random()) | 0)];\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n                else if (!this.fNoBall \u0026\u0026 !this.fHitBackWall \u0026\u0026 this.p1Touches \u003d\u003d\u003d 1) {\n                    this.promptMsg \u003d this.COMM_BOWLED[((this.COMM_BOWLED.length * Math.random()) | 0)];\n                    if (this.fP2Touched \u0026\u0026 Math.random() \u003c 0.5) {\n                        this.promptMsg \u003d this.COMM_PLAYEDON[((this.COMM_PLAYEDON.length * Math.random()) | 0)];\n                    }\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n                this.fHitBackWall \u003d true;\n                if (this.ballVY \u003c 0 \u0026\u0026 this.ballY \u003e 105 + this.ballRad) {\n                    this.ballVY *\u003d -1;\n                    this.ballY \u003d 105 + this.ballRad;\n                }\n                else if (this.ballX \u003c this.postPos) {\n                    this.ballX \u003d this.postPos - 17;\n                    this.ballVX \u003d ((this.ballVX \u003e\u003d 0 ? -this.ballVX : this.ballVX) * 3 / 4 | 0);\n                }\n                else {\n                    this.ballX \u003d this.postPos + 17;\n                    this.ballVX \u003d ((this.ballVX \u003c\u003d 0 ? -this.ballVX : this.ballVX) * 3 / 4 | 0);\n                }\n                this.fP2Touched \u003d true;\n            }\n        }\n        if (this.ballX \u003e this.ballXMax) {\n            this.ballXMax \u003d this.ballX;\n        }\n        var6 \u003d (this.ballX * this.nWidth / 1000 | 0);\n        var7 \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.BALL_COL);\n        this.screen.fillOval(var6 - var5, var7 - var5, 2 * var5, 2 * var5);\n        this.drawScores();\n        if (this.promptMsg.length \u003e 0) {\n            if (this.promptMsg.length \u003e 1 \u0026\u0026 Math.random() \u003c 0.3) {\n                this.promptMsg \u003d this.COMM_OUT_GENERIC[((this.COMM_OUT_GENERIC.length * Math.random()) | 0)];\n            }\n            this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n            this.getGraphics().drawImage(this.buffer, 0, 0, this);\n            if (this.promptMsg.length \u003e 1) {\n                ShimmedThread.sleep$long(1500);\n            }\n            this.promptMsg \u003d \"\";\n            this.nextBall();\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.sleep \u003d function (var1) {\n        if (this.gameThread !\u003d null) {\n            try {\n                ShimmedThread.sleep$long(var1);\n            }\n            catch (var3) {\n            }\n            ;\n        }\n    };\n    SlimeCricket2.prototype.drawPrompt$ \u003d function () {\n        this.screen.setColor(this.COURT_COL);\n        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    };\n    SlimeCricket2.prototype.drawPrompt$java_lang_String$int \u003d function (var1, var2) {\n        var var3 \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);\n    };\n    SlimeCricket2.prototype.drawPrompt \u003d function (var1, var2) {\n        if (((typeof var1 \u003d\u003d\u003d \u0027string\u0027) || var1 \u003d\u003d\u003d null) \u0026\u0026 ((typeof var2 \u003d\u003d\u003d \u0027number\u0027) || var2 \u003d\u003d\u003d null)) {\n            return this.drawPrompt$java_lang_String$int(var1, var2);\n        }\n        else if (var1 \u003d\u003d\u003d undefined \u0026\u0026 var2 \u003d\u003d\u003d undefined) {\n            return this.drawPrompt$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    /*private*/ SlimeCricket2.prototype.drawScores \u003d function () {\n        if (this.inns !\u003d\u003d 0) {\n            var var1 \u003d this.screen;\n            var var2 \u003d var1.getFontMetrics();\n            var var3 \u003d 1;\n            var1.setColor(this.SKY_COL);\n            var1.fillRect(0, 0, (this.nWidth / 2 | 0), 3 * var2.getAscent() + 10);\n            var1.setColor(ShimmedColor.white);\n            var var4 \u003d this.slimeColText[this.p2Col] + (this.p2Score + Math.floor(this.thisBall));\n            var1.drawString(var4, 10, (var2.getAscent() + 3) * var3 + 10);\n            var var5 \u003d var3 + 1;\n            if (this.inns !\u003d\u003d 1) {\n                var4 \u003d this.slimeColText[this.p1Col] + this.p1Score;\n                var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 10);\n                ++var5;\n            }\n            if (this.ballCount \u003c 6 * this.overs - 1) {\n                var4 \u003d \"Over: \" + (this.ballCount / 6 | 0);\n                if (this.ballCount % 6 !\u003d\u003d 0) {\n                    var4 \u003d var4 + \".\" + this.ballCount % 6;\n                }\n                var4 \u003d var4 + \" (\" + this.overs + \")\";\n            }\n            else if (this.ballCount \u003d\u003d\u003d 6 * this.overs - 1) {\n                var4 \u003d \"Last ball\";\n            }\n            else {\n                var4 \u003d \"Over: \" + this.overs;\n            }\n            var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 20);\n            ++var5;\n            if (this.p1X !\u003d\u003d 200 || this.p2X !\u003d\u003d 800 || this.fP1Touched || this.fP2Touched) {\n            }\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.drawWorm \u003d function () {\n        var var1 \u003d this.buffer.getGraphics();\n        var var2 \u003d var1.getFontMetrics();\n        var var5 \u003d this.getMinScore(1);\n        var var7 \u003d this.getMinScore(2);\n        var var11 \u003d this.getMaxScore(1);\n        var var13 \u003d this.getMaxScore(2);\n        var var3 \u003d var5 \u003c var7 ? var5 : var7;\n        var var9 \u003d var11 \u003e var13 ? var11 : var13;\n        if (var3 !\u003d\u003d 0 || var9 !\u003d\u003d 0) {\n            var var15 \u003d (this.nWidth * 4 / 5 | 0) - 5;\n            var var16 \u003d (this.nWidth / 5 | 0);\n            var var17 \u003d ((5 + Math.floor(Math.floor(((this.nHeight / 5 | 0))) * var9 / (var9 - var3))) | 0);\n            var var18 \u003d (this.nHeight / 5 | 0);\n            if (this.fEndOfOver) {\n                var15 \u003d (this.nWidth / 10 | 0) - 5;\n                var16 \u003d (this.nWidth * 4 / 5 | 0);\n                var17 \u003d ((Math.floor(Math.floor(((this.nHeight * 2 / 5 | 0))) * var9 / (var9 - var3)) + Math.floor(((this.nHeight * 3 / 10 | 0)))) | 0);\n                var18 \u003d (this.nHeight * 2 / 5 | 0);\n            }\n            if (this.inns \u003d\u003d\u003d 2) {\n                var1.setColor(this.slimeColours[this.p1Col]);\n                var1.drawString(this.slimeColAbbr[this.p1Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p1Col]) - 5, var17 - ((Math.floor(Math.floor((var9 + var3) / 2) * Math.floor(var18) / (var9 - var3))) | 0));\n                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs) | 0), ((Math.floor(var17) - Math.floor(Math.floor(var18) * this.p1bxb[0] / (var9 - var3))) | 0));\n                for (var var19 \u003d 1; var19 \u003c 6 * this.overs; ++var19) {\n                    var1.drawLine(var15 + (var16 * var19 / (6 * this.overs) | 0), ((Math.floor(var17) - Math.floor(Math.floor(var18) * this.p1bxb[var19 - 1] / (var9 - var3))) | 0), var15 + (var16 * (var19 + 1) / (6 * this.overs) | 0), ((Math.floor(var17) - Math.floor(Math.floor(var18) * this.p1bxb[var19] / (var9 - var3))) | 0));\n                }\n                ;\n                var1.setColor(this.slimeColours[this.p2Col]);\n                var1.drawString(this.slimeColAbbr[this.p2Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p2Col]) - 5, var17 - ((Math.floor(Math.floor((var9 + var3) / 2) * Math.floor(var18) / (var9 - var3))) | 0) + var2.getAscent());\n                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs) | 0), ((Math.floor(var17) - Math.floor(Math.floor(var18) * this.p2bxb[0] / (var9 - var3))) | 0));\n                for (var var20 \u003d 1; var20 \u003c this.ballCount; ++var20) {\n                    var1.drawLine(var15 + (var16 * var20 / (6 * this.overs) | 0), ((Math.floor(var17) - Math.floor(Math.floor(var18) * this.p2bxb[var20 - 1] / (var9 - var3))) | 0), var15 + (var16 * (var20 + 1) / (6 * this.overs) | 0), ((Math.floor(var17) - Math.floor(Math.floor(var18) * this.p2bxb[var20] / (var9 - var3))) | 0));\n                }\n                ;\n                var1.setColor(ShimmedColor.white);\n                var1.drawString(/* valueOf */ new String(var9).toString(), var15 - 5 - var2.stringWidth(/* valueOf */ new String(var9).toString()), var17 - ((Math.floor(var9 * Math.floor(var18) / (var9 - var3))) | 0) + var2.getAscent());\n                var1.drawString(/* valueOf */ new String(var3).toString(), var15 - 5 - var2.stringWidth(/* valueOf */ new String(var3).toString()), var17 - ((Math.floor(var3 * Math.floor(var18) / (var9 - var3))) | 0));\n                var1.drawLine(var15, var17 - ((Math.floor(var9 * Math.floor(var18) / (var9 - var3))) | 0), var15, var17 - ((Math.floor(var3 * Math.floor(var18) / (var9 - var3))) | 0));\n                var1.drawLine(var15, var17, var15 + var16, var17);\n            }\n        }\n    };\n    SlimeCricket2.prototype.run \u003d function () {\n        var var1 \u003d this.getGraphics();\n        while ((this.gameThread !\u003d null)) {\n            if (this.__wait \u003e 0) {\n                --this.__wait;\n            }\n            this.p1OldX \u003d this.p1X;\n            this.p1OldY \u003d this.p1Y;\n            this.p2OldX \u003d this.p2X;\n            this.p2OldY \u003d this.p2Y;\n            this.p3OldY \u003d this.p3Y;\n            this.ballOldX \u003d this.ballX;\n            this.ballOldY \u003d this.ballY;\n            this.MoveSlimers();\n            this.DrawSlimers();\n            var1.drawImage(this.buffer, 0, 0, null);\n            if (this.ballCount \u003d\u003d\u003d this.overs * 6 \u0026\u0026 !this.fNoBall) {\n                this.fInPlay \u003d false;\n                if (this.inns \u003d\u003d\u003d 1) {\n                    this.promptMsg \u003d \"Click the mouse to continue...\";\n                }\n                else {\n                    this.DoFatality();\n                    this.promptMsg \u003d \"Click team names to select teams, then choose an innings length to start!\";\n                    this.fEndGame \u003d true;\n                    if (this.p1ai) {\n                        this.p1Col \u003d 9;\n                    }\n                    if (this.p2ai) {\n                        this.p2Col \u003d 9;\n                    }\n                    this.p1ai \u003d this.p2ai \u003d false;\n                }\n                this.gameThread \u003d null;\n            }\n            if (this.gameThread !\u003d null) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                }\n                catch (var2) {\n                }\n                ;\n            }\n        }\n        ;\n        if (!this.fEndOfOver) {\n            this.fInPlay \u003d false;\n        }\n        this.repaint();\n    };\n    /*private*/ SlimeCricket2.prototype.DoFatality \u003d function () {\n        this.getGraphics();\n        if (this.p1Score \u003e this.p2Score) {\n            this.p1J();\n            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" wins!\", 1);\n        }\n        else if (this.p2Score \u003e this.p1Score) {\n            this.p2J();\n            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" wins!\", 1);\n        }\n        else {\n            this.drawPrompt$java_lang_String$int(\"It\\\u0027s a tie!\", 1);\n        }\n        this.p1ai \u003d this.p2ai \u003d false;\n    };\n    SlimeCricket2.prototype.destroy \u003d function () {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    };\n    /*private*/ SlimeCricket2.prototype.bowl \u003d function () {\n        if (this.__wait \u003c\u003d 0) {\n            if (this.balltype \u003d\u003d\u003d -1) {\n                switch ((this.difficulty)) {\n                    case 0:\n                        this.balltype \u003d 0;\n                        break;\n                    case 1:\n                        this.balltype \u003d ((4.0 * Math.random()) | 0);\n                        break;\n                    case 2:\n                        this.balltype \u003d ((2.0 * Math.random()) | 0) + 2;\n                }\n            }\n            if (this.difficulty \u003d\u003d\u003d 2 \u0026\u0026 this.p2X - (this.p2Diam / 2 | 0) \u003c this.battingCrease - ((this.battingCrease - this.runningCrease) / 4 | 0)) {\n                this.balltype \u003d 1;\n            }\n            switch ((this.balltype)) {\n                case 0:\n                    if (this.p1X \u003e this.runningCrease - (this.p1Diam * 5 / 6 | 0)) {\n                        this.p1L();\n                        return;\n                    }\n                    if (this.ballY \u003c 200 \u0026\u0026 this.ballVY \u003c 0) {\n                        this.p1J();\n                        return;\n                    }\n                    this.p1S();\n                    return;\n                case 1:\n                    if (this.p1X \u003e this.runningCrease - (this.p1Diam * 3 / 4 | 0)) {\n                        this.p1L();\n                    }\n                    else {\n                        this.p1S();\n                    }\n                    if (this.ballY \u003c 320 \u0026\u0026 this.ballVY \u003c 0) {\n                        this.p1J();\n                        return;\n                    }\n                    break;\n                case 2:\n                    if (this.ballVY \u003e 0 \u0026\u0026 this.p1X \u003e this.runningCrease - (this.p1Diam * 5 / 6 | 0)) {\n                        this.p1L();\n                    }\n                    else {\n                        this.p1S();\n                    }\n                    if (this.ballY \u003e 270 \u0026\u0026 this.ballVY \u003e 0) {\n                        this.p1J();\n                        return;\n                    }\n                    break;\n                case 3:\n                    if (this.p1X \u003e this.runningCrease - (this.p1Diam * 2 / 3 | 0)) {\n                        this.p1L();\n                        return;\n                    }\n                    this.p1S();\n                    return;\n            }\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.field \u003d function () {\n        if (this.bounces \u003d\u003d\u003d 0) {\n            if (this.difficulty \u003e 1 \u0026\u0026 this.ballX \u003e this.p1X \u0026\u0026 this.ballVX \u003c 0 \u0026\u0026 this.ballY \u003e (this.p1Diam / 2 | 0) \u0026\u0026 Math.sqrt(((this.ballX - this.p1X) * (this.ballX - this.p1X) + (this.ballY - this.p1Y) * (this.ballY - this.p1Y))) \u003c 250.0) {\n                this.p1J();\n            }\n            if (this.difficulty \u003d\u003d\u003d 2 \u0026\u0026 this.ballX \u003e this.postPos \u0026\u0026 Math.sqrt(((this.ballX - this.p3X) * (this.ballX - this.p3X) + (this.ballY - this.p3Y) * (this.ballY - this.p3Y))) \u003c 250.0) {\n                this.p3J();\n            }\n        }\n        if (this.difficulty \u003c 2 \u0026\u0026 !this.fP2Touched \u0026\u0026 this.ballbowled) {\n            this.p1S();\n        }\n        else if (this.p1X + (this.p1Diam / 2 | 0) \u003e this.ballX) {\n            this.p1L();\n        }\n        else if (this.p1X + this.p1Diam + (this.ballRad * 3 / 2 | 0) \u003c this.postPos) {\n            this.p1R();\n        }\n        else if ((this.p2X + (this.p2Diam / 2 | 0) \u003c this.battingCrease \u0026\u0026 this.p2X - (this.p2Diam / 2 | 0) \u003e this.runningCrease || this.p2Y !\u003d\u003d 0) \u0026\u0026 this.fP1Touched) {\n            this.p1R();\n        }\n        else {\n            this.p1S();\n        }\n        if (this.ballX \u003e this.p1Diam \u0026\u0026 this.ballY \u003c (this.p1Diam / 2 | 0) \u0026\u0026 this.ballVX \u003c\u003d 0 \u0026\u0026 !this.fHitBackWall \u0026\u0026 this.p1X - this.ballX \u003c this.p1Diam \u0026\u0026 this.p1X \u003e this.ballX \u0026\u0026 this.bounces \u003e 0 \u0026\u0026 this.difficulty \u003d\u003d\u003d 2) {\n            this.p1J();\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.playball \u003d function () {\n        var var1 \u003d Math.sqrt(((this.ballX - this.p2X) * (this.ballX - this.p2X) + (this.ballY - this.p2Y) * (this.ballY - this.p2Y)));\n        var var3 \u003d false;\n        var var4 \u003d 0;\n        var var5 \u003d this.ballY;\n        for (var var6 \u003d this.ballVY; var5 \u003e 0; var5 +\u003d var6) {\n            ++var4;\n            --var6;\n        }\n        ;\n        var var8 \u003d this.ballX + this.ballVX * var4;\n        var var7 \u003d var8 \u003c this.postPos - this.p2Diam \u0026\u0026 var8 \u003e\u003d this.p2X - var4 * 8;\n        switch ((this.difficulty)) {\n            case 0:\n                if (var1 \u003c 400.0 \u0026\u0026 this.ballX - this.p2X \u003c (this.p2Diam * 3 / 2 | 0) \u0026\u0026 this.ballX \u003c this.p2X \u0026\u0026 this.ballY \u003c this.p2Y + (this.p2Diam * 3 / 2 | 0)) {\n                    this.p2L();\n                }\n                else {\n                    this.p2S();\n                }\n                if (var1 \u003c 350.0 \u0026\u0026 this.ballY \u003e this.p2Diam * 2 \u0026\u0026 this.ballX \u003e this.p2X - this.p2Diam) {\n                    this.p2J();\n                    return;\n                }\n                break;\n            case 1:\n            case 2:\n                if (this.ballbowled \u0026\u0026 this.shottype \u003d\u003d\u003d -1) {\n                    if (this.p2Score \u003e this.p1Score \u0026\u0026 this.inns \u003d\u003d\u003d 2 \u0026\u0026 var7) {\n                        this.shottype \u003d 1;\n                    }\n                    else if (var7 \u0026\u0026 Math.random() \u003c 0.5) {\n                        if (Math.random() \u003c 0.75) {\n                            this.shottype \u003d 4;\n                        }\n                        else {\n                            this.shottype \u003d 1;\n                        }\n                    }\n                    else if (var8 \u003c\u003d this.battingCrease \u0026\u0026 Math.random() \u003e\u003d 0.6) {\n                        this.shottype \u003d 2;\n                    }\n                    else {\n                        this.shottype \u003d 3;\n                    }\n                }\n                switch ((this.shottype)) {\n                    case 1:\n                        if (this.ballbowled \u0026\u0026 this.p2X - this.p2XV - (this.p2Diam / 2 | 0) \u003e var8) {\n                            this.p2L();\n                            return;\n                        }\n                        this.p2S();\n                        return;\n                    case 2:\n                        if (this.ballbowled \u0026\u0026 this.p2X - this.p2XV - this.p2Diam \u003e var8) {\n                            this.p2L();\n                            return;\n                        }\n                        this.p2S();\n                        if (this.ballX \u003e this.p2X - (this.p2Diam * 2 / 3 | 0)) {\n                            this.p2J();\n                            return;\n                        }\n                        break;\n                    case 3:\n                        if (this.ballbowled \u0026\u0026 this.p2X + this.p2XV + 50 \u003e var8) {\n                            this.p2L();\n                            return;\n                        }\n                        this.p2S();\n                        if (this.ballX \u003e this.p2X - (this.p2Diam / 2 | 0)) {\n                            this.p2J();\n                            return;\n                        }\n                        break;\n                    case 4:\n                        if (!this.ballbowled || this.p2X - this.p2XV - (this.p2Diam / 2 | 0) \u003c\u003d var8 \u0026\u0026 this.ballX + 3 * this.ballVX \u003c\u003d this.p2X - (this.p2Diam / 2 | 0)) {\n                            this.p2S();\n                            return;\n                        }\n                        this.p2L();\n                        return;\n                }\n        }\n    };\n    /*private*/ SlimeCricket2.prototype.running \u003d function () {\n        var var1 \u003d false;\n        if (this.ballX \u003e this.postPos || this.ballX \u003e this.p1X \u0026\u0026 (this.p1X - this.ballX \u003c 400 || this.p1X - this.ballX \u003c 300 \u0026\u0026 this.ballVX \u003e 0)) {\n            var1 \u003d true;\n        }\n        if (this.ballX \u003c this.runningCrease || this.p1X \u003c this.runningCrease \u0026\u0026 this.ballVX \u003c 0 \u0026\u0026 this.ballX \u003c this.battingCrease) {\n            var1 \u003d false;\n        }\n        if (this.ballX \u003c this.postPos \u0026\u0026 this.p1X \u003c this.p2X \u0026\u0026 this.ballX \u003e this.p2X \u0026\u0026 this.p2X - (this.p2Diam / 2 | 0) \u003c\u003d this.runningCrease) {\n            var1 \u003d false;\n        }\n        if (this.ballX \u003c this.postPos \u0026\u0026 this.ballX - this.p2X \u003e this.battingCrease - this.runningCrease) {\n            var1 \u003d false;\n        }\n        if (var1 \u0026\u0026 (this.p2X + (this.p2Diam / 2 | 0) \u003e\u003d this.battingCrease || this.p2X - (this.p2Diam / 2 | 0) \u003c\u003d this.runningCrease)) {\n            this.p2S();\n        }\n        else if (var1) {\n            if (this.p2X \u003c\u003d this.runningCrease + ((this.battingCrease - this.runningCrease) / 2 | 0) \u0026\u0026 this.difficulty \u003e\u003d 2) {\n                this.p2L();\n            }\n            else {\n                this.p2R();\n            }\n        }\n        else if (!var1 \u0026\u0026 this.p2X - (this.p2Diam / 2 | 0) \u003c\u003d this.runningCrease \u0026\u0026 this.p2X \u003d\u003d\u003d this.p2XMax) {\n            this.p2R();\n        }\n        else {\n            if (!var1 \u0026\u0026 this.p2X + (this.p2Diam / 2 | 0) \u003e\u003d this.battingCrease \u0026\u0026 this.p2X \u003e\u003d this.p2XMin) {\n                this.p2L();\n            }\n        }\n    };\n    return SlimeCricket2;\n}(ShimmedApplet));\nSlimeCricket2[\"__class\"] \u003d \"SlimeCricket2\";\nSlimeCricket2[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\nvar ShimmedBufferedImage \u003d (function (_super) {\n    __extends(ShimmedBufferedImage, _super);\n    function ShimmedBufferedImage(x, y, z) {\n        return _super.call(this) || this;\n    }\n    ShimmedBufferedImage.prototype.getSubimage \u003d function (a, b, c, d) {\n        return null;\n    };\n    return ShimmedBufferedImage;\n}(ShimmedImage));\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\nvar ShimmedFrame \u003d (function (_super) {\n    __extends(ShimmedFrame, _super);\n    function ShimmedFrame() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    ShimmedFrame.prototype.setTitle \u003d function (s) {\n    };\n    ShimmedFrame.prototype.pack \u003d function () {\n    };\n    ShimmedFrame.prototype.show \u003d function () {\n    };\n    ShimmedFrame.prototype.dispose \u003d function () {\n    };\n    ShimmedFrame.prototype.setLayout \u003d function (g) {\n    };\n    return ShimmedFrame;\n}(ShimmedElement));\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\nvar ShimmedTextField \u003d (function (_super) {\n    __extends(ShimmedTextField, _super);\n    function ShimmedTextField(s) {\n        return _super.call(this) || this;\n    }\n    ShimmedTextField.prototype.getText \u003d function () {\n        return null;\n    };\n    return ShimmedTextField;\n}(ShimmedElement));\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\nvar ShimmedButton \u003d (function (_super) {\n    __extends(ShimmedButton, _super);\n    function ShimmedButton(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedButton;\n}(ShimmedElement));\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\nvar ShimmedPanel \u003d (function (_super) {\n    __extends(ShimmedPanel, _super);\n    function ShimmedPanel() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    return ShimmedPanel;\n}(ShimmedElement));\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\nvar ShimmedLabel \u003d (function (_super) {\n    __extends(ShimmedLabel, _super);\n    function ShimmedLabel(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedLabel;\n}(ShimmedElement));\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n",
  "tsout": "/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nclass ShimmedSize {\n    public width : number;\n\n    public height : number;\n\n    constructor() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n}\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\n\n\nclass ShimmedApplet {\n    public size() : ShimmedSize {\n        return null;\n    }\n\n    public createImage(x : number, y : number) : ShimmedImage {\n        return null;\n    }\n\n    public showStatus(s : string) {\n    }\n\n    public repaint() {\n    }\n\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public requestFocus() {\n    }\n\n    public getWidth() : number {\n        return 0;\n    }\n\n    public getHeight() : number {\n        return 0;\n    }\n\n    public getDocumentBase() : ShimmedDocumentBase {\n        return null;\n    }\n\n    public getAppletContext() : ShimmedAppletContext {\n        return null;\n    }\n\n    public getCodeBase() : ShimmedURL {\n        return null;\n    }\n\n    public getAudioClip(u : ShimmedURL, s : string) : ShimmedAudioClip {\n        return null;\n    }\n\n    public getImage(u : ShimmedURL, s : string) : ShimmedImage {\n        return null;\n    }\n}\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\n\n\nclass ShimmedColor {\n    public static yellow : ShimmedColor \u003d null;\n\n    public static black : ShimmedColor \u003d null;\n\n    public static red : ShimmedColor \u003d null;\n\n    public static gray : ShimmedColor \u003d null;\n\n    public static white : ShimmedColor \u003d null;\n\n    public static blue : ShimmedColor \u003d null;\n\n    public static green : ShimmedColor \u003d null;\n\n    public static pink : ShimmedColor \u003d null;\n\n    public static cyan : ShimmedColor \u003d null;\n\n    public static lightGray : ShimmedColor \u003d null;\n\n    public static darkGray : ShimmedColor \u003d null;\n\n    public static orange : ShimmedColor \u003d null;\n\n    public constructor(r : number, g : number, b : number) {\n    }\n}\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\n\n\nclass ShimmedGraphics {\n    public getFont() : ShimmedFont {\n        return null;\n    }\n\n    public setFont(f : ShimmedFont) {\n    }\n\n    public setColor(c : ShimmedColor) {\n    }\n\n    public fillRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public getFontMetrics() : ShimmedFontMetrics {\n        return null;\n    }\n\n    public drawString(s : string, x : number, y : number) {\n    }\n\n    public drawImage(i : ShimmedImage, x : number, y : number, o : any) {\n    }\n\n    public drawOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n\n    public drawLine(x : number, y : number, w : number, h : number) {\n    }\n\n    public drawRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillPolygon$int_A$int_A$int(xs : number[], ys : number[], n : number) {\n    }\n\n    public fillPolygon(xs? : any, ys? : any, n? : any) : any {\n        if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eArray \u0026\u0026 (xs.length\u003d\u003d0 || xs[0] \u003d\u003d null ||(typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof \u003cany\u003eArray \u0026\u0026 (ys.length\u003d\u003d0 || ys[0] \u003d\u003d null ||(typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.fillPolygon$int_A$int_A$int(xs, ys, n);\n        } else if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.fillPolygon$ShimmedPolygon(xs);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public fillPolygon$ShimmedPolygon(p : ShimmedPolygon) {\n    }\n\n    public drawArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n}\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\n\n\nclass ShimmedImage {\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public getHeight(a : ShimmedApplet) : number {\n        return 0;\n    }\n}\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\n\n\nclass ShimmedEvent {\n    public id : number;\n\n    public x : number;\n\n    public y : number;\n\n    public key : number;\n\n    public target : ShimmedButton;\n\n    public static KEY_ACTION : number \u003d 0;\n\n    public static LEFT : number \u003d 1;\n\n    public static RIGHT : number \u003d 2;\n\n    public static UP : number \u003d 3;\n\n    public static DOWN : number \u003d 4;\n\n    public static KEY_ACTION_RELEASE : number \u003d 5;\n\n    constructor() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n}\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\n\n\nclass ShimmedFont {\n    public getName() : string {\n        return null;\n    }\n\n    public constructor(name : string, w : number, h : number) {\n    }\n}\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\n\n\nclass ShimmedFontMetrics {\n    public getHeight() : number {\n        return 0;\n    }\n\n    public stringWidth(s : string) : number {\n        return 0;\n    }\n\n    public getAscent() : number {\n        return 0;\n    }\n}\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\n\n\nclass ShimmedThread {\n    public static sleep$long(ms : number) {\n    }\n\n    public static sleep$long$boolean(ms : number, b : boolean) {\n    }\n\n    public static sleep(ms? : any, b? : any) : any {\n        if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return \u003cany\u003eShimmedThread.sleep$long$boolean(ms, b);\n        } else if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return \u003cany\u003eShimmedThread.sleep$long(ms);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public constructor(r : ShimmedRunnable) {\n    }\n\n    public start() {\n    }\n\n    public stop() {\n    }\n}\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\n\n\ninterface ShimmedRunnable {}\n\nclass ShimmedAppletContext {\n    public showDocument$ShimmedURL(u : ShimmedURL) {\n    }\n\n    public showDocument$ShimmedURL$java_lang_String(u : ShimmedURL, s : string) {\n    }\n\n    public showDocument(u? : any, s? : any) : any {\n        if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL$java_lang_String(u, s);\n        } else if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL(u);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\n\n\nclass ShimmedDocumentBase {\n    public getHost() : string {\n        return null;\n    }\n}\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\n\n\nclass ShimmedURL {\n    public constructor(s : string) {\n    }\n\n    public openStream() : ShimmedInputStream {\n        return null;\n    }\n}\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\n\n\nclass ShimmedPrintStream {\n    public print(s : any) : any {\n        return null;\n    }\n\n    public println$() : any {\n        return null;\n    }\n\n    public println$java_lang_Object(s : any) : any {\n        return null;\n    }\n\n    public println(s? : any) : any {\n        if(((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.println$java_lang_Object(s);\n        } else if(s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.println$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\n\n\nclass ShimmedSystem {\n    public static out : ShimmedPrintStream \u003d null;\n\n    public static currentTimeMillis() : number {\n        return 0;\n    }\n}\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\n\n\nclass ShimmedVector {\n    public constructor(n : number) {\n    }\n\n    public removeAllElements() {\n    }\n\n    public get(i : number) : any {\n        return null;\n    }\n\n    public size() : number {\n        return 0;\n    }\n\n    public add(x : number[]) {\n    }\n}\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\n\n\nclass ShimmedElement {\n    public add(e : ShimmedElement) {\n    }\n}\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\n\n\nclass ShimmedPolygon {\n    public constructor(xs : number[], ys : number[], n : number) {\n    }\n}\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\n\n\nclass ShimmedInputStream {\n    public close() {\n    }\n}\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\n\n\nclass ShimmedBufferedReader {\n    public constructor(i : ShimmedInputStreamReader) {\n    }\n\n    public readLine() : string {\n        return null;\n    }\n\n    public close() {\n    }\n}\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\n\n\nclass ShimmedInputStreamReader {\n    public constructor(is : ShimmedInputStream) {\n    }\n}\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\n\n\nclass ShimmedGridLayout {\n    public constructor(x : number, y : number) {\n    }\n}\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\n\n\nclass ShimmedLong {\n    public static parseLong(s : string) : number {\n        return 0;\n    }\n}\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\n\n\nclass ShimmedChars {\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    public static charCodeArray(s : string) : string[] {\n        return null;\n    }\n}\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\n\n\nclass ShimmedImageObserver {}\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\n\n\nclass ShimmedRandom {\n    public nextInt(m : number) : number {\n        return 0;\n    }\n}\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\n\n\nclass ShimmedAudioClip {\n    public play() {\n    }\n}\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\n\n\nclass ShimmedStringBuffer {\n    public constructor(i? : any) {\n        if(((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else if(i \u003d\u003d\u003d undefined) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public append(s : any) : ShimmedStringBuffer {\n        return null;\n    }\n}\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\n\n\nclass EndOfShimDeclarations {}\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\n\n\nclass SlimeCricket2 extends ShimmedApplet implements ShimmedRunnable {\n    /*private*/ p1Diam : number \u003d 75;\n\n    /*private*/ p2Diam : number \u003d 75;\n\n    /*private*/ ballRad : number \u003d 13;\n\n    /*private*/ nWidth : number;\n\n    /*private*/ nHeight : number;\n\n    /*private*/ p1X : number;\n\n    /*private*/ p1Y : number;\n\n    /*private*/ p2X : number;\n\n    /*private*/ p2Y : number;\n\n    /*private*/ p3X : number;\n\n    /*private*/ p3Y : number;\n\n    /*private*/ p1Col : number;\n\n    /*private*/ p2Col : number;\n\n    /*private*/ slimeColours : ShimmedColor[];\n\n    /*private*/ slimeColours2 : ShimmedColor[];\n\n    /*private*/ slimeColText : string[];\n\n    /*private*/ slimeColAbbr : string[];\n\n    /*private*/ difficultyColours : ShimmedColor[];\n\n    /*private*/ difficultyText : string[];\n\n    /*private*/ difficulty : number;\n\n    /*private*/ p1OldX : number;\n\n    /*private*/ p1OldY : number;\n\n    /*private*/ p2OldX : number;\n\n    /*private*/ p2OldY : number;\n\n    /*private*/ p3OldY : number;\n\n    /*private*/ p1XV : number;\n\n    /*private*/ p1YV : number;\n\n    /*private*/ p2XV : number;\n\n    /*private*/ p2YV : number;\n\n    /*private*/ p3YV : number;\n\n    /*private*/ ballX : number;\n\n    /*private*/ ballY : number;\n\n    /*private*/ ballVX : number;\n\n    /*private*/ ballVY : number;\n\n    /*private*/ ballOldX : number;\n\n    /*private*/ ballOldY : number;\n\n    /*private*/ screen : ShimmedGraphics;\n\n    /*private*/ promptMsg : string;\n\n    /*private*/ mousePressed : boolean;\n\n    /*private*/ fCanChangeCol : boolean;\n\n    /*private*/ fInPlay : boolean;\n\n    /*private*/ p1Blink : number;\n\n    /*private*/ p2Blink : number;\n\n    /*private*/ fP1Touched : boolean;\n\n    /*private*/ fP2Touched : boolean;\n\n    /*private*/ gameThread : ShimmedThread;\n\n    /*private*/ fEndGame : boolean;\n\n    /*private*/ BALL_COL : ShimmedColor;\n\n    /*private*/ COURT_COL : ShimmedColor;\n\n    /*private*/ DAY_COL : ShimmedColor;\n\n    /*private*/ NIGHT_COL : ShimmedColor;\n\n    /*private*/ SKY_COL : ShimmedColor;\n\n    /*private*/ bounces : number;\n\n    /*private*/ fEndOfOver : boolean;\n\n    /*private*/ fHitBackWall : boolean;\n\n    /*private*/ p1XMin : number;\n\n    /*private*/ p2XMin : number;\n\n    /*private*/ p2XMax : number;\n\n    /*private*/ ballXMax : number;\n\n    /*private*/ p1Touches : number;\n\n    /*private*/ ballCount : number;\n\n    /*private*/ postPos : number;\n\n    /*private*/ bowlingCrease : number;\n\n    /*private*/ runningCrease : number;\n\n    /*private*/ battingCrease : number;\n\n    /*private*/ p1Score : number;\n\n    /*private*/ p2Score : number;\n\n    /*private*/ inns : number;\n\n    /*private*/ wicketPenalty : number;\n\n    /*private*/ fNoBall : boolean;\n\n    /*private*/ overs : number;\n\n    /*private*/ stillFrames : number;\n\n    /*private*/ buffer : ShimmedImage;\n\n    /*private*/ thisBall : number;\n\n    /*private*/ thisOver : string;\n\n    /*private*/ p1bxb : number[];\n\n    /*private*/ p2bxb : number[];\n\n    /*private*/ p1Hold : boolean;\n\n    /*private*/ ballbowled : boolean;\n\n    /*private*/ p1next : boolean;\n\n    /*private*/ p2next : boolean;\n\n    /*private*/ __wait : number;\n\n    /*private*/ p1ai : boolean;\n\n    /*private*/ p2ai : boolean;\n\n    /*private*/ balltype : number;\n\n    /*private*/ shottype : number;\n\n    /*private*/ AI_COL : number;\n\n    /*private*/ COMM_FOUR : string[];\n\n    /*private*/ COMM_FOURTOUCHED : string[];\n\n    /*private*/ COMM_SIX : string[];\n\n    /*private*/ COMM_SIXTOUCHED : string[];\n\n    /*private*/ COMM_STUMPED : string[];\n\n    /*private*/ COMM_RUNOUT : string[];\n\n    /*private*/ COMM_BOWLED : string[];\n\n    /*private*/ COMM_PLAYEDON : string[];\n\n    /*private*/ COMM_CAUGHT : string[];\n\n    /*private*/ COMM_CTBEHIND : string[];\n\n    /*private*/ COMM_OUT_GENERIC : string[];\n\n    public init() {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.buffer \u003d this.createImage(this.nWidth, this.nHeight);\n        this.fInPlay \u003d false;\n        this.fEndGame \u003d true;\n        this.fEndOfOver \u003d false;\n        this.fCanChangeCol \u003d true;\n        this.promptMsg \u003d \"Click team names to select teams, an opponent, then choose an innings length to start!\";\n        this.screen \u003d this.buffer.getGraphics();\n        this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n        this.p1Col \u003d 9;\n        this.p2Col \u003d 9;\n        this.inns \u003d 0;\n    }\n\n    public paint(var1 : ShimmedGraphics) {\n        let var2 : ShimmedGraphics \u003d this.buffer.getGraphics();\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        var2.setColor(this.SKY_COL);\n        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5|0));\n        var2.setColor(this.COURT_COL);\n        var2.fillRect(0, (4 * this.nHeight / 5|0), this.nWidth, (this.nHeight / 5|0));\n        var2.setColor(ShimmedColor.white);\n        var2.fillRect((this.nWidth * this.postPos / 1000|0) - 2, (this.nHeight * 7 / 10|0), 3, (this.nHeight / 10|0));\n        var2.fillRect((this.nWidth * this.bowlingCrease / 1000|0) - 1, (this.nHeight * 4 / 5|0), 2, 5);\n        var2.fillRect((this.nWidth * this.runningCrease / 1000|0) - 1, (this.nHeight * 4 / 5|0), 2, 5);\n        var2.fillRect((this.nWidth * this.battingCrease / 1000|0) - 1, (this.nHeight * 4 / 5|0), 2, 5);\n        this.drawPrompt();\n        let var3 : ShimmedFontMetrics;\n        if(!this.fInPlay \u0026\u0026 this.fEndGame) {\n            var3 \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(\"Slime Cricket 2: World Cup Edition BETA\", (this.nWidth / 2|0) - (var3.stringWidth(\"Slime Cricket 2: World Cup Edition BETA\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 7);\n            this.screen.drawString(\"This is not the final version of the game!\", (this.nWidth / 2|0) - (var3.stringWidth(\"This is not the final version of the game!\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 6);\n            this.screen.setColor(this.slimeColours[this.p2Col]);\n            this.screen.fillRect((this.nWidth / 4|0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2|0) - 10, (this.nHeight / 2|0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p2Col]) + 20, var3.getAscent() * 2);\n            this.screen.setColor(this.slimeColours2[this.p2Col]);\n            this.screen.drawString(this.slimeColText[this.p2Col], (this.nWidth / 4|0) - (var3.stringWidth(this.slimeColText[this.p2Col]) / 2|0), (this.nHeight / 2|0) - (var3.getAscent() / 2|0));\n            this.screen.setColor(this.slimeColours[this.p1Col]);\n            this.screen.fillRect((this.nWidth / 2|0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2|0) - 10, (this.nHeight / 2|0) - var3.getAscent() * 2, var3.stringWidth(this.slimeColText[this.p1Col]) + 20, var3.getAscent() * 2);\n            this.screen.setColor(this.slimeColours2[this.p1Col]);\n            this.screen.drawString(this.slimeColText[this.p1Col], (this.nWidth / 2|0) - (var3.stringWidth(this.slimeColText[this.p1Col]) / 2|0), (this.nHeight / 2|0) - (var3.getAscent() / 2|0));\n            this.screen.setColor(this.difficultyColours[this.difficulty]);\n            this.screen.fillRect((this.nWidth * 3 / 4|0) - (var3.stringWidth(this.difficultyText[this.difficulty]) / 2|0) - 10, (this.nHeight / 2|0) - var3.getAscent() * 2, var3.stringWidth(this.difficultyText[this.difficulty]) + 20, var3.getAscent() * 2);\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(this.difficultyText[this.difficulty], (this.nWidth * 3 / 4|0) - (var3.stringWidth(this.difficultyText[this.difficulty]) / 2|0), (this.nHeight / 2|0) - (var3.getAscent() / 2|0));\n            var2.setColor(ShimmedColor.white);\n            this.screen.setColor(this.SKY_COL);\n            for(let var4 : number \u003d 0; var4 \u003c 5; ++var4) {\n                var2.fillRect((this.nWidth / 4|0) + (var4 * this.nWidth / 10|0) + 5, (this.nHeight * 2 / 3|0) - (var3.getAscent() * 3 / 2|0), (this.nWidth / 10|0) - 10, 2 * var3.getAscent());\n                this.screen.drawString(var4 + 1 + \" overs\", (this.nWidth * 3 / 10|0) + (var4 * this.nWidth / 10|0) - (var3.stringWidth(var4 + 1 + \" overs\") / 2|0), (this.nHeight * 2 / 3|0) - var3.getAscent() * 0);\n            };\n            var3 \u003d var2.getFontMetrics();\n            var2.setColor(ShimmedColor.white);\n            var2.drawString(\"Written by Wedgey and Fractoid\", (this.nWidth / 2|0) - (var3.stringWidth(\"Written by Wedgey and Fractoid\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 6);\n            var2.drawString(\"with input from Browny, Chucky and Damo\", (this.nWidth / 2|0) - (var3.stringWidth(\"with input from Browny, Chucky and Damo\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 5);\n            this.drawScores();\n            var2.drawString(\"Bowling first\", (this.nWidth / 4|0) - (var3.stringWidth(\"Bowling first\") / 2|0), (this.nHeight / 2|0) - var3.getAscent() * 3);\n            var2.drawString(\"Batting first\", (this.nWidth / 2|0) - (var3.stringWidth(\"Batting first\") / 2|0), (this.nHeight / 2|0) - var3.getAscent() * 3);\n            var2.drawString(\"Difficulty\", (this.nWidth * 3 / 4|0) - (var3.stringWidth(\"Difficulty\") / 2|0), (this.nHeight / 2|0) - var3.getAscent() * 3);\n            var2.drawString(\"Click on innings length to start...\", (this.nWidth / 2|0) - (var3.stringWidth(\"Click on innings length to start...\") / 2|0), (this.nHeight * 2 / 3|0) - var3.getHeight() * 2);\n            this.screen.setColor(this.SKY_COL);\n        } else if(!this.fInPlay \u0026\u0026 !this.fEndGame \u0026\u0026 !this.fEndOfOver) {\n            var3 \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(\"Change of innings\", (this.nWidth / 2|0) - (var3.stringWidth(\"Change of innings\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 5);\n            this.drawScores();\n        } else if(this.fEndOfOver) {\n            var3 \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            switch((this.inns)) {\n            case 1:\n                this.drawScores();\n                this.screen.drawString(\"Over\", (this.nWidth / 2|0) - (var3.stringWidth(\"Over\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 3);\n                this.screen.drawString(\"Last over: \" + this.thisOver, (this.nWidth / 2|0) - (var3.stringWidth(\"Last over: \" + this.thisOver) / 2|0), (this.nHeight / 2|0) - var3.getHeight());\n                break;\n            case 2:\n                this.drawScores();\n                this.screen.drawString(\"Over\", (this.nWidth / 2|0) - (var3.stringWidth(\"Over\") / 2|0), var3.getHeight());\n                this.screen.drawString(\"Last over: \" + this.thisOver, (this.nWidth / 2|0) - (var3.stringWidth(\"Last over: \" + this.thisOver) / 2|0), var3.getHeight() * 2);\n                this.drawWorm();\n                this.screen.drawString(\"After \" + (this.ballCount / 6|0) + ((this.ballCount / 6|0) \u003d\u003d\u003d 1?\" over...\":\" overs...\"), (this.nWidth / 2|0) - (var3.stringWidth(\"After \" + (this.ballCount / 6|0) + ((this.ballCount / 6|0) \u003d\u003d\u003d 1?\" over...\":\" overs...\")) / 2|0), var3.getHeight() * 4);\n                this.screen.drawString(this.slimeColText[this.p2Col].toUpperCase(), (this.nWidth / 3|0), var3.getHeight() * 5);\n                this.screen.drawString(/* valueOf */new String(this.p2Score).toString(), (this.nWidth * 2 / 3|0) - var3.stringWidth(/* valueOf */new String(this.p2Score).toString()), var3.getHeight() * 5);\n                this.screen.drawString(this.slimeColText[this.p1Col] + \" (\" + this.p1Score + \")\", (this.nWidth / 3|0), var3.getHeight() * 6);\n                this.screen.drawString(/* valueOf */new String(this.p1bxb[this.ballCount - 1]).toString(), (this.nWidth * 2 / 3|0) - var3.stringWidth(/* valueOf */new String(this.p1bxb[this.ballCount - 1]).toString()), var3.getHeight() * 6);\n            }\n        } else {\n            this.drawScores();\n            this.drawWorm();\n        }\n        var1.drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n    }\n\n    public handleEvent(var1 : ShimmedEvent) : boolean {\n        switch((var1.id)) {\n        case 401:\n        case 403:\n            if(!this.fEndGame) {\n                switch((var1.key)) {\n                case 32:\n                    this.mousePressed \u003d true;\n                    break;\n                case 65:\n                case 97:\n                    if(!this.p1ai) {\n                        this.p1L();\n                    }\n                    break;\n                case 68:\n                case 100:\n                    if(!this.p1ai) {\n                        this.p1R();\n                    }\n                    break;\n                case 69:\n                case 81:\n                case 101:\n                case 113:\n                    if(!this.p1ai) {\n                        this.p3J();\n                    }\n                    break;\n                case 73:\n                case 105:\n                case 1004:\n                    if(!this.p2ai) {\n                        this.p2J();\n                    }\n                    break;\n                case 74:\n                case 106:\n                case 1006:\n                    if(!this.p2ai) {\n                        this.p2L();\n                    }\n                    break;\n                case 75:\n                case 107:\n                case 1005:\n                    this.p2next \u003d true;\n                    if(!this.fEndOfOver \u0026\u0026 this.p1next \u0026\u0026 this.p2next) {\n                        this.nextBall();\n                    }\n                    break;\n                case 76:\n                case 108:\n                case 1007:\n                    if(!this.p2ai) {\n                        this.p2R();\n                    }\n                    break;\n                case 83:\n                case 115:\n                    this.p1next \u003d true;\n                    if(!this.fEndOfOver \u0026\u0026 this.p1next \u0026\u0026 this.p2next) {\n                        this.nextBall();\n                    }\n                    break;\n                case 87:\n                case 119:\n                    if(!this.p1ai) {\n                        this.p1J();\n                    }\n                }\n            }\n            break;\n        case 402:\n        case 404:\n            switch((var1.key)) {\n            case 65:\n            case 97:\n                if(this.p1XV \u003c 0 \u0026\u0026 !this.p1ai) {\n                    this.p1S();\n                }\n                return false;\n            case 68:\n            case 100:\n                if(this.p1XV \u003e 0 \u0026\u0026 !this.p1ai) {\n                    this.p1S();\n                }\n                return false;\n            case 74:\n            case 106:\n            case 1006:\n                if(this.p2XV \u003c 0 \u0026\u0026 !this.p2ai) {\n                    this.p2S();\n                }\n                return false;\n            case 76:\n            case 108:\n            case 1007:\n                if(this.p2XV \u003e 0 \u0026\u0026 !this.p2ai) {\n                    this.p2S();\n                }\n                return false;\n            case 83:\n            case 115:\n                this.p1Hold \u003d false;\n                return false;\n            default:\n                return false;\n            }\n        case 501:\n            this.mousePressed \u003d true;\n            if(this.fEndOfOver) {\n                this.gameThread \u003d new ShimmedThread(this);\n                this.gameThread.start();\n                this.thisOver \u003d \"\";\n                this.fEndOfOver \u003d false;\n                this.promptMsg \u003d \"\";\n                this.repaint();\n            } else if(!this.fInPlay) {\n                if(!this.fEndGame) {\n                    this.fInPlay \u003d true;\n                    ++this.inns;\n                    let var7 : number \u003d this.p1Col;\n                    this.p1Col \u003d this.p2Col;\n                    this.p2Col \u003d var7;\n                    let var8 : number \u003d this.p1Score;\n                    this.p1Score \u003d this.p2Score;\n                    this.p2Score \u003d var8;\n                    let var9 : number[] \u003d this.p1bxb;\n                    this.p1bxb \u003d this.p2bxb;\n                    this.p2bxb \u003d var9;\n                    if(Math.random() \u003c 0.8) {\n                        this.SKY_COL \u003d this.NIGHT_COL;\n                    }\n                    let var6 : boolean \u003d this.p1ai;\n                    this.p1ai \u003d this.p2ai;\n                    this.p2ai \u003d var6;\n                } else {\n                    let var2 : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n                    if(var1.y \u003e (this.nHeight * 2 / 3|0) - (var2.getAscent() * 3 / 2|0) \u0026\u0026 var1.y \u003c (this.nHeight * 2 / 3|0) + (var2.getAscent() / 2|0)) {\n                        for(let var3 : number \u003d 0; var3 \u003c 5 \u0026\u0026 !this.fInPlay; ++var3) {\n                            if(var1.x \u003e (this.nWidth / 4|0) + (var3 * this.nWidth / 10|0) + 5 \u0026\u0026 var1.x \u003c (this.nWidth / 4|0) + ((var3 + 1) * this.nWidth / 10|0) - 5) {\n                                this.fEndGame \u003d false;\n                                this.fInPlay \u003d true;\n                                this.p1ai \u003d this.p2ai \u003d false;\n                                if(this.p1Col \u003d\u003d\u003d 9) {\n                                    this.p2ai \u003d true;\n                                    while(((this.p1Col \u003d (\u003cnumber\u003e(Math.random() * \u003cnumber\u003ethis.slimeColours.length)|0)) \u003d\u003d\u003d this.p2Col)) {\n                                    };\n                                }\n                                if(this.p2Col \u003d\u003d\u003d 9) {\n                                    this.p1ai \u003d true;\n                                    while(((this.p2Col \u003d (\u003cnumber\u003e(Math.random() * \u003cnumber\u003ethis.slimeColours.length)|0)) \u003d\u003d\u003d this.p1Col)) {\n                                    };\n                                }\n                                this.inns \u003d 1;\n                                this.p1Score \u003d this.p2Score \u003d 0;\n                                let var4 : number \u003d this.p1Col;\n                                this.p1Col \u003d this.p2Col;\n                                this.p2Col \u003d var4;\n                                this.SKY_COL \u003d this.DAY_COL;\n                                this.overs \u003d var3 + 1;\n                                this.p1bxb \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.overs * 6);\n                                this.p2bxb \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.overs * 6);\n                                for(let var5 : number \u003d 0; var5 \u003c this.overs * 6; ++var5) {\n                                    this.p1bxb[var5] \u003d this.p2bxb[var5] \u003d 0;\n                                };\n                            }\n                        };\n                    } else if(var1.y \u003e (this.nHeight / 2|0) - var2.getAscent() * 2 \u0026\u0026 var1.y \u003c (this.nHeight / 2|0)) {\n                        if(var1.x \u003e (this.nWidth / 4|0) - (var2.stringWidth(this.slimeColText[this.p2Col]) / 2|0) - 10 \u0026\u0026 var1.x \u003c (this.nWidth / 4|0) + (var2.stringWidth(this.slimeColText[this.p2Col]) / 2|0) + 10) {\n                            while((true)) {\n                                this.p2Col \u003d this.p2Col !\u003d\u003d this.slimeColours.length - 1?this.p2Col + 1:0;\n                                if(this.p1Col !\u003d\u003d this.p2Col) {\n                                    this.repaint();\n                                    break;\n                                }\n                            };\n                        } else if(var1.x \u003e (this.nWidth / 2|0) - (var2.stringWidth(this.slimeColText[this.p1Col]) / 2|0) - 10 \u0026\u0026 var1.x \u003c (this.nWidth / 2|0) + (var2.stringWidth(this.slimeColText[this.p1Col]) / 2|0) + 10) {\n                            while((true)) {\n                                this.p1Col \u003d this.p1Col !\u003d\u003d this.slimeColours.length - 1?this.p1Col + 1:0;\n                                if(this.p1Col !\u003d\u003d this.p2Col) {\n                                    this.repaint();\n                                    break;\n                                }\n                            };\n                        } else if(var1.x \u003e (this.nWidth * 3 / 4|0) - (var2.stringWidth(this.difficultyText[this.difficulty]) / 2|0) - 10 \u0026\u0026 var1.x \u003c (this.nWidth * 3 / 4|0) + (var2.stringWidth(this.difficultyText[this.difficulty]) / 2|0) + 10) {\n                            this.difficulty \u003d (this.difficulty + 1) % this.difficultyText.length;\n                            this.repaint();\n                        }\n                    }\n                }\n                if(this.fInPlay) {\n                    this.ballCount \u003d -1;\n                    this.thisOver \u003d \"\";\n                    this.promptMsg \u003d \"\";\n                    this.thisBall \u003d 0;\n                    this.nextBall();\n                    this.gameThread \u003d new ShimmedThread(this);\n                    this.gameThread.start();\n                }\n            }\n            break;\n        case 503:\n            this.showStatus(\"Slime Cricket 2: by Wedgey: http://www.student.uwa.edu.au/~wedgey/slimec/\");\n        }\n        return false;\n    }\n\n    /*private*/ p1L() {\n        this.p1XV \u003d -8;\n    }\n\n    /*private*/ p1R() {\n        this.p1XV \u003d 8;\n    }\n\n    /*private*/ p1J() {\n        if(this.p1Y \u003d\u003d\u003d 0) {\n            this.p1YV \u003d 31;\n        }\n    }\n\n    /*private*/ p1S() {\n        this.p1XV \u003d 0;\n    }\n\n    /*private*/ p2L() {\n        this.p2XV \u003d -8;\n    }\n\n    /*private*/ p2R() {\n        this.p2XV \u003d 8;\n    }\n\n    /*private*/ p2J() {\n        if(this.p2Y \u003d\u003d\u003d 0) {\n            this.p2YV \u003d 31;\n        }\n    }\n\n    /*private*/ p2S() {\n        this.p2XV \u003d 0;\n    }\n\n    /*private*/ p3J() {\n        if(this.p3Y \u003d\u003d\u003d 0) {\n            this.p3YV \u003d 31;\n        }\n    }\n\n    /*private*/ nextBall() {\n        this.__wait \u003d 50;\n        this.p1XMin \u003d this.p1X \u003d this.runningCrease - (this.p1Diam / 2|0);\n        this.p2XMin \u003d this.p2XMax \u003d this.p2X \u003d this.battingCrease + 20;\n        this.ballVX \u003d this.ballVY \u003d this.p1Y \u003d this.p2Y \u003d this.p2XV \u003d this.p2YV \u003d this.p3Y \u003d this.p3YV \u003d this.p1XV \u003d this.p1YV \u003d 0;\n        this.ballXMax \u003d this.ballX \u003d this.runningCrease - (this.p1Diam / 2|0);\n        this.ballY \u003d 400;\n        this.balltype \u003d -1;\n        this.shottype \u003d -1;\n        this.p1next \u003d this.p2next \u003d false;\n        this.ballbowled \u003d false;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.bounces \u003d 0;\n        this.p1Touches \u003d 0;\n        if(this.fNoBall) {\n            ++this.thisBall;\n        }\n        if(this.ballCount \u003e\u003d 0) {\n            this.p2bxb[this.ballCount] \u003d this.p2Score +\u003d Math.floor(\u003cnumber\u003ethis.thisBall);\n            if(this.fNoBall) {\n                this.thisOver \u003d this.thisOver + \"N\";\n            }\n            if(this.thisBall !\u003d\u003d -this.wicketPenalty \u0026\u0026 this.thisBall !\u003d\u003d -this.wicketPenalty + 1) {\n                if(this.thisBall \u003d\u003d\u003d 0) {\n                    this.thisOver \u003d this.thisOver + \".\";\n                } else if(!this.fNoBall || this.thisBall !\u003d\u003d -this.wicketPenalty + 1 \u0026\u0026 this.thisBall !\u003d\u003d 0) {\n                    this.thisOver \u003d this.thisOver + (!this.fNoBall?this.thisBall:this.thisBall - 1);\n                }\n            } else {\n                this.thisOver \u003d this.thisOver + \"W\";\n            }\n            this.thisOver \u003d this.thisOver + \" \";\n        }\n        this.thisBall \u003d 0;\n        if(!this.fNoBall) {\n            ++this.ballCount;\n            if(this.ballCount % 6 \u003d\u003d\u003d 0 \u0026\u0026 this.ballCount !\u003d\u003d 0 \u0026\u0026 this.ballCount !\u003d\u003d this.overs * 6) {\n                this.fEndOfOver \u003d true;\n                this.gameThread \u003d null;\n                this.promptMsg \u003d \"Click the mouse to continue...\";\n            }\n        }\n        this.fNoBall \u003d false;\n        this.fHitBackWall \u003d false;\n        this.stillFrames \u003d 0;\n        this.repaint();\n    }\n\n    /*private*/ getMinScore(var1 : number) : number {\n        let var2 : number \u003d 0;\n        for(let var4 : number \u003d 0; var4 \u003c this.overs * 6; ++var4) {\n            if((var1 \u003d\u003d\u003d 1?this.p1bxb[var4]:this.p2bxb[var4]) \u003c var2) {\n                var2 \u003d var1 \u003d\u003d\u003d 1?this.p1bxb[var4]:this.p2bxb[var4];\n            }\n        };\n        return var2;\n    }\n\n    /*private*/ getMaxScore(var1 : number) : number {\n        let var2 : number \u003d 0;\n        for(let var4 : number \u003d 0; var4 \u003c this.overs * 6; ++var4) {\n            if((var1 \u003d\u003d\u003d 1?this.p1bxb[var4]:this.p2bxb[var4]) \u003e var2) {\n                var2 \u003d var1 \u003d\u003d\u003d 1?this.p1bxb[var4]:this.p2bxb[var4];\n            }\n        };\n        return var2;\n    }\n\n    /*private*/ MoveSlimers() {\n        if(this.p1ai) {\n            if(!this.ballbowled) {\n                this.bowl();\n            } else {\n                this.field();\n            }\n        }\n        if(this.p2ai) {\n            if(!this.fP2Touched \u0026\u0026 !this.fHitBackWall) {\n                this.playball();\n            } else {\n                this.running();\n            }\n        }\n        this.p1X +\u003d this.p1XV;\n        if(this.p1X \u003c (this.p1Diam / 2|0)) {\n            this.p1X \u003d (this.p1Diam / 2|0);\n        }\n        if(this.p1X \u003e this.postPos - (this.p1Diam / 2|0) - 5) {\n            this.p1X \u003d this.postPos - (this.p1Diam / 2|0) - 5;\n        }\n        if(this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d 2;\n            if(this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        if(this.ballX \u003d\u003d\u003d 200 \u0026\u0026 this.ballVX \u003d\u003d\u003d 200 \u0026\u0026 this.p1X \u003c this.p1XMin) {\n            this.p1XMin \u003d this.p1X;\n        }\n        this.p2X +\u003d this.p2XV;\n        if(this.p2X \u003e this.postPos - (this.p2Diam / 2|0) - 5) {\n            this.p2X \u003d this.postPos - (this.p2Diam / 2|0) - 5;\n        }\n        if(this.p2X \u003c (this.p2Diam / 2|0)) {\n            this.p2X \u003d (this.p2Diam / 2|0);\n        }\n        if(this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d 2;\n            if(this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n        if(this.p2X \u003c this.p2XMin \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            this.p2XMin \u003d this.p2X;\n        } else if(this.p2X \u003e this.p2XMax \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            this.p2XMax \u003d this.p2X;\n        }\n        if(this.p2X - (this.p2Diam / 2|0) \u003c\u003d this.runningCrease \u0026\u0026 this.p2XMax + (this.p2Diam / 2|0) \u003e\u003d this.battingCrease \u0026\u0026 (this.fP2Touched || this.fHitBackWall) \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            ++this.thisBall;\n            this.p2XMin \u003d this.p2XMax \u003d this.p2X;\n            this.drawScores();\n        } else if(this.p2XMin - (this.p2Diam / 2|0) \u003c\u003d this.runningCrease \u0026\u0026 this.p2X + (this.p2Diam / 2|0) \u003e\u003d this.battingCrease \u0026\u0026 (this.fP2Touched || this.fHitBackWall) \u0026\u0026 this.p2Y \u003d\u003d\u003d 0) {\n            ++this.thisBall;\n            this.p2XMin \u003d this.p2XMax \u003d this.p2X;\n            this.drawScores();\n        }\n        if(this.p3YV !\u003d\u003d 0) {\n            this.p3Y +\u003d this.p3YV -\u003d 2;\n        }\n        if(this.p3Y \u003c 0) {\n            this.p3Y \u003d 0;\n            this.p3YV \u003d 0;\n        }\n    }\n\n    /*private*/ DrawSlimers() {\n        let var1 : number \u003d (this.ballX * this.nWidth / 1000|0);\n        let var2 : number \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        let var3 : number \u003d (this.nWidth * this.p1Diam / 1000|0);\n        let var4 : number \u003d (this.nHeight * this.p1Diam / 1000|0);\n        let var5 : number \u003d (this.p1OldX * this.nWidth / 1000|0) - (var3 / 2|0);\n        let var6 : number \u003d (4 * this.nHeight / 5|0) - var4 - (this.p1OldY * this.nHeight / 1000|0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillRect(var5, var6, var3, var4);\n        var3 \u003d (this.nWidth * this.p2Diam / 1000|0);\n        var4 \u003d (this.nHeight * this.p2Diam / 1000|0);\n        var5 \u003d (this.p2OldX * this.nWidth / 1000|0) - (var3 / 2|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - var4 - (this.p2OldY * this.nHeight / 1000|0);\n        this.screen.fillRect(var5, var6, var3, var4);\n        var3 \u003d (this.nWidth / 10|0);\n        var4 \u003d (this.nHeight / 10|0);\n        var5 \u003d (this.p3X * this.nWidth / 1000|0) - (var3 / 2|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - var4 - (this.p3OldY * this.nHeight / 1000|0);\n        this.screen.fillRect(var5, var6, var3, var4);\n        let var7 : number \u003d 5;\n        let var8 : number \u003d ((this.ballRad + var7) * this.nHeight / 1000|0);\n        this.screen.fillOval(var1 - var8, var2 - var8, 2 * var8, 2 * var8);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillRect((this.nWidth * this.postPos / 1000|0) - 2, (this.nHeight * 7 / 10|0), 3, (this.nHeight / 10|0));\n        var3 \u003d (this.nWidth * this.p1Diam / 1000|0);\n        var4 \u003d (this.nHeight * this.p1Diam / 1000|0);\n        var5 \u003d (this.p1X * this.nWidth / 1000|0) - (var3 / 2|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - var4 - (this.p1Y * this.nHeight / 1000|0);\n        this.screen.setColor(this.slimeColours2[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);\n        this.screen.setColor(this.slimeColours[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);\n        this.screen.fillRect(var5 + (var3 / 5|0), var6 + (var4 / 5|0), (var3 * 3 / 5|0), (var4 * 4 / 5|0));\n        let var9 : number \u003d this.p1X + (38 * this.p1Diam / 100|0);\n        let var10 : number \u003d this.p1Y - (60 * this.p1Diam / 100|0);\n        var5 \u003d (var9 * this.nWidth / 1000|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - var4 - (var10 * this.nHeight / 1000|0);\n        let var11 : number \u003d var5 - var1;\n        let var12 : number \u003d var6 - var2;\n        let var13 : number \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var11 * var11 + var12 * var12))|0);\n        if(var13 \u003d\u003d\u003d 0) {\n            var13 \u003d 1;\n        }\n        let var14 : number \u003d ((this.nWidth / 50|0) * this.p1Diam / 100|0);\n        let var15 : number \u003d ((this.nHeight / 25|0) * this.p1Diam / 100|0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.fillOval(var5 - (4 * var11 / var13|0) - (3 * var14 / 4|0), var6 - (4 * var12 / var13|0) - (3 * var15 / 4|0), (var14 / 2|0), (var15 / 2|0));\n        var3 \u003d (this.nWidth * this.p2Diam / 1000|0);\n        var4 \u003d (this.nHeight * this.p2Diam / 1000|0);\n        var5 \u003d (this.p2X * this.nWidth / 1000|0) - (var3 / 2|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - (this.p2Diam * this.nHeight / 1000|0) - (this.p2Y * this.nHeight / 1000|0);\n        this.screen.setColor(this.slimeColours2[this.p2Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);\n        this.screen.setColor(this.slimeColours[this.p2Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);\n        this.screen.fillRect(var5 + (var3 / 5|0), var6 + (var4 / 5|0), (var3 * 3 / 5|0), (var4 * 4 / 5|0));\n        var9 \u003d this.p2X - (18 * this.p2Diam / 100|0);\n        var10 \u003d this.p2Y - (60 * this.p2Diam / 100|0);\n        var5 \u003d (var9 * this.nWidth / 1000|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - var4 - (var10 * this.nHeight / 1000|0);\n        var11 \u003d var5 - var1;\n        var12 \u003d var6 - var2;\n        var13 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var11 * var11 + var12 * var12))|0);\n        if(var13 \u003d\u003d\u003d 0) {\n            var13 \u003d 1;\n        }\n        var14 \u003d ((this.nWidth / 50|0) * this.p2Diam / 100|0);\n        var15 \u003d ((this.nHeight / 25|0) * this.p2Diam / 100|0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.fillOval(var5 - (4 * var11 / var13|0) - (3 * var14 / 4|0), var6 - (4 * var12 / var13|0) - (3 * var15 / 4|0), (var14 / 2|0), (var15 / 2|0));\n        var3 \u003d (this.nWidth * this.p1Diam / 1000|0);\n        var4 \u003d (this.nHeight * this.p1Diam / 1000|0);\n        var5 \u003d (this.p3X * this.nWidth / 1000|0) - (var3 / 2|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - (this.p1Diam * this.nHeight / 1000|0) - (this.p3Y * this.nHeight / 1000|0);\n        this.screen.setColor(this.slimeColours2[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 0, 180);\n        this.screen.setColor(this.slimeColours[this.p1Col]);\n        this.screen.fillArc(var5, var6, var3, 2 * var4, 53, 74);\n        this.screen.fillRect(var5 + (var3 / 5|0), var6 + (var4 / 5|0), (var3 * 3 / 5|0), (var4 * 4 / 5|0));\n        var9 \u003d this.p3X - (18 * this.p1Diam / 100|0);\n        var10 \u003d this.p3Y - (60 * this.p1Diam / 100|0);\n        var5 \u003d (var9 * this.nWidth / 1000|0);\n        var6 \u003d (4 * this.nHeight / 5|0) - var4 - (var10 * this.nHeight / 1000|0);\n        var11 \u003d var5 - var1;\n        var12 \u003d var6 - var2;\n        var13 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var11 * var11 + var12 * var12))|0);\n        if(var13 \u003d\u003d\u003d 0) {\n            var13 \u003d 1;\n        }\n        var14 \u003d ((this.nWidth / 50|0) * this.p1Diam / 100|0);\n        var15 \u003d ((this.nHeight / 25|0) * this.p1Diam / 100|0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var5 - var14, var6 - var15, var14, var15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.fillOval(var5 - (4 * var11 / var13|0) - (3 * var14 / 4|0), var6 - (4 * var12 / var13|0) - (3 * var15 / 4|0), (var14 / 2|0), (var15 / 2|0));\n        this.MoveBall();\n    }\n\n    /*private*/ MoveBall() {\n        let var1 : number \u003d 5;\n        let var2 : number \u003d 11;\n        let var3 : number \u003d 21;\n        let var4 : number \u003d 17;\n        let var5 : number \u003d ((this.ballRad + var1) * this.nHeight / 1000|0);\n        let var6 : number \u003d (this.ballOldX * this.nWidth / 1000|0);\n        let var7 : number \u003d (4 * this.nHeight / 5|0) - (this.ballOldY * this.nHeight / 1000|0);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        this.ballbowled \u003d this.ballbowled || this.ballX \u003e this.bowlingCrease;\n        if(this.ballVX \u003e\u003d 2 || this.ballVY \u003e\u003d 2 || this.p1XV + this.p1YV + this.p2XV + this.p2YV + this.p3YV !\u003d\u003d 0 || this.ballX \u003d\u003d\u003d 200 || this.p2X \u003e this.runningCrease + (this.p2Diam / 2|0) \u0026\u0026 this.p2X \u003c this.battingCrease - (this.p2Diam / 2|0)) {\n            this.stillFrames \u003d 0;\n        } else if(this.stillFrames++ \u003e 75) {\n            this.promptMsg \u003d \" \";\n        }\n        if(this.ballY \u003c this.ballRad + 5) {\n            this.ballY \u003d this.ballRad + 5;\n            this.ballVY \u003d (-this.ballVY * 2 / 3|0);\n            this.ballVX \u003d (this.ballVX * 19 / 20|0);\n            ++this.bounces;\n            if(!this.fP2Touched \u0026\u0026 this.bounces \u003e 1 \u0026\u0026 !this.fHitBackWall) {\n                this.fNoBall \u003d true;\n                this.drawPrompt$java_lang_String$int(\"No ball! (grubber)\", 2);\n            }\n        }\n        if(this.ballX \u003e this.postPos \u0026\u0026 !this.fP2Touched) {\n            this.fP2Touched \u003d true;\n        }\n        if(this.ballY \u003e 300 \u0026\u0026 this.ballX \u003e this.battingCrease - (this.p2Diam / 2|0) \u0026\u0026 this.p2X \u003e\u003d this.battingCrease - (this.p2Diam / 2|0) \u0026\u0026 !this.fP2Touched \u0026\u0026 this.p2XMin \u003e this.battingCrease - (this.p2Diam * 3 / 4|0)) {\n            this.fNoBall \u003d true;\n            this.drawPrompt$java_lang_String$int(\"No ball! (too high)\", 2);\n        }\n        if(!this.fEndGame) {\n            let var8 : number \u003d 2 * (this.ballX - this.p1X);\n            let var9 : number \u003d this.ballY - this.p1Y;\n            let var10 : number \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var8 * var8 + var9 * var9))|0);\n            let var11 : number \u003d this.ballVX - this.p1XV;\n            let var12 : number \u003d this.ballVY - this.p1YV;\n            let var13 : number;\n            if(var9 \u003e 0 \u0026\u0026 var10 \u003c this.p1Diam + this.ballRad \u0026\u0026 var10 \u003e var1) {\n                var13 \u003d ((var8 * var11 + var9 * var12) / var10|0);\n                this.ballX \u003d this.p1X + (((this.p1Diam + this.ballRad) / 2|0) * var8 / var10|0);\n                this.ballY \u003d this.p1Y + ((this.p1Diam + this.ballRad) * var9 / var10|0);\n                if(var13 \u003c\u003d 0) {\n                    if(!this.p1Hold) {\n                        this.ballVX +\u003d this.p1XV - (2 * var8 * var13 / var10|0);\n                    } else {\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                    }\n                    if(this.ballVX \u003c -var2) {\n                        this.ballVX \u003d -var2;\n                    }\n                    if(this.ballVX \u003e var2) {\n                        this.ballVX \u003d var2;\n                    }\n                    this.ballVY +\u003d this.p1YV - (2 * var9 * var13 / var10|0);\n                    if(this.ballVY \u003c -var3) {\n                        this.ballVY \u003d -var3;\n                    }\n                    if(this.ballVY \u003e var3) {\n                        this.ballVY \u003d var3;\n                    }\n                }\n                if(this.p1Touches \u003e 0 \u0026\u0026 !this.fP2Touched \u0026\u0026 this.ballOldX \u003d\u003d\u003d this.ballXMax \u0026\u0026 !this.fHitBackWall) {\n                    this.drawPrompt$java_lang_String$int(\"No ball! (too many touches)\", 2);\n                    this.fNoBall \u003d true;\n                }\n                if(this.fP2Touched) {\n                    this.fP1Touched \u003d true;\n                }\n                if(this.p1X !\u003d\u003d this.runningCrease - (this.p1Diam / 2|0)) {\n                    ++this.p1Touches;\n                }\n                if(this.fP2Touched \u0026\u0026 this.bounces \u003d\u003d\u003d 0 \u0026\u0026 !this.fNoBall \u0026\u0026 !this.fHitBackWall \u0026\u0026 this.ballX \u003e\u003d this.p1X) {\n                    this.promptMsg \u003d this.COMM_CAUGHT[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_CAUGHT.length * Math.random())|0)];\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n            }\n            if(!this.fP2Touched) {\n                var8 \u003d 2 * (this.ballX - this.p2X);\n                var9 \u003d this.ballY - this.p2Y;\n                var10 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var8 * var8 + var9 * var9))|0);\n                var11 \u003d this.ballVX - this.p2XV;\n                var12 \u003d this.ballVY - this.p2YV;\n                if(var9 \u003e 0 \u0026\u0026 var10 \u003c this.p2Diam + this.ballRad \u0026\u0026 var10 \u003e var1 \u0026\u0026 this.p1Touches \u003e 0) {\n                    var13 \u003d ((var8 * var11 + var9 * var12) / var10|0);\n                    this.ballX \u003d this.p2X + (((this.p2Diam + this.ballRad) / 2|0) * var8 / var10|0);\n                    this.ballY \u003d this.p2Y + ((this.p2Diam + this.ballRad) * var9 / var10|0);\n                    if(var13 \u003c\u003d 0) {\n                        this.ballVX +\u003d this.p2XV - (2 * var8 * var13 / var10|0);\n                        if(this.ballVX \u003c -var4) {\n                            this.ballVX \u003d -var4;\n                        }\n                        if(this.ballVX \u003e var2) {\n                            this.ballVX \u003d var2;\n                        }\n                        this.ballVY +\u003d this.p2YV - (2 * var9 * var13 / var10|0);\n                        if(this.ballVY \u003c -var3) {\n                            this.ballVY \u003d -var3;\n                        }\n                        if(this.ballVY \u003e var3) {\n                            this.ballVY \u003d var3;\n                        }\n                    }\n                    this.fP2Touched \u003d true;\n                    this.bounces \u003d 0;\n                }\n            }\n            var8 \u003d 2 * (this.ballX - this.p3X);\n            var9 \u003d this.ballY - this.p3Y;\n            var10 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var8 * var8 + var9 * var9))|0);\n            var11 \u003d this.ballVX;\n            var12 \u003d this.ballVY - this.p3YV;\n            if(var9 \u003e 0 \u0026\u0026 var10 \u003c this.p1Diam + this.ballRad \u0026\u0026 var10 \u003e var1) {\n                var13 \u003d (((var8 * var11 + var9 * var12) / var10|0) * 2 / 3|0);\n                this.ballX \u003d this.p3X + (((this.p1Diam + this.ballRad) / 2|0) * var8 / var10|0);\n                this.ballY \u003d this.p3Y + ((this.p1Diam + this.ballRad) * var9 / var10|0);\n                if(var13 \u003c\u003d 0) {\n                    this.ballVX +\u003d (-2 * var8 * var13 / var10|0);\n                    if(this.ballVX \u003c -var4) {\n                        this.ballVX \u003d -var4;\n                    }\n                    if(this.ballVX \u003e var2) {\n                        this.ballVX \u003d var2;\n                    }\n                    this.ballVY +\u003d this.p3YV - (2 * var9 * var13 / var10|0);\n                    if(this.ballVY \u003c -var3) {\n                        this.ballVY \u003d -var3;\n                    }\n                    if(this.ballVY \u003e var3) {\n                        this.ballVY \u003d var3;\n                    }\n                }\n                if(!this.fP1Touched \u0026\u0026 this.fP2Touched \u0026\u0026 this.bounces \u003d\u003d\u003d 0 \u0026\u0026 !this.fNoBall) {\n                    this.promptMsg \u003d this.COMM_CTBEHIND[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_CTBEHIND.length * Math.random())|0)];\n                    this.thisBall \u003d -this.wicketPenalty;\n                } else if(this.p2X \u003c this.battingCrease - (this.p2Diam / 2|0) \u0026\u0026 this.p2X \u003e this.runningCrease + (this.p2Diam / 2|0) || this.p2Y !\u003d\u003d 0) {\n                    if(this.p2XMin - (this.p2Diam / 2|0) \u003e this.runningCrease \u0026\u0026 !this.fNoBall \u0026\u0026 !this.fP1Touched) {\n                        this.promptMsg \u003d this.COMM_STUMPED[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_STUMPED.length * Math.random())|0)];\n                    } else {\n                        this.promptMsg \u003d this.COMM_RUNOUT[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_RUNOUT.length * Math.random())|0)];\n                    }\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n                this.fP1Touched \u003d true;\n            }\n            if(this.ballX \u003c 5) {\n                this.ballX \u003d 5;\n                this.ballVX \u003d (-this.ballVX * 2 / 3|0);\n                if(this.fP2Touched \u0026\u0026 this.bounces \u003d\u003d\u003d 0 \u0026\u0026 !this.fHitBackWall) {\n                    this.promptMsg \u003d this.COMM_SIX[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_SIX.length * Math.random())|0)];\n                    if(this.fP1Touched \u0026\u0026 Math.random() \u003c 0.7) {\n                        this.promptMsg \u003d this.COMM_SIXTOUCHED[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_SIXTOUCHED.length * Math.random())|0)];\n                    }\n                    this.drawPrompt$java_lang_String$int(this.promptMsg, 1);\n                    this.promptMsg \u003d \"\";\n                    this.thisBall +\u003d 6;\n                } else if(this.fP2Touched \u0026\u0026 !this.fHitBackWall) {\n                    this.promptMsg \u003d this.COMM_FOUR[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_FOUR.length * Math.random())|0)];\n                    if(this.fP1Touched \u0026\u0026 Math.random() \u003c 0.7) {\n                        this.promptMsg \u003d this.COMM_FOURTOUCHED[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_FOURTOUCHED.length * Math.random())|0)];\n                    }\n                    this.drawPrompt$java_lang_String$int(this.promptMsg, 1);\n                    this.promptMsg \u003d \"\";\n                    this.thisBall +\u003d 4;\n                } else if(!this.fP2Touched) {\n                    this.fNoBall \u003d true;\n                    this.drawPrompt$java_lang_String$int(\"No ball! (must bowl forwards)\", 2);\n                }\n                if(this.fP2Touched) {\n                    this.fHitBackWall \u003d true;\n                }\n            }\n            if(this.ballX \u003e 995) {\n                this.ballX \u003d 995;\n                this.ballVX \u003d (-this.ballVX * 2 / 3|0);\n                this.fHitBackWall \u003d true;\n            }\n            if(this.ballX \u003e this.postPos - this.ballRad \u0026\u0026 this.ballX \u003c this.postPos + this.ballRad \u0026\u0026 this.ballY \u003c 105 + this.ballRad) {\n                if((this.p2X \u003c this.battingCrease - (this.p2Diam / 2|0) \u0026\u0026 this.p2X \u003e this.runningCrease + (this.p2Diam / 2|0) || this.p2Y !\u003d\u003d 0) \u0026\u0026 this.fP1Touched \u0026\u0026 this.fP2Touched) {\n                    this.promptMsg \u003d this.COMM_RUNOUT[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_RUNOUT.length * Math.random())|0)];\n                    this.thisBall \u003d -this.wicketPenalty;\n                } else if(!this.fNoBall \u0026\u0026 !this.fHitBackWall \u0026\u0026 this.p1Touches \u003d\u003d\u003d 1) {\n                    this.promptMsg \u003d this.COMM_BOWLED[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_BOWLED.length * Math.random())|0)];\n                    if(this.fP2Touched \u0026\u0026 Math.random() \u003c 0.5) {\n                        this.promptMsg \u003d this.COMM_PLAYEDON[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_PLAYEDON.length * Math.random())|0)];\n                    }\n                    this.thisBall \u003d -this.wicketPenalty;\n                }\n                this.fHitBackWall \u003d true;\n                if(this.ballVY \u003c 0 \u0026\u0026 this.ballY \u003e 105 + this.ballRad) {\n                    this.ballVY *\u003d -1;\n                    this.ballY \u003d 105 + this.ballRad;\n                } else if(this.ballX \u003c this.postPos) {\n                    this.ballX \u003d this.postPos - 17;\n                    this.ballVX \u003d ((this.ballVX \u003e\u003d 0?-this.ballVX:this.ballVX) * 3 / 4|0);\n                } else {\n                    this.ballX \u003d this.postPos + 17;\n                    this.ballVX \u003d ((this.ballVX \u003c\u003d 0?-this.ballVX:this.ballVX) * 3 / 4|0);\n                }\n                this.fP2Touched \u003d true;\n            }\n        }\n        if(this.ballX \u003e this.ballXMax) {\n            this.ballXMax \u003d this.ballX;\n        }\n        var6 \u003d (this.ballX * this.nWidth / 1000|0);\n        var7 \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        this.screen.setColor(this.BALL_COL);\n        this.screen.fillOval(var6 - var5, var7 - var5, 2 * var5, 2 * var5);\n        this.drawScores();\n        if(this.promptMsg.length \u003e 0) {\n            if(this.promptMsg.length \u003e 1 \u0026\u0026 Math.random() \u003c 0.3) {\n                this.promptMsg \u003d this.COMM_OUT_GENERIC[(\u003cnumber\u003e(\u003cnumber\u003ethis.COMM_OUT_GENERIC.length * Math.random())|0)];\n            }\n            this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n            this.getGraphics().drawImage(this.buffer, 0, 0, this);\n            if(this.promptMsg.length \u003e 1) {\n                ShimmedThread.sleep$long(1500);\n            }\n            this.promptMsg \u003d \"\";\n            this.nextBall();\n        }\n    }\n\n    /*private*/ sleep(var1 : number) {\n        if(this.gameThread !\u003d null) {\n            try {\n                ShimmedThread.sleep$long(var1);\n            } catch(var3) {\n            };\n        }\n    }\n\n    public drawPrompt$() {\n        this.screen.setColor(this.COURT_COL);\n        this.screen.fillRect(0, (4 * this.nHeight / 5|0) + 6, this.nWidth, (this.nHeight / 5|0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    }\n\n    public drawPrompt$java_lang_String$int(var1 : string, var2 : number) {\n        let var3 : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2|0), (this.nHeight * 4 / 5|0) + var3.getHeight() * (var2 + 1) + 10);\n    }\n\n    public drawPrompt(var1? : any, var2? : any) : any {\n        if(((typeof var1 \u003d\u003d\u003d \u0027string\u0027) || var1 \u003d\u003d\u003d null) \u0026\u0026 ((typeof var2 \u003d\u003d\u003d \u0027number\u0027) || var2 \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.drawPrompt$java_lang_String$int(var1, var2);\n        } else if(var1 \u003d\u003d\u003d undefined \u0026\u0026 var2 \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.drawPrompt$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    /*private*/ drawScores() {\n        if(this.inns !\u003d\u003d 0) {\n            let var1 : ShimmedGraphics \u003d this.screen;\n            let var2 : ShimmedFontMetrics \u003d var1.getFontMetrics();\n            let var3 : number \u003d 1;\n            var1.setColor(this.SKY_COL);\n            var1.fillRect(0, 0, (this.nWidth / 2|0), 3 * var2.getAscent() + 10);\n            var1.setColor(ShimmedColor.white);\n            let var4 : string \u003d this.slimeColText[this.p2Col] + (this.p2Score + Math.floor(\u003cnumber\u003ethis.thisBall));\n            var1.drawString(var4, 10, (var2.getAscent() + 3) * var3 + 10);\n            let var5 : number \u003d var3 + 1;\n            if(this.inns !\u003d\u003d 1) {\n                var4 \u003d this.slimeColText[this.p1Col] + this.p1Score;\n                var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 10);\n                ++var5;\n            }\n            if(this.ballCount \u003c 6 * this.overs - 1) {\n                var4 \u003d \"Over: \" + (this.ballCount / 6|0);\n                if(this.ballCount % 6 !\u003d\u003d 0) {\n                    var4 \u003d var4 + \".\" + this.ballCount % 6;\n                }\n                var4 \u003d var4 + \" (\" + this.overs + \")\";\n            } else if(this.ballCount \u003d\u003d\u003d 6 * this.overs - 1) {\n                var4 \u003d \"Last ball\";\n            } else {\n                var4 \u003d \"Over: \" + this.overs;\n            }\n            var1.drawString(var4, 10, (var2.getAscent() + 3) * var5 + 20);\n            ++var5;\n            if(this.p1X !\u003d\u003d 200 || this.p2X !\u003d\u003d 800 || this.fP1Touched || this.fP2Touched) {\n            }\n        }\n    }\n\n    /*private*/ drawWorm() {\n        let var1 : ShimmedGraphics \u003d this.buffer.getGraphics();\n        let var2 : ShimmedFontMetrics \u003d var1.getFontMetrics();\n        let var5 : number \u003d this.getMinScore(1);\n        let var7 : number \u003d this.getMinScore(2);\n        let var11 : number \u003d this.getMaxScore(1);\n        let var13 : number \u003d this.getMaxScore(2);\n        let var3 : number \u003d var5 \u003c var7?var5:var7;\n        let var9 : number \u003d var11 \u003e var13?var11:var13;\n        if(var3 !\u003d\u003d 0 || var9 !\u003d\u003d 0) {\n            let var15 : number \u003d (this.nWidth * 4 / 5|0) - 5;\n            let var16 : number \u003d (this.nWidth / 5|0);\n            let var17 : number \u003d (\u003cnumber\u003e(5 + Math.floor(Math.floor(\u003cnumber\u003e((this.nHeight / 5|0))) * var9 / (var9 - var3)))|0);\n            let var18 : number \u003d (this.nHeight / 5|0);\n            if(this.fEndOfOver) {\n                var15 \u003d (this.nWidth / 10|0) - 5;\n                var16 \u003d (this.nWidth * 4 / 5|0);\n                var17 \u003d (\u003cnumber\u003e(Math.floor(Math.floor(\u003cnumber\u003e((this.nHeight * 2 / 5|0))) * var9 / (var9 - var3)) + Math.floor(\u003cnumber\u003e((this.nHeight * 3 / 10|0))))|0);\n                var18 \u003d (this.nHeight * 2 / 5|0);\n            }\n            if(this.inns \u003d\u003d\u003d 2) {\n                var1.setColor(this.slimeColours[this.p1Col]);\n                var1.drawString(this.slimeColAbbr[this.p1Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p1Col]) - 5, var17 - (\u003cnumber\u003e(Math.floor(Math.floor((var9 + var3) / 2) * Math.floor(\u003cnumber\u003evar18) / (var9 - var3)))|0));\n                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs)|0), (\u003cnumber\u003e(Math.floor(\u003cnumber\u003evar17) - Math.floor(Math.floor(\u003cnumber\u003evar18) * this.p1bxb[0] / (var9 - var3)))|0));\n                for(let var19 : number \u003d 1; var19 \u003c 6 * this.overs; ++var19) {\n                    var1.drawLine(var15 + (var16 * var19 / (6 * this.overs)|0), (\u003cnumber\u003e(Math.floor(\u003cnumber\u003evar17) - Math.floor(Math.floor(\u003cnumber\u003evar18) * this.p1bxb[var19 - 1] / (var9 - var3)))|0), var15 + (var16 * (var19 + 1) / (6 * this.overs)|0), (\u003cnumber\u003e(Math.floor(\u003cnumber\u003evar17) - Math.floor(Math.floor(\u003cnumber\u003evar18) * this.p1bxb[var19] / (var9 - var3)))|0));\n                };\n                var1.setColor(this.slimeColours[this.p2Col]);\n                var1.drawString(this.slimeColAbbr[this.p2Col], var15 - var2.stringWidth(this.slimeColAbbr[this.p2Col]) - 5, var17 - (\u003cnumber\u003e(Math.floor(Math.floor((var9 + var3) / 2) * Math.floor(\u003cnumber\u003evar18) / (var9 - var3)))|0) + var2.getAscent());\n                var1.drawLine(var15, var17, var15 + (var16 / (6 * this.overs)|0), (\u003cnumber\u003e(Math.floor(\u003cnumber\u003evar17) - Math.floor(Math.floor(\u003cnumber\u003evar18) * this.p2bxb[0] / (var9 - var3)))|0));\n                for(let var20 : number \u003d 1; var20 \u003c this.ballCount; ++var20) {\n                    var1.drawLine(var15 + (var16 * var20 / (6 * this.overs)|0), (\u003cnumber\u003e(Math.floor(\u003cnumber\u003evar17) - Math.floor(Math.floor(\u003cnumber\u003evar18) * this.p2bxb[var20 - 1] / (var9 - var3)))|0), var15 + (var16 * (var20 + 1) / (6 * this.overs)|0), (\u003cnumber\u003e(Math.floor(\u003cnumber\u003evar17) - Math.floor(Math.floor(\u003cnumber\u003evar18) * this.p2bxb[var20] / (var9 - var3)))|0));\n                };\n                var1.setColor(ShimmedColor.white);\n                var1.drawString(/* valueOf */new String(var9).toString(), var15 - 5 - var2.stringWidth(/* valueOf */new String(var9).toString()), var17 - (\u003cnumber\u003e(Math.floor(var9 * Math.floor(\u003cnumber\u003evar18) / (var9 - var3)))|0) + var2.getAscent());\n                var1.drawString(/* valueOf */new String(var3).toString(), var15 - 5 - var2.stringWidth(/* valueOf */new String(var3).toString()), var17 - (\u003cnumber\u003e(Math.floor(var3 * Math.floor(\u003cnumber\u003evar18) / (var9 - var3)))|0));\n                var1.drawLine(var15, var17 - (\u003cnumber\u003e(Math.floor(var9 * Math.floor(\u003cnumber\u003evar18) / (var9 - var3)))|0), var15, var17 - (\u003cnumber\u003e(Math.floor(var3 * Math.floor(\u003cnumber\u003evar18) / (var9 - var3)))|0));\n                var1.drawLine(var15, var17, var15 + var16, var17);\n            }\n        }\n    }\n\n    public run() {\n        let var1 : ShimmedGraphics \u003d this.getGraphics();\n        while((this.gameThread !\u003d null)) {\n            if(this.__wait \u003e 0) {\n                --this.__wait;\n            }\n            this.p1OldX \u003d this.p1X;\n            this.p1OldY \u003d this.p1Y;\n            this.p2OldX \u003d this.p2X;\n            this.p2OldY \u003d this.p2Y;\n            this.p3OldY \u003d this.p3Y;\n            this.ballOldX \u003d this.ballX;\n            this.ballOldY \u003d this.ballY;\n            this.MoveSlimers();\n            this.DrawSlimers();\n            var1.drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n            if(this.ballCount \u003d\u003d\u003d this.overs * 6 \u0026\u0026 !this.fNoBall) {\n                this.fInPlay \u003d false;\n                if(this.inns \u003d\u003d\u003d 1) {\n                    this.promptMsg \u003d \"Click the mouse to continue...\";\n                } else {\n                    this.DoFatality();\n                    this.promptMsg \u003d \"Click team names to select teams, then choose an innings length to start!\";\n                    this.fEndGame \u003d true;\n                    if(this.p1ai) {\n                        this.p1Col \u003d 9;\n                    }\n                    if(this.p2ai) {\n                        this.p2Col \u003d 9;\n                    }\n                    this.p1ai \u003d this.p2ai \u003d false;\n                }\n                this.gameThread \u003d null;\n            }\n            if(this.gameThread !\u003d null) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                } catch(var2) {\n                };\n            }\n        };\n        if(!this.fEndOfOver) {\n            this.fInPlay \u003d false;\n        }\n        this.repaint();\n    }\n\n    /*private*/ DoFatality() {\n        this.getGraphics();\n        if(this.p1Score \u003e this.p2Score) {\n            this.p1J();\n            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" wins!\", 1);\n        } else if(this.p2Score \u003e this.p1Score) {\n            this.p2J();\n            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" wins!\", 1);\n        } else {\n            this.drawPrompt$java_lang_String$int(\"It\\\u0027s a tie!\", 1);\n        }\n        this.p1ai \u003d this.p2ai \u003d false;\n    }\n\n    public destroy() {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    }\n\n    /*private*/ bowl() {\n        if(this.__wait \u003c\u003d 0) {\n            if(this.balltype \u003d\u003d\u003d -1) {\n                switch((this.difficulty)) {\n                case 0:\n                    this.balltype \u003d 0;\n                    break;\n                case 1:\n                    this.balltype \u003d (\u003cnumber\u003e(4.0 * Math.random())|0);\n                    break;\n                case 2:\n                    this.balltype \u003d (\u003cnumber\u003e(2.0 * Math.random())|0) + 2;\n                }\n            }\n            if(this.difficulty \u003d\u003d\u003d 2 \u0026\u0026 this.p2X - (this.p2Diam / 2|0) \u003c this.battingCrease - ((this.battingCrease - this.runningCrease) / 4|0)) {\n                this.balltype \u003d 1;\n            }\n            switch((this.balltype)) {\n            case 0:\n                if(this.p1X \u003e this.runningCrease - (this.p1Diam * 5 / 6|0)) {\n                    this.p1L();\n                    return;\n                }\n                if(this.ballY \u003c 200 \u0026\u0026 this.ballVY \u003c 0) {\n                    this.p1J();\n                    return;\n                }\n                this.p1S();\n                return;\n            case 1:\n                if(this.p1X \u003e this.runningCrease - (this.p1Diam * 3 / 4|0)) {\n                    this.p1L();\n                } else {\n                    this.p1S();\n                }\n                if(this.ballY \u003c 320 \u0026\u0026 this.ballVY \u003c 0) {\n                    this.p1J();\n                    return;\n                }\n                break;\n            case 2:\n                if(this.ballVY \u003e 0 \u0026\u0026 this.p1X \u003e this.runningCrease - (this.p1Diam * 5 / 6|0)) {\n                    this.p1L();\n                } else {\n                    this.p1S();\n                }\n                if(this.ballY \u003e 270 \u0026\u0026 this.ballVY \u003e 0) {\n                    this.p1J();\n                    return;\n                }\n                break;\n            case 3:\n                if(this.p1X \u003e this.runningCrease - (this.p1Diam * 2 / 3|0)) {\n                    this.p1L();\n                    return;\n                }\n                this.p1S();\n                return;\n            }\n        }\n    }\n\n    /*private*/ field() {\n        if(this.bounces \u003d\u003d\u003d 0) {\n            if(this.difficulty \u003e 1 \u0026\u0026 this.ballX \u003e this.p1X \u0026\u0026 this.ballVX \u003c 0 \u0026\u0026 this.ballY \u003e (this.p1Diam / 2|0) \u0026\u0026 Math.sqrt(\u003cnumber\u003e((this.ballX - this.p1X) * (this.ballX - this.p1X) + (this.ballY - this.p1Y) * (this.ballY - this.p1Y))) \u003c 250.0) {\n                this.p1J();\n            }\n            if(this.difficulty \u003d\u003d\u003d 2 \u0026\u0026 this.ballX \u003e this.postPos \u0026\u0026 Math.sqrt(\u003cnumber\u003e((this.ballX - this.p3X) * (this.ballX - this.p3X) + (this.ballY - this.p3Y) * (this.ballY - this.p3Y))) \u003c 250.0) {\n                this.p3J();\n            }\n        }\n        if(this.difficulty \u003c 2 \u0026\u0026 !this.fP2Touched \u0026\u0026 this.ballbowled) {\n            this.p1S();\n        } else if(this.p1X + (this.p1Diam / 2|0) \u003e this.ballX) {\n            this.p1L();\n        } else if(this.p1X + this.p1Diam + (this.ballRad * 3 / 2|0) \u003c this.postPos) {\n            this.p1R();\n        } else if((this.p2X + (this.p2Diam / 2|0) \u003c this.battingCrease \u0026\u0026 this.p2X - (this.p2Diam / 2|0) \u003e this.runningCrease || this.p2Y !\u003d\u003d 0) \u0026\u0026 this.fP1Touched) {\n            this.p1R();\n        } else {\n            this.p1S();\n        }\n        if(this.ballX \u003e this.p1Diam \u0026\u0026 this.ballY \u003c (this.p1Diam / 2|0) \u0026\u0026 this.ballVX \u003c\u003d 0 \u0026\u0026 !this.fHitBackWall \u0026\u0026 this.p1X - this.ballX \u003c this.p1Diam \u0026\u0026 this.p1X \u003e this.ballX \u0026\u0026 this.bounces \u003e 0 \u0026\u0026 this.difficulty \u003d\u003d\u003d 2) {\n            this.p1J();\n        }\n    }\n\n    /*private*/ playball() {\n        let var1 : number \u003d Math.sqrt(\u003cnumber\u003e((this.ballX - this.p2X) * (this.ballX - this.p2X) + (this.ballY - this.p2Y) * (this.ballY - this.p2Y)));\n        let var3 : boolean \u003d false;\n        let var4 : number \u003d 0;\n        let var5 : number \u003d this.ballY;\n        for(let var6 : number \u003d this.ballVY; var5 \u003e 0; var5 +\u003d var6) {\n            ++var4;\n            --var6;\n        };\n        let var8 : number \u003d this.ballX + this.ballVX * var4;\n        let var7 : boolean \u003d var8 \u003c this.postPos - this.p2Diam \u0026\u0026 var8 \u003e\u003d this.p2X - var4 * 8;\n        switch((this.difficulty)) {\n        case 0:\n            if(var1 \u003c 400.0 \u0026\u0026 this.ballX - this.p2X \u003c (this.p2Diam * 3 / 2|0) \u0026\u0026 this.ballX \u003c this.p2X \u0026\u0026 this.ballY \u003c this.p2Y + (this.p2Diam * 3 / 2|0)) {\n                this.p2L();\n            } else {\n                this.p2S();\n            }\n            if(var1 \u003c 350.0 \u0026\u0026 this.ballY \u003e this.p2Diam * 2 \u0026\u0026 this.ballX \u003e this.p2X - this.p2Diam) {\n                this.p2J();\n                return;\n            }\n            break;\n        case 1:\n        case 2:\n            if(this.ballbowled \u0026\u0026 this.shottype \u003d\u003d\u003d -1) {\n                if(this.p2Score \u003e this.p1Score \u0026\u0026 this.inns \u003d\u003d\u003d 2 \u0026\u0026 var7) {\n                    this.shottype \u003d 1;\n                } else if(var7 \u0026\u0026 Math.random() \u003c 0.5) {\n                    if(Math.random() \u003c 0.75) {\n                        this.shottype \u003d 4;\n                    } else {\n                        this.shottype \u003d 1;\n                    }\n                } else if(var8 \u003c\u003d this.battingCrease \u0026\u0026 Math.random() \u003e\u003d 0.6) {\n                    this.shottype \u003d 2;\n                } else {\n                    this.shottype \u003d 3;\n                }\n            }\n            switch((this.shottype)) {\n            case 1:\n                if(this.ballbowled \u0026\u0026 this.p2X - this.p2XV - (this.p2Diam / 2|0) \u003e var8) {\n                    this.p2L();\n                    return;\n                }\n                this.p2S();\n                return;\n            case 2:\n                if(this.ballbowled \u0026\u0026 this.p2X - this.p2XV - this.p2Diam \u003e var8) {\n                    this.p2L();\n                    return;\n                }\n                this.p2S();\n                if(this.ballX \u003e this.p2X - (this.p2Diam * 2 / 3|0)) {\n                    this.p2J();\n                    return;\n                }\n                break;\n            case 3:\n                if(this.ballbowled \u0026\u0026 this.p2X + this.p2XV + 50 \u003e var8) {\n                    this.p2L();\n                    return;\n                }\n                this.p2S();\n                if(this.ballX \u003e this.p2X - (this.p2Diam / 2|0)) {\n                    this.p2J();\n                    return;\n                }\n                break;\n            case 4:\n                if(!this.ballbowled || this.p2X - this.p2XV - (this.p2Diam / 2|0) \u003c\u003d var8 \u0026\u0026 this.ballX + 3 * this.ballVX \u003c\u003d this.p2X - (this.p2Diam / 2|0)) {\n                    this.p2S();\n                    return;\n                }\n                this.p2L();\n                return;\n            }\n        }\n    }\n\n    /*private*/ running() {\n        let var1 : boolean \u003d false;\n        if(this.ballX \u003e this.postPos || this.ballX \u003e this.p1X \u0026\u0026 (this.p1X - this.ballX \u003c 400 || this.p1X - this.ballX \u003c 300 \u0026\u0026 this.ballVX \u003e 0)) {\n            var1 \u003d true;\n        }\n        if(this.ballX \u003c this.runningCrease || this.p1X \u003c this.runningCrease \u0026\u0026 this.ballVX \u003c 0 \u0026\u0026 this.ballX \u003c this.battingCrease) {\n            var1 \u003d false;\n        }\n        if(this.ballX \u003c this.postPos \u0026\u0026 this.p1X \u003c this.p2X \u0026\u0026 this.ballX \u003e this.p2X \u0026\u0026 this.p2X - (this.p2Diam / 2|0) \u003c\u003d this.runningCrease) {\n            var1 \u003d false;\n        }\n        if(this.ballX \u003c this.postPos \u0026\u0026 this.ballX - this.p2X \u003e this.battingCrease - this.runningCrease) {\n            var1 \u003d false;\n        }\n        if(var1 \u0026\u0026 (this.p2X + (this.p2Diam / 2|0) \u003e\u003d this.battingCrease || this.p2X - (this.p2Diam / 2|0) \u003c\u003d this.runningCrease)) {\n            this.p2S();\n        } else if(var1) {\n            if(this.p2X \u003c\u003d this.runningCrease + ((this.battingCrease - this.runningCrease) / 2|0) \u0026\u0026 this.difficulty \u003e\u003d 2) {\n                this.p2L();\n            } else {\n                this.p2R();\n            }\n        } else if(!var1 \u0026\u0026 this.p2X - (this.p2Diam / 2|0) \u003c\u003d this.runningCrease \u0026\u0026 this.p2X \u003d\u003d\u003d this.p2XMax) {\n            this.p2R();\n        } else {\n            if(!var1 \u0026\u0026 this.p2X + (this.p2Diam / 2|0) \u003e\u003d this.battingCrease \u0026\u0026 this.p2X \u003e\u003d this.p2XMin) {\n                this.p2L();\n            }\n        }\n    }\n\n    public constructor() {\n        super();\n        this.nWidth \u003d 0;\n        this.nHeight \u003d 0;\n        this.p1X \u003d 0;\n        this.p1Y \u003d 0;\n        this.p2X \u003d 0;\n        this.p2Y \u003d 0;\n        this.p3X \u003d 0;\n        this.p3Y \u003d 0;\n        this.p1Col \u003d 0;\n        this.p2Col \u003d 0;\n        this.slimeColours \u003d null;\n        this.slimeColours2 \u003d null;\n        this.slimeColText \u003d null;\n        this.slimeColAbbr \u003d null;\n        this.difficultyColours \u003d null;\n        this.difficultyText \u003d null;\n        this.difficulty \u003d 0;\n        this.p1OldX \u003d 0;\n        this.p1OldY \u003d 0;\n        this.p2OldX \u003d 0;\n        this.p2OldY \u003d 0;\n        this.p3OldY \u003d 0;\n        this.p1XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p2YV \u003d 0;\n        this.p3YV \u003d 0;\n        this.ballX \u003d 0;\n        this.ballY \u003d 0;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.ballOldX \u003d 0;\n        this.ballOldY \u003d 0;\n        this.screen \u003d null;\n        this.promptMsg \u003d null;\n        this.mousePressed \u003d false;\n        this.fCanChangeCol \u003d false;\n        this.fInPlay \u003d false;\n        this.p1Blink \u003d 0;\n        this.p2Blink \u003d 0;\n        this.fP1Touched \u003d false;\n        this.fP2Touched \u003d false;\n        this.gameThread \u003d null;\n        this.fEndGame \u003d false;\n        this.BALL_COL \u003d null;\n        this.COURT_COL \u003d null;\n        this.DAY_COL \u003d null;\n        this.NIGHT_COL \u003d null;\n        this.SKY_COL \u003d null;\n        this.bounces \u003d 0;\n        this.fEndOfOver \u003d false;\n        this.fHitBackWall \u003d false;\n        this.p1XMin \u003d 0;\n        this.p2XMin \u003d 0;\n        this.p2XMax \u003d 0;\n        this.ballXMax \u003d 0;\n        this.p1Touches \u003d 0;\n        this.ballCount \u003d 0;\n        this.postPos \u003d 0;\n        this.bowlingCrease \u003d 0;\n        this.runningCrease \u003d 0;\n        this.battingCrease \u003d 0;\n        this.p1Score \u003d 0;\n        this.p2Score \u003d 0;\n        this.inns \u003d 0;\n        this.wicketPenalty \u003d 0;\n        this.fNoBall \u003d false;\n        this.overs \u003d 0;\n        this.stillFrames \u003d 0;\n        this.buffer \u003d null;\n        this.thisBall \u003d 0;\n        this.thisOver \u003d null;\n        this.p1bxb \u003d null;\n        this.p2bxb \u003d null;\n        this.p1Hold \u003d false;\n        this.ballbowled \u003d false;\n        this.p1next \u003d false;\n        this.p2next \u003d false;\n        this.__wait \u003d 0;\n        this.p1ai \u003d false;\n        this.p2ai \u003d false;\n        this.balltype \u003d 0;\n        this.shottype \u003d 0;\n        this.AI_COL \u003d 0;\n        this.COMM_FOUR \u003d null;\n        this.COMM_FOURTOUCHED \u003d null;\n        this.COMM_SIX \u003d null;\n        this.COMM_SIXTOUCHED \u003d null;\n        this.COMM_STUMPED \u003d null;\n        this.COMM_RUNOUT \u003d null;\n        this.COMM_BOWLED \u003d null;\n        this.COMM_PLAYEDON \u003d null;\n        this.COMM_CAUGHT \u003d null;\n        this.COMM_CTBEHIND \u003d null;\n        this.COMM_OUT_GENERIC \u003d null;\n        this.p3X \u003d 1000 - (this.p1Diam / 2|0);\n        this.slimeColours \u003d [ShimmedColor.yellow, new ShimmedColor(0, 0, 128), new ShimmedColor(164, 164, 255), ShimmedColor.black, new ShimmedColor(0, 100, 0), new ShimmedColor(0, 162, 0), new ShimmedColor(0, 0, 210), new ShimmedColor(128, 78, 0), ShimmedColor.red, ShimmedColor.black];\n        this.slimeColours2 \u003d [new ShimmedColor(0, 100, 0), ShimmedColor.red, ShimmedColor.yellow, ShimmedColor.gray, ShimmedColor.white, ShimmedColor.yellow, ShimmedColor.yellow, new ShimmedColor(60, 160, 60), ShimmedColor.yellow, ShimmedColor.white];\n        this.slimeColText \u003d [\"Australia \", \"England \", \"India \", \"New Zealand \", \"Pakistan \", \"South Africa \", \"Sri Lanka \", \"West Indies \", \"Zimbabwe \", \"Computer\"];\n        this.slimeColAbbr \u003d [\"AUS\", \"ENG\", \"IND\", \"NZ\", \"PAK\", \"RSA\", \"SL\", \"WI\", \"ZIM\", \"AI\"];\n        this.difficultyColours \u003d [ShimmedColor.blue, ShimmedColor.green, ShimmedColor.red];\n        this.difficultyText \u003d [\"Grade\", \"Domestic\", \"International\"];\n        this.BALL_COL \u003d ShimmedColor.white;\n        this.COURT_COL \u003d new ShimmedColor(0, 160, 0);\n        this.DAY_COL \u003d new ShimmedColor(85, 85, 255);\n        this.NIGHT_COL \u003d new ShimmedColor(0, 0, 68);\n        this.SKY_COL \u003d this.DAY_COL;\n        this.fHitBackWall \u003d false;\n        this.postPos \u003d 1000 - this.p1Diam - 5;\n        this.bowlingCrease \u003d 450;\n        this.runningCrease \u003d 450;\n        this.battingCrease \u003d this.postPos - (this.p2Diam / 2|0) - 20;\n        this.inns \u003d 1;\n        this.wicketPenalty \u003d 5;\n        this.fNoBall \u003d false;\n        this.overs \u003d 5;\n        this.p1Hold \u003d false;\n        this.p1ai \u003d false;\n        this.p2ai \u003d false;\n        this.balltype \u003d -1;\n        this.shottype \u003d -1;\n        this.AI_COL \u003d 9;\n        this.COMM_FOUR \u003d [\"Along the carpet it goes for four.\", \"Back past the bowler for four.\", \"Picks the gap nicely and into the fence it goes for four.\", \"Shot!\", \"Four more added to the total.\", \"It\\\u0027s certainly a batsman\\\u0027s paradise out there today.\", \"... and the umpire waves his arm once more.\", \"Exactly not what the bowler had planned.\", \"Well it\\\u0027s bounced up off the rope and smacked some guy in the face!\"];\n        this.COMM_FOURTOUCHED \u003d [\"Terrible fielding effort there.\", \"The bowler won\\\u0027t be pleased with that effort.\", \"Well that should never have been a four.\"];\n        this.COMM_SIX \u003d [\"He\\\u0027s carving them up like a Christmas cake!\", \"That\\\u0027s come right orf the meat of the bat.\", \"He\\\u0027s hit that one very hored indeed.\", \"He\\\u0027s smacked that one.\", \"He\\\u0027s gone for it... it\\\u0027s gone all the way!\", \"Must be playing on a road out there today.\", \"Looks like he\\\u0027s chasing Andrew Symonds\\\u0027 record here...\"];\n        this.COMM_SIXTOUCHED \u003d [\"Oh no, he\\\u0027s done a Paul Reiffel!\", \"Well that\\\u0027s six more on top of the no ball, he can\\\u0027t be happy.\"];\n        this.COMM_STUMPED \u003d [\"Stumped him!\", \"A fine example of wicket keeping there. Excellent stuff.\", \"There goes the red light! What quick hands this keeper has!\"];\n        this.COMM_RUNOUT \u003d [\"He\\\u0027s run out! What a tragedy!\", \"... and there\\\u0027s the red light. He\\\u0027s out.\", \"Allan Donald would be pleased with that effort.\", \"Well the fielder\\\u0027s decided to chance his arm, and it\\\u0027s come off!\", \"The bails were off in a flash, he never had a chance.\", \"Poor calling there, he deserved to get out.\", \"Well what else do you expect if you run like Ranatunga?\"];\n        this.COMM_BOWLED \u003d [\"Bowled him neck and crop.\", \"Tremendous delivery, he really had no idea about that.\", \"What a marvellous ball!\", \"That\\\u0027s a ripsnorter of a ball!\", \"I think that\\\u0027s just knocked Joe the stumpcameraman out.\", \"Well the bowler\\\u0027s certainly had his weeties this morning.\", \"There\\\u0027s the death rattle.\", \"That\\\u0027s gotta be a contender for today\\\u0027s fastest ball.\", \"Straight through the gate. The batsman won\\\u0027t be pleased with that.\", \"Completely bamboozled.\", \"A wonderful spell of bowling, this.\"];\n        this.COMM_PLAYEDON \u003d [\"He\\\u0027s played on!\", \"A magnificent chop shot, oh wait, it\\\u0027s hit the stumps.\", \"He\\\u0027s done an Adam Gilchrist!\"];\n        this.COMM_CAUGHT \u003d [\"He\\\u0027s hit it straight down his throat.\", \"A safe pair of hands, he doesn\\\u0027t drop those.\", \"What a magnificent shot! No, he\\\u0027s been caught!\", \"A marvellous catch, that.\", \"... and he takes a straightforward catch.\", \"Well, they say \\\"catches win matches\\\".\", \"Caught, yes!\", \"Well, he\\\u0027s picked out the only fielder in front of the bat!\", \"Can\\\u0027t be happy with that shot.\", \"What a shame, we can\\\u0027t use the snickometer on that one it\\\u0027s so damned obvious.\"];\n        this.COMM_CTBEHIND \u003d [\"... the keeper gobbles up the catch.\", \"... and the snickometer shows that that\\\u0027s clearly out.\", \"Excellent line and length, he\\\u0027s got another edge.\", \"Yes, there was some bat in that, he\\\u0027s gone!\"];\n        this.COMM_OUT_GENERIC \u003d [\"Got him, yes!\", \"It\\\u0027s all happening here!\", \"A marvellous effort, that!\", \"He\\\u0027s out.\", \"Oh dear.\", \"Gone!\", \"What a magnificent fielding side this team is.\", \"Yes, another one! He\\\u0027s a hero, this man!\"];\n    }\n}\nSlimeCricket2[\"__class\"] \u003d \"SlimeCricket2\";\nSlimeCricket2[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\n\n\n\nclass ShimmedBufferedImage extends ShimmedImage {\n    public constructor(x : number, y : number, z : number) {\n        super();\n    }\n\n    public getSubimage(a : number, b : number, c : number, d : number) : ShimmedBufferedImage {\n        return null;\n    }\n}\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\n\n\nclass ShimmedFrame extends ShimmedElement {\n    public setTitle(s : string) {\n    }\n\n    public pack() {\n    }\n\n    public show() {\n    }\n\n    public dispose() {\n    }\n\n    public setLayout(g : ShimmedGridLayout) {\n    }\n}\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\n\n\nclass ShimmedTextField extends ShimmedElement {\n    public constructor(s : number) {\n        super();\n    }\n\n    public getText() : string {\n        return null;\n    }\n}\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\n\n\nclass ShimmedButton extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\n\n\nclass ShimmedPanel extends ShimmedElement {}\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\n\n\nclass ShimmedLabel extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n\n\n\n",
  "packageName": "_"
}