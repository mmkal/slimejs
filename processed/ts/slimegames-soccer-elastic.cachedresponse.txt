public class ShimmedSize {
	public int width;
	public int height;
}
public class ShimmedApplet {
	public ShimmedSize size() { return null; }
	public ShimmedImage createImage(int x, int y) { return null; }
	public void showStatus(String s) {}
	public void repaint() {}
	public ShimmedGraphics getGraphics() { return null; }
	public void requestFocus() {}
	public int getWidth() { return 0; }
	public int getHeight() { return 0; }
	public ShimmedDocumentBase getDocumentBase() { return null; }
	public ShimmedAppletContext getAppletContext() { return null; }
	public ShimmedURL getCodeBase() { return null; }
	public ShimmedAudioClip getAudioClip(ShimmedURL u, String s) { return null; }
	public ShimmedImage getImage(ShimmedURL u, String s) { return null; }
}
public class ShimmedColor {
	public static ShimmedColor yellow = null;
	public static ShimmedColor black = null;
	public static ShimmedColor red = null;
	public static ShimmedColor gray = null;
	public static ShimmedColor white = null;
	public static ShimmedColor blue = null;
	public static ShimmedColor green = null;
	public static ShimmedColor pink = null;
	public static ShimmedColor cyan = null;
	public static ShimmedColor lightGray = null;
	public static ShimmedColor darkGray = null;
	public static ShimmedColor orange = null;
	public ShimmedColor(int r, int g, int b) {}
}
public class ShimmedGraphics {
	public ShimmedFont getFont() { return null; }
	public void setFont(ShimmedFont f) {}
	public void setColor(ShimmedColor c) {}
	public void fillRect(int x, int y, int w, int h) {}
	public ShimmedFontMetrics getFontMetrics() { return null; }
	public void drawString(String s, int x, int y) {}
	public void drawImage(ShimmedImage i, int x, int y, Object o) {}
	public void drawOval(int x, int y, int w, int h) {}
	public void fillOval(int x, int y, int w, int h) {}
	public void fillArc(int x, int y, int w, int h, int s, int e) {}
	public void drawLine(int x, int y, int w, int h) {}
	public void drawRect(int x, int y, int w, int h) {}
	public void fillPolygon(int[] xs, int[] ys, int n) {}
	public void fillPolygon(ShimmedPolygon p) {}
	public void drawArc(int x, int y, int w, int h, int s, int e) {}
}
public class ShimmedImage {
	public ShimmedGraphics getGraphics() { return null; }
	public int getHeight(ShimmedApplet a) { return 0; }
}
public class ShimmedEvent {
	public int id;
	public int x;
	public int y;
	public int key;
	public ShimmedButton target;
	public static final int KEY_ACTION = 0;
	public static final int LEFT = 1;
	public static final int RIGHT = 2;
	public static final int UP = 3;
	public static final int DOWN = 4;
	public static final int KEY_ACTION_RELEASE = 5;
}
public class ShimmedFont {
	public String getName() { return null; }
	public ShimmedFont(String name, int w, int h) {}
}
public class ShimmedFontMetrics {
	public int getHeight() { return 0; }
	public int stringWidth(String s) { return 0; }
	public int getAscent() { return 0; }
}
public class ShimmedThread {
    public static void sleep(long ms) {}
    public static void sleep(long ms, boolean b) {}
    public ShimmedThread(ShimmedRunnable r) {}
    public void start() {}
    public void stop() {}
}
public interface ShimmedRunnable {}

public class ShimmedAppletContext {
	public void showDocument(ShimmedURL u) {}
	public void showDocument(ShimmedURL u, String s) {}
}
public class ShimmedDocumentBase {
	public String getHost() { return null; }
}
public class ShimmedURL { 
	public ShimmedURL(String s) {}
	public ShimmedInputStream openStream() { return null; }
}
public class ShimmedPrintStream {
	public Object print(Object s) { return null; }
	public Object println() { return null; }
	public Object println(Object s) { return null; }
}
public class ShimmedSystem {
	public static ShimmedPrintStream out = null;
	public static long currentTimeMillis() { return 0L; }
}
public class ShimmedBufferedImage extends ShimmedImage {
	public ShimmedBufferedImage(int x, int y, int z) {}
	public ShimmedBufferedImage getSubimage(int a, int b, int c, int d) { return null; }
}
public class ShimmedVector {
	public ShimmedVector(int n) {}
	public void removeAllElements() {}
	public Object get(int i) { return null; }
	public int size() { return 0; }
	public void add(int[] x) {}
}
public class ShimmedElement {
	public void add(ShimmedElement e) {}
}
public class ShimmedFrame extends ShimmedElement {
	public void setTitle(String s) {}
	public void pack() {}
	public void show() {}
	public void dispose() {}
	public void setLayout(ShimmedGridLayout g) {}
}
public class ShimmedTextField extends ShimmedElement {
	public ShimmedTextField(int s) {}
	public String getText() { return null; }
}
public class ShimmedButton extends ShimmedElement {
	public ShimmedButton(String s) {}
}
public class ShimmedPolygon {
	public ShimmedPolygon(int[] xs, int[] ys, int n) {}
}
public class ShimmedInputStream {
	public void close() {}
}
public class ShimmedBufferedReader {
	public ShimmedBufferedReader(ShimmedInputStreamReader i) {}
	public String readLine() { return null; }
	public void close() {}
}
public class ShimmedInputStreamReader {
	public ShimmedInputStreamReader(ShimmedInputStream is) {}
}
public class ShimmedPanel extends ShimmedElement {
}
public class ShimmedLabel extends ShimmedElement {
	public ShimmedLabel(String s) {}
}
public class ShimmedGridLayout {
	public ShimmedGridLayout(int x, int y) {}
}
public class ShimmedLong {
	public static long parseLong(String s) { return 0L; }
}
public class ShimmedChars {
	/** Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints. */
	public static char[] charCodeArray(String s) { return null; }
}
public class ShimmedImageObserver {

}
public class ShimmedRandom {
	public int nextInt(int m) { return 0; }
}
public class ShimmedAudioClip {
	public void play() {}
}
public class ShimmedStringBuffer {
	public ShimmedStringBuffer() {}
	public ShimmedStringBuffer(Object i) {}
	public ShimmedStringBuffer append(Object s) { return null; }
}

public class EndOfShimDeclarations{}

public class ElasticSlime extends ShimmedApplet implements ShimmedRunnable {
   private int nWidth;
   private int nHeight;
   private int p1Score;
   private int p2Score;
   private int p1X;
   private int p2X;
   private int p1Y;
   private int p2Y;
   private int p1Col;
   private int p2Col;
   private String[] slimeColText = new String[]{"Argentina", "Belgium", "Australia", "Iceland", "Cameroon", "P.R. of China", "Costa Rica", "Croatia", "Denmark", "Eucador", "Mexico", "France", "USA", "Italy", "Japan", "Russia", "Paraguay", "Poland", "Portugal", "Ireland", "Saudi Arabia", "Senegal", "Slovenia", "Spain", "Seth Efrica", "South Corea", "Sveden", "Tunisia", "Turkey", "Uruguay", "Brazil", "England", "Germany", "Night Elves"};
   private ShimmedColor darkRed = new ShimmedColor(128, 0, 0);
   private ShimmedColor darkGreen = new ShimmedColor(0, 128, 0);
   private ShimmedColor darkBlue = new ShimmedColor(0, 0, 128);
   private ShimmedColor[] slimaryCols;
   private ShimmedColor[] secondaryCols;
   private int p1OldX;
   private int p2OldX;
   private int p1OldY;
   private int p2OldY;
   private int p1XV;
   private int p2XV;
   private int p1YV;
   private int p2YV;
   private int ballX;
   private int ballY;
   private int ballVX;
   private int ballVY;
   private int ballOldX;
   private int ballOldY;
   private ShimmedGraphics screen;
   private String promptMsg;
   private int[][] replayData;
   private int replayPos;
   private int replayStart;
   private boolean mousePressed;
   private boolean fCanChangeCol;
   private boolean fInPlay;
   private int p1Blink;
   private int p2Blink;
   private boolean fP1Sticky;
   private boolean fP2Sticky;
   private boolean fP1Touched;
   private boolean fP2Touched;
   private int p1TouchingGoal;
   private int p2TouchingGoal;
   private ShimmedThread gameThread;
   private boolean fEndGame;
   private boolean fPlayOn;
   private int nScoreX;
   private long startTime;
   private long gameTime;
   private int scoringRun;
   private int frenzyCol;
   private int playOnTicks;
   private ShimmedImage backBuffer;
   private final int SMILE_DIFF;
   private final int DAMPING;
   private final int MAX_TICKS_TOUCHING_GOAL;
   private int JUMPVEL;
   private int SLIMEVEL;
   private int GRAVITY;
   private int gameLength;
   private boolean worldCup;
   private int worldCupRound;
   private int Speed;
   private boolean fExtraTime;
   private boolean fGoldenGoal;
   private boolean fSuperSlime;
   private int dustX;
   private int dustY;
   private boolean doubleBuffered;
   private int NUM_PARTICLES;
   private int particle_size;
   private int[] particle_x;
   private int[] particle_y;
   private float[] particle_weight;
   private int[] pointsX;
   private int[] pointsY;

   public void initStuff() {
      this.fEndGame = true;
      this.p1X = 200;
      this.p1Y = 0;
      this.p2X = 800;
      this.p2Y = 0;
      this.p1XV = 0;
      this.p1YV = 0;
      this.p2XV = 0;
      this.p2YV = 0;
      this.p1Score = 0;
      this.p2Score = 0;
      this.ballOldX = this.ballX = 500;
      this.ballOldY = this.ballY = 200;
      this.ballVX = 0;
      this.ballVY = 0;
      this.replayStart = this.replayPos = 0;
      this.fP1Touched = this.fP2Touched = false;
      this.playOnTicks = 10;
      this.fPlayOn = false;
      this.fExtraTime = false;
      this.fGoldenGoal = false;
      this.JUMPVEL = !this.fSuperSlime?31:65;
      this.SLIMEVEL = !this.fSuperSlime?8:16;
      this.GRAVITY = !this.fSuperSlime?2:8;
   }

   private void drawButtons() {
      String[] buttons = new String[]{"1 minute", "2 minutes", "4 minutes", "8 minutes", "World Cup"};
      ShimmedFontMetrics fm = this.screen.getFontMetrics();
      ShimmedColor darkBlue = new ShimmedColor(0, 0, 128);

      for(int i = 0; i < 5; ++i) {
         this.screen.setColor(darkBlue);
         this.screen.fillRect((2 * i + 1) * this.nWidth / 10 - this.nWidth / 12, this.nHeight * 2 / 10, this.nWidth / 6, this.nHeight / 10);
         this.screen.setColor(ShimmedColor.white);
         this.screen.drawString(buttons[i], (2 * i + 1) * this.nWidth / 10 - fm.stringWidth(buttons[i]) / 2, this.nHeight * 5 / 20 + fm.getHeight() / 2);
      }

      this.flip();
   }

   private boolean testButton(int x, int y) {
      for(int i = 0; i < 5; ++i) {
         if(x > (2 * i + 1) * this.nWidth / 10 - this.nWidth / 12 && x < (2 * i + 1) * this.nWidth / 10 + this.nWidth / 12 && y > this.nHeight * 2 / 10 && y < this.nHeight * 3 / 10) {
            if(i == 4) {
               this.gameLength = 120000;
               this.worldCup = true;
            } else {
               this.gameLength = (1 << i) * 60000;
               this.worldCup = false;
            }

            return true;
         }
      }

      return false;
   }

   public boolean handleEvent(ShimmedEvent event) {
      switch(event.id) {
      case 401:
      case 403:
         if(this.fCanChangeCol) {
            switch(event.key) {
            case 54:
               this.fSuperSlime = !this.fSuperSlime;
               this.repaint();
               break;
            case 73:
            case 105:
            case 1004:
               do {
                  this.p2Col = this.p2Col != 0?this.p2Col - 1:this.slimaryCols.length - 1;
               } while(this.p1Col == this.p2Col);

               this.drawScores();
               this.repaint();
               break;
            case 75:
            case 107:
            case 1005:
               do {
                  this.p2Col = this.p2Col == this.slimaryCols.length - 1?0:this.p2Col + 1;
               } while(this.p2Col == this.p1Col);

               this.drawScores();
               this.repaint();
               break;
            case 83:
            case 115:
               do {
                  this.p1Col = this.p1Col == this.slimaryCols.length - 1?0:this.p1Col + 1;
               } while(this.p1Col == this.p2Col);

               this.drawScores();
               this.repaint();
               break;
            case 87:
            case 119:
               while(true) {
                  this.p1Col = this.p1Col != 0?this.p1Col - 1:this.slimaryCols.length - 1;
                  if(this.p1Col != this.p2Col) {
                     this.drawScores();
                     this.repaint();
                     break;
                  }
               }
            }
         }

         if(!this.fEndGame) {
            switch(event.key) {
            case 32:
               this.mousePressed = true;
               return false;
            case 65:
            case 97:
               this.p1XV = -this.SLIMEVEL;
               return false;
            case 66:
            case 98:
               this.toggleBuffering();
               return false;
            case 68:
            case 100:
               this.SLIMEVEL = !this.fSuperSlime?8:16;
               if(this.Speed > 5) {
                  ;
               }

               --this.Speed;
               this.SLIMEVEL = !this.fSuperSlime?this.Speed / 2:this.Speed;
               this.p1XV = this.SLIMEVEL;
               return false;
            case 73:
            case 105:
            case 1004:
               if(this.p2Y == 0 && !this.worldCup) {
                  this.p2YV = this.JUMPVEL;
               }

               return false;
            case 74:
            case 106:
            case 1006:
               this.SLIMEVEL = !this.fSuperSlime?8:16;
               if(this.Speed > 5) {
                  ;
               }

               --this.Speed;
               this.SLIMEVEL = !this.fSuperSlime?this.Speed / 2:this.Speed;
               this.p2XV = this.SLIMEVEL;
               if(!this.worldCup) {
                  this.p2XV = -this.SLIMEVEL;
               }

               return false;
            case 75:
            case 107:
            case 1005:
               if(!this.worldCup) {
                  this.fP2Sticky = true;
               }

               return false;
            case 76:
            case 108:
            case 1007:
               if(!this.worldCup) {
                  this.p2XV = this.SLIMEVEL;
               }

               return false;
            case 83:
            case 115:
               this.fP1Sticky = true;
               return false;
            case 87:
            case 119:
               if(this.p1Y == 0) {
                  this.p1YV = this.JUMPVEL;
               }
            }
         }
         break;
      case 402:
      case 404:
         switch(event.key) {
         case 65:
         case 76:
         case 97:
         case 108:
         case 1007:
         default:
            return false;
         case 68:
         case 100:
            this.SLIMEVEL = !this.fSuperSlime?8:16;
            this.Speed = 16;
            if(this.p1X > 0) {
               this.p1XV = -50;
            }

            return false;
         case 74:
         case 106:
         case 1006:
            this.SLIMEVEL = !this.fSuperSlime?8:16;
            this.Speed = 16;
            if(this.p2X > 0) {
               this.p2XV = 50;
            }

            return false;
         case 75:
         case 107:
         case 1005:
            this.fP2Sticky = false;
            return false;
         case 83:
         case 115:
            this.fP1Sticky = false;
            return false;
         }
      case 501:
         this.mousePressed = true;
         if(!this.fInPlay && this.testButton(event.x, event.y)) {
            this.fEndGame = false;
            this.fInPlay = true;
            this.p1X = 200;
            this.p1Y = 0;
            this.p2X = 800;
            this.p2Y = 0;
            this.p1XV = 0;
            this.p1YV = 0;
            this.p2XV = 0;
            this.p2YV = 0;
            this.ballX = 500;
            this.ballY = 200;
            this.ballOldX = 500;
            this.ballOldY = 200;
            this.ballVX = 0;
            this.ballVY = 0;
            this.p1Score = 0;
            this.p2Score = 0;
            this.promptMsg = "";
            this.paint(this.getGraphics());

            try {
               ShimmedThread.sleep(100L);
            } catch (Exception var4) {
               ;
            }

            this.gameThread = new ShimmedThread(this);
            this.gameThread.start();
         }
         break;
      case 503:
         this.showStatus("Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
         this.requestFocus();
      }

      return false;
   }

   private void DrawSlimers() {
      int k1 = this.nWidth / 10;
      int j2 = this.nHeight / 10;
      int i3 = this.nWidth / 50;
      int j3 = this.nHeight / 25;
      int k3 = this.ballX * this.nWidth / 1000;
      int l3 = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      int i = this.p1X * this.nWidth / 1000 - k1 / 2;
      int l = 7 * this.nHeight / 10 - this.p1Y * this.nHeight / 1000;
      this.screen.setColor(ShimmedColor.white);
      this.screen.drawLine(i, l + 20, 0, l + 20);
      this.screen.setColor(ShimmedColor.blue);
      this.screen.drawLine(i, l - 1 + 20, 0, l - 1 + 20);
      this.screen.drawLine(i, l + 1 + 20, 0, l + 1 + 20);
      this.screen.drawLine(i, l - 2 + 20, 0, l - 2 + 20);
      this.screen.drawLine(i, l + 2 + 20, 0, l + 2 + 20);
      this.screen.drawLine(i, l - 3 + 20, 0, l - 3 + 20);
      this.screen.drawLine(i, l + 3 + 20, 0, l + 3 + 20);
      this.screen.drawLine(i, l - 4 + 20, 0, l - 4 + 20);
      this.screen.drawLine(i, l + 4 + 20, 0, l + 4 + 20);
      this.screen.drawLine(i, l - 5 + 20, 0, l - 5 + 20);
      this.screen.drawLine(i, l + 5 + 20, 0, l + 5 + 20);
      this.screen.drawLine(i, l - 6 + 20, 0, l - 6 + 20);
      this.screen.drawLine(i, l + 6 + 20, 0, l + 6 + 20);
      this.screen.drawLine(i, l - 7 + 20, 0, l - 7 + 20);
      this.screen.drawLine(i, l + 7 + 20, 0, l + 7 + 20);
      this.screen.drawLine(i, l - 8 + 20, 0, l - 8 + 20);
      this.screen.drawLine(i, l + 8 + 20, 0, l + 8 + 20);
      this.screen.drawLine(i, l - 9 + 20, 0, l - 9 + 20);
      this.screen.drawLine(i, l + 9 + 20, 0, l + 9 + 20);
      this.screen.drawLine(i, l - 10 + 20, 0, l - 10 + 20);
      this.screen.drawLine(i, l + 10 + 20, 0, l + 10 + 20);
      i = this.p1OldX * this.nWidth / 1000 - k1 / 2;
      l = 7 * this.nHeight / 10 - this.p1OldY * this.nHeight / 1000;
      this.screen.setColor(ShimmedColor.blue);
      this.screen.fillRect(i, l, k1, j2);
      i = this.p2OldX * this.nWidth / 1000 - k1 / 2;
      l = 7 * this.nHeight / 10 - this.p2OldY * this.nHeight / 1000;
      this.screen.setColor(ShimmedColor.blue);
      this.screen.fillRect(i, l, k1, j2);
      if(!this.fEndGame) {
         this.MoveBall();
      }

      i = this.p1X * this.nWidth / 1000 - k1 / 2;
      l = 7 * this.nHeight / 10 - this.p1Y * this.nHeight / 1000;
      this.screen.setColor(!this.fSuperSlime?this.slimaryCols[this.p1Col]:this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
      this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
      this.screen.setColor(this.secondaryCols[this.p1Col]);
      this.pointsX[0] = this.pointsX[2] = i + k1 / 2;
      this.pointsX[1] = i + k1 * 2 / 5;
      this.pointsX[3] = i + k1 / 8;
      this.pointsY[0] = l;
      this.pointsY[1] = this.pointsY[3] = l + j2 / 2;
      this.pointsY[2] = l + j2;
      this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
      int l4 = this.p1X + 38;
      int i5 = this.p1Y - 60;
      i = l4 * this.nWidth / 1000;
      l = 7 * this.nHeight / 10 - i5 * this.nHeight / 1000;
      int i4 = i - k3;
      int j4 = l - l3;
      int k4 = (int)Math.sqrt((double)(i4 * i4 + j4 * j4));
      boolean flag = Math.random() < 0.01D;
      if(flag) {
         this.p1Blink = 5;
      }

      if(this.p1Blink == 0) {
         this.screen.setColor(ShimmedColor.white);
         this.screen.fillOval(i - i3, l - j3, i3, j3);
         if(k4 > 0 && !flag) {
            this.screen.setColor(ShimmedColor.black);
            this.screen.fillOval(i - 4 * i4 / k4 - 3 * i3 / 4, l - 4 * j4 / k4 - 3 * j3 / 4, i3 / 2, j3 / 2);
         }
      } else {
         --this.p1Blink;
      }

      int i2;
      int l2;
      int k;
      int j1;
      int k5;
      if(this.p1Score > this.p2Score + 2) {
         i2 = this.p1X * this.nWidth / 1000;
         l2 = 7 * this.nHeight / 10 - (this.p1Y - 40) * this.nHeight / 1000;
         k = this.nWidth / 20;
         j1 = this.nHeight / 20;
         k5 = 0;

         do {
            this.screen.setColor(ShimmedColor.black);
            this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
            ++k5;
         } while(k5 < 3);
      }

      i = this.p2X * this.nWidth / 1000 - k1 / 2;
      l = 7 * this.nHeight / 10 - this.p2Y * this.nHeight / 1000;
      this.screen.setColor(ShimmedColor.white);
      this.screen.drawLine(i, l + 20, 1000, l + 20);
      this.screen.setColor(ShimmedColor.blue);
      this.screen.drawLine(i, l - 1 + 20, 1000, l - 1 + 20);
      this.screen.drawLine(i, l + 1 + 20, 1000, l + 1 + 20);
      this.screen.drawLine(i, l - 2 + 20, 1000, l - 2 + 20);
      this.screen.drawLine(i, l + 2 + 20, 1000, l + 2 + 20);
      this.screen.drawLine(i, l - 3 + 20, 1000, l - 3 + 20);
      this.screen.drawLine(i, l + 3 + 20, 1000, l + 3 + 20);
      this.screen.drawLine(i, l - 4 + 20, 1000, l - 4 + 20);
      this.screen.drawLine(i, l + 4 + 20, 1000, l + 4 + 20);
      this.screen.drawLine(i, l - 5 + 20, 1000, l - 5 + 20);
      this.screen.drawLine(i, l + 5 + 20, 1000, l + 5 + 20);
      this.screen.drawLine(i, l - 6 + 20, 1000, l - 6 + 20);
      this.screen.drawLine(i, l + 6 + 20, 1000, l + 6 + 20);
      this.screen.drawLine(i, l - 7 + 20, 1000, l - 7 + 20);
      this.screen.drawLine(i, l + 7 + 20, 1000, l + 7 + 20);
      this.screen.drawLine(i, l - 8 + 20, 1000, l - 8 + 20);
      this.screen.drawLine(i, l + 8 + 20, 1000, l + 8 + 20);
      this.screen.drawLine(i, l - 9 + 20, 1000, l - 9 + 20);
      this.screen.drawLine(i, l + 9 + 20, 1000, l + 9 + 20);
      this.screen.drawLine(i, l - 10 + 20, 1000, l - 10 + 20);
      this.screen.drawLine(i, l + 10 + 20, 1000, l + 10 + 20);
      this.screen.setColor(!this.fSuperSlime?this.slimaryCols[this.p2Col]:this.slimaryCols[this.frenzyCol = (this.frenzyCol + 1) % this.slimaryCols.length]);
      this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
      this.screen.setColor(this.secondaryCols[this.p2Col]);
      this.pointsX[0] = this.pointsX[2] = i + k1 / 2;
      this.pointsX[1] = i + k1 * 3 / 5;
      this.pointsX[3] = i + k1 * 7 / 8;
      this.pointsY[0] = l;
      this.pointsY[1] = this.pointsY[3] = l + j2 / 2;
      this.pointsY[2] = l + j2;
      this.screen.fillPolygon(this.pointsX, this.pointsY, 4);
      l4 = this.p2X - 18;
      i5 = this.p2Y - 60;
      i = l4 * this.nWidth / 1000;
      l = 7 * this.nHeight / 10 - i5 * this.nHeight / 1000;
      i4 = i - k3;
      j4 = l - l3;
      k4 = (int)Math.sqrt((double)(i4 * i4 + j4 * j4));
      flag = Math.random() < 0.01D;
      if(flag) {
         this.p2Blink = 5;
      }

      if(this.p2Blink == 0) {
         this.screen.setColor(!flag?ShimmedColor.white:ShimmedColor.gray);
         this.screen.fillOval(i - i3, l - j3, i3, j3);
         if(k4 > 0 && !flag) {
            this.screen.setColor(ShimmedColor.black);
            this.screen.fillOval(i - 4 * i4 / k4 - 3 * i3 / 4, l - 4 * j4 / k4 - 3 * j3 / 4, i3 / 2, j3 / 2);
         }
      } else {
         --this.p2Blink;
      }

      if(this.p2Score > this.p1Score + 2) {
         i2 = this.nWidth / 20;
         l2 = this.nHeight / 20;
         k = this.p2X * this.nWidth / 1000 - i2;
         j1 = 7 * this.nHeight / 10 - (this.p2Y - 40) * this.nHeight / 1000;
         k5 = 0;

         do {
            this.screen.setColor(ShimmedColor.black);
            this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
            ++k5;
         } while(k5 < 3);
      }

      if(this.p1X < 500) {
         this.drawDust();
      }

   }

   private void drawDust() {
   }

   public void paint(ShimmedGraphics g) {
      this.nWidth = this.size().width;
      this.nHeight = this.size().height;
      this.screen.setColor(ShimmedColor.blue);
      this.screen.fillRect(0, 0, this.nWidth, 4 * this.nHeight / 5);
      this.screen.setColor(ShimmedColor.gray);
      this.screen.fillRect(0, 4 * this.nHeight / 5, this.nWidth, this.nHeight / 5);
      this.screen.setColor(ShimmedColor.white);
      this.drawScores();
      if(!this.fInPlay) {
         this.DrawSlimers();
         this.drawButtons();
      }

      this.DrawGoals();
      this.drawPrompt();
      if(!this.fInPlay) {
         ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
         this.screen.setColor(ShimmedColor.white);
         if(this.fSuperSlime) {
            this.screen.drawString("Super Elastic Soccer Slime!", this.nWidth / 2 - fontmetrics.stringWidth("Super Soccer Slime!") / 2, this.nHeight / 2 - fontmetrics.getHeight());
         } else {
            this.screen.drawString("Elastic Soccer Slime!", this.nWidth / 2 - fontmetrics.stringWidth("Soccer Slime!") / 2, this.nHeight / 2 - fontmetrics.getHeight());
         }

         this.screen.setColor(ShimmedColor.white);
         fontmetrics = this.screen.getFontMetrics();
         this.screen.drawString("Written by Quin Pendragon + Anonymous Tipster", this.nWidth / 2 - fontmetrics.stringWidth("Written by Quin Pendragon + Anonymous Tipster") / 2, this.nHeight / 2 + fontmetrics.getHeight() * 2);
      }

      this.flip();
   }

   public void destroy() {
      this.gameThread.stop();
      this.gameThread = null;
   }

   private void ReplayFrame(int i, int j, int k, int l, int i1, boolean flag) {
      if(flag) {
         this.ballX = -1000;
         this.ballOldX = 500;
         this.ballY = -1000;
         this.ballOldY = 500;
         this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
      } else {
         int j1 = i == 0?199:i - 1;
         this.p1OldX = this.replayData[j1][0];
         this.p1OldY = this.replayData[j1][1];
         this.p2OldX = this.replayData[j1][2];
         this.p2OldY = this.replayData[j1][3];
         if(i == 0) {
            this.ballOldX = 500;
            this.ballOldY = 200;
         } else {
            this.ballOldX = this.replayData[j1][4];
            this.ballOldY = this.replayData[j1][5];
         }
      }

      this.p1X = this.replayData[i][0];
      this.p1Y = this.replayData[i][1];
      this.p2X = this.replayData[i][2];
      this.p2Y = this.replayData[i][3];
      this.ballX = this.replayData[i][4];
      this.ballY = this.replayData[i][5];
      this.p1Col = this.replayData[i][6];
      this.p2Col = this.replayData[i][7];
      this.ballVX = 0;
      this.ballVY = 1;
      if(i / 10 % 2 > 0) {
         this.screen.setColor(ShimmedColor.red);
         this.screen.drawString("Replay...", j, k);
      } else {
         this.screen.setColor(ShimmedColor.blue);
         this.screen.fillRect(j, k - i1, l, i1 * 2);
      }

      this.DrawSlimers();
      this.DrawGoals();

      try {
         ShimmedThread.sleep(20L);
      } catch (InterruptedException var9) {
         ;
      }
   }

   private String MakeTime(long l) {
      long l1 = l / 10L % 100L;
      long l2 = l / 1000L % 60L;
      long l3 = l / 60000L % 60L;
      String s = "";
      if(l3 < 10L) {
         s = s + "0";
      }

      s = s + l3;
      s = s + ":";
      if(l2 < 10L) {
         s = s + "0";
      }

      s = s + l2;
      s = s + ":";
      if(l1 < 10L) {
         s = s + "0";
      }

      s = s + l1;
      return s;
   }

   private void MoveSlimers() {
      if(this.worldCup) {
         switch(this.worldCupRound) {
         case 0:
            this.controlP2v0();
            break;
         case 1:
            this.controlP2v1();
            break;
         case 2:
            this.controlP2v2();
            break;
         case 3:
            this.controlP2v3();
         }
      }

      this.p1X += this.p1XV;
      if(this.p1X < 50) {
         this.p1X = 50;
      }

      if(this.p1X > 950) {
         this.p1X = 950;
      }

      if(this.p1YV != 0) {
         this.p1Y += this.p1YV -= this.GRAVITY;
         if(this.p1Y < 0) {
            this.p1Y = 0;
            this.p1YV = 0;
         }
      }

      this.p2X += this.p2XV;
      if(this.p2X > 950) {
         this.p2X = 950;
      }

      if(this.p2X < 50) {
         this.p2X = 50;
      }

      if(this.p2YV != 0) {
         this.p2Y += this.p2YV -= this.GRAVITY;
         if(this.p2Y < 0) {
            this.p2Y = 0;
            this.p2YV = 0;
         }
      }

   }

   public ElasticSlime() {
      this.slimaryCols = new ShimmedColor[]{ShimmedColor.cyan, ShimmedColor.red, ShimmedColor.green, ShimmedColor.white, this.darkGreen, ShimmedColor.white, this.darkRed, this.darkRed, new ShimmedColor(119, 41, 28), ShimmedColor.yellow, ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(128, 128, 255), this.darkBlue, ShimmedColor.white, ShimmedColor.red, ShimmedColor.white, new ShimmedColor(119, 41, 28), ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(185, 30, 2), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(252, 239, 82), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(16, 180, 180), new ShimmedColor(241, 245, 71), new ShimmedColor(230, 230, 230), ShimmedColor.white, ShimmedColor.blue};
      this.secondaryCols = new ShimmedColor[]{ShimmedColor.white, ShimmedColor.black, ShimmedColor.yellow, new ShimmedColor(128, 128, 255), ShimmedColor.red, ShimmedColor.red, this.darkBlue, ShimmedColor.white, ShimmedColor.white, this.darkBlue, ShimmedColor.green, ShimmedColor.blue, this.darkBlue, ShimmedColor.white, ShimmedColor.white, ShimmedColor.blue, ShimmedColor.white, ShimmedColor.red, this.darkGreen, ShimmedColor.white, new ShimmedColor(128, 255, 128), new ShimmedColor(255, 128, 0), this.darkGreen, this.darkBlue, new ShimmedColor(13, 131, 10), ShimmedColor.white, ShimmedColor.blue, ShimmedColor.red, ShimmedColor.white, ShimmedColor.black, new ShimmedColor(7, 177, 33), ShimmedColor.red, ShimmedColor.black, ShimmedColor.blue};
      this.frenzyCol = 0;
      this.SMILE_DIFF = 2;
      this.DAMPING = 7;
      this.MAX_TICKS_TOUCHING_GOAL = 600000000;
      this.worldCup = false;
      this.worldCupRound = 0;
      this.Speed = 16;
      this.dustX = 0;
      this.dustY = 0;
      this.NUM_PARTICLES = 100;
      this.particle_size = 1;
      this.particle_x = new int[this.NUM_PARTICLES];
      this.particle_y = new int[this.NUM_PARTICLES];
      this.particle_weight = new float[this.NUM_PARTICLES];
      this.pointsX = new int[0];
      this.pointsY = new int[0];
      this.p2Col = 1;
      this.replayData = new int[200][8];
   }

   private void MoveBall() {
      int k = 30 * this.nHeight / 1000;
      int i = this.ballOldX * this.nWidth / 1000;
      int j = 4 * this.nHeight / 5 - this.ballOldY * this.nHeight / 1000;
      this.screen.setColor(ShimmedColor.blue);
      this.screen.fillOval(i - k, j - k, k * 2, k * 2);
      this.ballY += --this.ballVY;
      this.ballX += this.ballVX;
      if(!this.fEndGame) {
         int l1 = (this.ballX - this.p1X) * 2;
         int i2 = this.ballY - this.p1Y;
         int j2 = l1 * l1 + i2 * i2;
         int k2 = this.ballVX - this.p1XV;
         int l2 = this.ballVY - this.p1YV;
         int i1;
         int k1;
         if(i2 > 0 && j2 < 15625 && j2 > 25) {
            i1 = (int)Math.sqrt((double)j2);
            k1 = (l1 * k2 + i2 * l2) / i1;
            this.ballX = this.p1X + l1 * 63 / i1;
            this.ballY = this.p1Y + i2 * 125 / i1;
            if(k1 <= 0) {
               if(!this.fP1Sticky) {
                  this.ballVY += this.p1YV - 2 * i2 * k1 / i1;
                  this.ballVX += (this.p1XV - 2 * l1 * k1 / i1) * 7 / 10;
               } else {
                  this.ballVX = 0;
                  this.ballVY = 0;
               }

               if(this.ballVX < -15) {
                  this.ballVX = -15;
               }

               if(this.ballVX > 15) {
                  this.ballVX = 15;
               }

               if(this.ballVY < -22) {
                  this.ballVY = -22;
               }

               if(this.ballVY > 22) {
                  this.ballVY = 22;
               }
            }

            this.fP1Touched = true;
         }

         l1 = (this.ballX - this.p2X) * 2;
         i2 = this.ballY - this.p2Y;
         j2 = l1 * l1 + i2 * i2;
         k2 = this.ballVX - this.p2XV;
         l2 = this.ballVY - this.p2YV;
         if(i2 > 0 && j2 < 15625 && j2 > 25) {
            i1 = (int)Math.sqrt((double)j2);
            k1 = (l1 * k2 + i2 * l2) / i1;
            this.ballX = this.p2X + l1 * 63 / i1;
            this.ballY = this.p2Y + i2 * 125 / i1;
            if(k1 <= 0) {
               if(!this.fP2Sticky) {
                  this.ballVX += (this.p2XV - 2 * l1 * k1 / i1) * 7 / 10;
                  this.ballVY += this.p2YV - 2 * i2 * k1 / i1;
               } else {
                  this.ballVX = 0;
                  this.ballVY = 0;
               }

               if(this.ballVX < -15) {
                  this.ballVX = -15;
               }

               if(this.ballVX > 15) {
                  this.ballVX = 15;
               }

               if(this.ballVY < -22) {
                  this.ballVY = -22;
               }

               if(this.ballVY > 22) {
                  this.ballVY = 22;
               }
            }

            this.fP2Touched = true;
         }

         if(this.ballX < 15) {
            this.ballX = 15;
            this.ballVX = -this.ballVX;
         }

         if(this.ballX > 985) {
            this.ballX = 985;
            this.ballVX = -this.ballVX;
         }

         if(this.ballX <= 50 || this.ballX >= 950) {
            if(this.ballY > 200 && this.ballOldY < 200 || this.ballY < 200 && this.ballOldY >= 200) {
               this.ballY = 200;
               this.ballVY *= -1;
            }

            if(this.ballY > 180 && this.ballY < 220) {
               if(this.ballX > 40 && this.ballX < 50 && this.ballVX < 0) {
                  this.ballX = 50;
                  this.ballVX *= -1;
               }

               if(this.ballX < 960 && this.ballX > 950 && this.ballVX > 0) {
                  this.ballX = 950;
                  this.ballVX *= -1;
               }
            }
         }

         if(this.ballY < 34) {
            this.ballY = 34;
            this.ballVY = -this.ballVY * 7 / 10;
            this.ballVX = this.ballVX * 7 / 10;
         }
      }

      i = this.ballX * this.nWidth / 1000;
      j = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      this.screen.setColor(ShimmedColor.yellow);
      this.screen.fillOval(i - k, j - k, k * 2, k * 2);
   }

   private void DrawGoals() {
      this.screen.setColor(ShimmedColor.white);
      this.screen.fillRect(this.nWidth / 20, 4 * this.nHeight / 5 - 200 * this.nHeight / 1000, 5, 200 * this.nHeight / 1000);
      this.screen.fillRect(this.nWidth - this.nWidth / 20 - 5, 4 * this.nHeight / 5 - 200 * this.nHeight / 1000, 5, 200 * this.nHeight / 1000);
      this.screen.fillRect(0, 4 * this.nHeight / 5 + 2, this.nWidth / 10, 2);
      this.screen.fillRect(this.nWidth * 9 / 10, 4 * this.nHeight / 5 + 2, this.nWidth / 10, 2);

      int p1TickX;
      for(p1TickX = 0; p1TickX < this.nWidth / 20; p1TickX += 5) {
         this.screen.drawLine(p1TickX, 4 * this.nHeight / 5 - 200 * this.nHeight / 1000, p1TickX, 4 * this.nHeight / 5);
         this.screen.drawLine(this.nWidth - p1TickX, 4 * this.nHeight / 5 - 200 * this.nHeight / 1000, this.nWidth - p1TickX, 4 * this.nHeight / 5);
      }

      for(p1TickX = 4 * this.nHeight / 5 - this.nHeight / 5; p1TickX < 4 * this.nHeight / 5; p1TickX += 5) {
         this.screen.drawLine(0, p1TickX, this.nWidth / 20, p1TickX);
         this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - this.nWidth / 20, p1TickX);
      }

      p1TickX = (600000000 - this.p1TouchingGoal) * this.nWidth / 1200000000;
      this.screen.setColor(this.secondaryCols[this.p1Col]);
      this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);
      this.screen.setColor(ShimmedColor.gray);
      this.screen.fillRect(p1TickX, this.nHeight - 5, this.nWidth / 2 - p1TickX, 5);
      int p2TickX = this.nWidth - (600000000 - this.p2TouchingGoal) * this.nWidth / 1200000000;
      this.screen.setColor(this.secondaryCols[this.p2Col]);
      this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);
      this.screen.setColor(ShimmedColor.gray);
      this.screen.fillRect(this.nWidth / 2, this.nHeight - 5, p2TickX - this.nWidth / 2, 5);
   }

   private void DrawStatus() {
      ShimmedGraphics g = this.screen;
      ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
      String s = null;
      String time = this.MakeTime(this.gameTime);
      int i = this.nHeight / 20;
      int k = 0;
      int kt = fontmetrics.stringWidth(time);
      if(this.worldCup) {
         switch(this.worldCupRound) {
         case 1:
            s = "Quarter Finals";
            break;
         case 2:
            s = "Semi-Finals";
            break;
         case 3:
            s = "Final";
            break;
         default:
            s = "Qualifying";
         }

         if(this.fGoldenGoal) {
            s = s + " [Golden Goal]";
         } else if(this.fExtraTime) {
            s = s + " [Extra Time]";
         }

         k = fontmetrics.stringWidth(s);
      }

      int mw = k <= kt?kt:k;
      g.setColor(ShimmedColor.blue);
      g.fillRect(this.nWidth / 2 - mw / 2 - 5, 0, mw + 10, i + 22);
      g.setColor(ShimmedColor.white);
      this.screen.drawString(time, this.nWidth / 2 - kt / 2, fontmetrics.getAscent() + 20);
      if(s != null) {
         this.screen.drawString(s, this.nWidth / 2 - k / 2, fontmetrics.getAscent() + 20 - fontmetrics.getHeight());
      }

   }

   public void drawPrompt() {
      this.screen.setColor(ShimmedColor.gray);
      this.screen.fillRect(0, 4 * this.nHeight / 5 + 6, this.nWidth, this.nHeight / 5 - 10);
      this.drawPrompt(this.promptMsg, 0);
   }

   public void drawPrompt(String s, int i) {
      ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
      this.screen.setColor(ShimmedColor.lightGray);
      this.screen.drawString(s, (this.nWidth - fontmetrics.stringWidth(s)) / 2, this.nHeight * 4 / 5 + fontmetrics.getHeight() * (i + 1) + 10);
   }

   private void promptBox(String msg1, String msg2) {
      ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
      int len1 = fontmetrics.stringWidth(msg1);
      int len2 = fontmetrics.stringWidth(msg2);
      int maxlen = len1 <= len2?len2:len1;
      this.screen.setColor(ShimmedColor.darkGray);
      this.screen.fillRect(this.nWidth / 2 - maxlen / 2 - 20, this.nHeight * 2 / 5, maxlen + 40, this.nHeight / 5);
      this.screen.setColor(ShimmedColor.white);
      this.screen.drawString(msg1, this.nWidth / 2 - len1 / 2, this.nHeight * 9 / 20);
      this.screen.drawString(msg2, this.nWidth / 2 - len2 / 2, this.nHeight * 11 / 20);
      this.flip();
   }

   private void SaveReplayData() {
      this.replayData[this.replayPos][0] = this.p1X;
      this.replayData[this.replayPos][1] = this.p1Y;
      this.replayData[this.replayPos][2] = this.p2X;
      this.replayData[this.replayPos][3] = this.p2Y;
      this.replayData[this.replayPos][4] = this.ballX;
      this.replayData[this.replayPos][5] = this.ballY;
      this.replayData[this.replayPos][6] = this.p1Col;
      this.replayData[this.replayPos][7] = this.p2Col;
      ++this.replayPos;
      if(this.replayPos >= 200) {
         this.replayPos = 0;
      }

      if(this.replayStart == this.replayPos) {
         ++this.replayStart;
      }

      if(this.replayStart >= 200) {
         this.replayStart = 0;
      }

   }

   private void drawScores() {
      ShimmedGraphics g = this.screen;
      int k = this.nHeight / 20;
      ShimmedFontMetrics fm = this.screen.getFontMetrics();
      int i = fm.stringWidth("Replay...");
      g.setColor(ShimmedColor.blue);
      g.fillRect(0, 0, this.nWidth, k + 22);
      g.setColor(ShimmedColor.white);
      g.drawString(this.slimeColText[this.p1Col] + " : " + this.p1Score, this.nWidth / 20, k);
      String p2ScrStr = this.p2Score + " : " + this.slimeColText[this.p2Col];
      g.drawString(p2ScrStr, this.nWidth - this.nWidth / 20 - fm.stringWidth(p2ScrStr), k);
   }

   public boolean checkScored() {
      if(this.ballY >= 200 || this.ballX >= 40 && this.ballX <= 960) {
         return false;
      } else {
         this.nScoreX = this.ballX;
         this.fPlayOn = true;
         this.playOnTicks = 10;
         return true;
      }
   }

   public void run() {
      this.worldCupRound = 0;

      do {
         this.initStuff();
         this.replayPos = this.replayStart = 0;
         this.scoringRun = 0;
         this.fP1Touched = this.fP2Touched = false;
         this.gameTime = 0L;
         this.startTime = ShimmedSystem.currentTimeMillis();
         this.fEndGame = false;
         this.fCanChangeCol = false;
         this.mousePressed = false;
         this.gameTime = (long)this.gameLength;
         this.fInPlay = true;
         this.fEndGame = false;
         String l;
         if(this.worldCup) {
            this.paint(this.getGraphics());

            do {
               this.p2Col = (int)(Math.random() * (double)this.slimaryCols.length / 4.0D) + this.worldCupRound * this.slimaryCols.length / 4;
            } while(this.p1Col == this.p2Col);

            l = this.slimeColText[this.p1Col] + " vs. " + this.slimeColText[this.p2Col];
            switch(this.worldCupRound) {
            case 0:
               this.promptBox("Qualifying Round", l);
               this.gameLength = 30000;
               break;
            case 1:
               this.promptBox("Quarter Finals", l);
               this.gameLength = 120000;
               break;
            case 2:
               this.promptBox("Semi-Finals", l);
               this.gameLength = 120000;
               break;
            case 3:
               this.promptBox("World Cup Final", l);
               this.gameLength = 300000;
            }

            try {
               ShimmedThread.sleep(4000L);
            } catch (Exception var5) {
               ;
            }

            this.repaint();
            this.flip();
         }

         while(this.gameTime > 0L || this.worldCup && this.worldCupRound > 0 && this.p1Score == this.p2Score) {
            this.gameTime = this.startTime + (long)this.gameLength - ShimmedSystem.currentTimeMillis();
            if(this.gameTime < 0L) {
               this.gameTime = 0L;
            }

            if(this.worldCup && !this.fExtraTime && this.gameTime <= 0L && this.worldCupRound > 0 && this.p1Score == this.p2Score) {
               l = this.p1Score != 0?" " + this.p1Score:" nil";
               this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ".", "And the game goes into extra time...");

               try {
                  ShimmedThread.sleep(4000L);
               } catch (Exception var10) {
                  ;
               }

               this.repaint();
               this.flip();
               this.startTime += 30000L;
               this.gameTime += 30000L;
               this.fExtraTime = true;
            } else if(this.gameTime <= 0L && this.fExtraTime && !this.fGoldenGoal && this.p1Score == this.p2Score) {
               this.fGoldenGoal = true;
               l = this.p1Score != 0?" " + this.p1Score:" nil";
               this.promptBox("The score is " + this.slimeColText[this.p1Col] + l + ", " + this.slimeColText[this.p2Col] + l + ", and the game goes into Golden Goal.", "The next player to score will win the match!");

               try {
                  ShimmedThread.sleep(4000L);
               } catch (Exception var9) {
                  ;
               }

               this.repaint();
               this.flip();
            }

            this.SaveReplayData();
            this.p1OldX = this.p1X;
            this.p1OldY = this.p1Y;
            this.p2OldX = this.p2X;
            this.p2OldY = this.p2Y;
            this.ballOldX = this.ballX;
            this.ballOldY = this.ballY;
            this.MoveSlimers();
            this.DrawSlimers();
            this.DrawGoals();
            this.DrawStatus();
            this.flip();
            if(this.p1X < 150) {
               ++this.p1TouchingGoal;
            } else {
               this.p1TouchingGoal = 0;
            }

            if(this.p2X > 850) {
               ++this.p2TouchingGoal;
            } else {
               this.p2TouchingGoal = 0;
            }

            if(this.fPlayOn) {
               --this.playOnTicks;
            } else {
               this.fPlayOn = this.checkScored();
            }

            if(this.playOnTicks == 0 || this.p1TouchingGoal > 600000000 || this.p2TouchingGoal > 600000000) {
               long var11 = ShimmedSystem.currentTimeMillis();
               if(this.p1TouchingGoal > 600000000) {
                  ++this.p2Score;
                  this.promptMsg = this.slimeColText[this.p1Col] + " pinged for goal hanging!";
               } else if(this.p2TouchingGoal > 600000000) {
                  ++this.p1Score;
                  this.promptMsg = this.slimeColText[this.p2Col] + " pinged for goal hanging!";
               } else if(this.nScoreX < 500) {
                  ++this.p2Score;
                  this.promptMsg = this.slimeColText[this.p2Col] + " Scores!";
               } else {
                  ++this.p1Score;
                  this.promptMsg = this.slimeColText[this.p1Col] + " Scores!";
               }

               this.drawPrompt();
               this.drawPrompt("Click mouse for replay...", 1);
               this.flip();
               this.mousePressed = false;
               if(this.gameThread != null) {
                  try {
                     ShimmedThread.sleep(2500L);
                  } catch (InterruptedException var8) {
                     ;
                  }
               }

               if(this.mousePressed) {
                  this.SaveReplayData();
                  this.DoReplay();
               }

               this.promptMsg = "";
               this.drawPrompt();
               this.playOnTicks = 10;
               this.fPlayOn = false;
               this.startTime += ShimmedSystem.currentTimeMillis() - var11;
               this.ballX = 490 + (int)(Math.random() * 20.0D);
               this.ballY = 190 + (int)(Math.random() * 20.0D);
               this.ballVX = 0;
               this.ballVY = 0;
               this.p1X = 200;
               this.p1Y = 0;
               this.p1YV = 0;
               this.p2X = 800;
               this.p2Y = 0;
               this.p2YV = 0;
               this.replayStart = this.replayPos = 0;
               this.repaint();
            }

            if(this.gameThread != null) {
               try {
                  if(this.fPlayOn) {
                     ShimmedThread.sleep(120L);
                  } else {
                     ShimmedThread.sleep(20L);
                  }
               } catch (InterruptedException var7) {
                  ;
               }
            }
         }

         this.fEndGame = true;
         if(this.fPlayOn) {
            if(this.nScoreX < 500) {
               ++this.p2Score;
               this.promptMsg = this.slimeColText[this.p2Col] + " scores at the final whistle!";
            } else {
               ++this.p1Score;
               this.promptMsg = this.slimeColText[this.p1Col] + " scores at the final whistle!";
            }

            this.drawPrompt();
         } else {
            this.drawPrompt("And that\'s the final whistle!", 0);
         }

         if(this.worldCup) {
            if(this.p1Score == this.p2Score) {
               this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
               this.promptBox("You played well, but a draw is not enough.", "You have been eliminated.");
               this.worldCup = false;
               this.flip();
            } else if(this.p1Score >= this.p2Score) {
               switch(this.worldCupRound) {
               case 0:
                  this.drawPrompt(this.slimeColText[this.p1Col] + " qualifies for the world cup!", 1);
                  break;
               case 1:
                  this.drawPrompt(this.slimeColText[this.p1Col] + " proceeds to the semi-finals!", 1);
                  break;
               case 2:
                  this.drawPrompt(this.slimeColText[this.p1Col] + " is through to the final!!!", 1);
                  break;
               case 3:
                  this.drawPrompt(this.slimeColText[this.p1Col] + " wins the WORLD CUP!!!!!", 1);
               }

               if(this.worldCupRound == 3) {
                  this.worldCup = false;
                  this.promptBox("You win the world cup!!!", "Congratulations!");
               } else {
                  ++this.worldCupRound;
               }
            } else {
               switch(this.worldCupRound) {
               case 0:
               case 1:
                  this.promptBox("You have been eliminated.", "Goodbye.");
                  break;
               case 2:
                  this.promptBox("You have been knocked out of the semifinals.", "You played well.");
                  break;
               case 3:
                  this.promptBox("You came second.", "Are you satisfied with that?");
               }

               this.worldCup = false;
            }
         } else if(this.p1Score == this.p2Score) {
            this.drawPrompt("It\'s a draw at full time, here at Slime Stadium!", 1);
         } else if(this.p1Score < this.p2Score) {
            this.drawPrompt(this.slimeColText[this.p2Col] + " (" + this.p2Score + ")    def. " + this.slimeColText[this.p1Col] + " (" + this.p1Score + ")", 1);
         } else {
            this.drawPrompt(this.slimeColText[this.p1Col] + " (" + this.p1Score + ")    def. " + this.slimeColText[this.p2Col] + " (" + this.p2Score + ")", 1);
         }

         this.flip();

         try {
            ShimmedThread.sleep(5000L);
         } catch (InterruptedException var6) {
            ;
         }

         this.initStuff();
      } while(this.worldCup);

      this.fCanChangeCol = true;
      this.fInPlay = false;
      this.repaint();
   }

   public void init() {
      this.nWidth = this.size().width;
      this.nHeight = this.size().height;
      this.fInPlay = this.fEndGame = false;
      this.fCanChangeCol = true;
      this.initStuff();
      this.promptMsg = "Click on an option to play...";
      this.backBuffer = this.createImage(this.nWidth, this.nHeight);
      this.screen = this.getGraphics();
      this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));
   }

   private void toggleBuffering() {
      if(this.doubleBuffered = !this.doubleBuffered) {
         this.screen = this.backBuffer.getGraphics();
         this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));
      } else {
         this.screen = this.getGraphics();
         this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));
      }

      this.repaint();
   }

   private void DoReplay() {
      ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
      int i = fontmetrics.stringWidth("Replay...");
      int j = fontmetrics.getHeight();
      int k = this.nWidth / 2 - i / 2;
      int l = this.nHeight / 2 - j;
      this.promptMsg = "Click the mouse to continue...";
      this.mousePressed = false;
      int i1 = this.replayPos - 1;

      while(!this.mousePressed) {
         ++i1;
         if(i1 >= 200) {
            i1 = 0;
         }

         if(i1 == this.replayPos) {
            try {
               ShimmedThread.sleep(1000L);
            } catch (InterruptedException var9) {
               ;
            }

            i1 = this.replayStart;
            this.paint(this.getGraphics());
         }

         this.ReplayFrame(i1, k, l, i, j, false);
         this.flip();
      }

      this.promptMsg = "";
      this.paint(this.getGraphics());
   }

   private void flip() {
      if(this.doubleBuffered) {
         this.getGraphics().drawImage(this.backBuffer, 0, 0, (ShimmedImageObserver)null);
      }

   }

   private int getBallBounceX() {
      int t = this.ballVY + (int)Math.sqrt((double)(this.ballVY * this.ballVY + 2 * this.ballY));
      int ballBounceX = this.ballX + t * this.ballVX;
      if(ballBounceX < 0) {
         ballBounceX = -ballBounceX;
      }

      if(ballBounceX > 1000) {
         ballBounceX = 1000 - ballBounceX;
      }

      return ballBounceX;
   }

   private int getBallMaxY() {
      return this.ballVY < 0?this.ballY:this.ballY + this.ballVY * this.ballVY / 2;
   }

   private void controlP2v0() {
      this.p2XV = 0;
      if(this.ballX > this.p2X + 5 && this.ballX < 960) {
         this.fP2Sticky = true;
      }

      if(this.ballX > this.p2X - 10) {
         this.p2XV = this.SLIMEVEL;
      }

      if(this.ballX + 30 > this.p2X && this.p2YV == 0) {
         this.fP2Sticky = false;
         this.p2YV = this.JUMPVEL;
      }

      if(this.ballX + 50 < this.p2X) {
         this.fP2Sticky = false;
         this.p2XV = -this.SLIMEVEL;
      }

      if(this.ballX > this.p2X + 50 && this.p2YV == 0 && this.ballY > 10 && this.ballY < 150) {
         this.p2YV = this.JUMPVEL;
      }

      if(this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + (this.p2X - 850) / this.SLIMEVEL) {
         this.p2XV = -this.SLIMEVEL;
      }

   }

   private void controlP2v1() {
      this.p2XV = 0;
      int bounceX = this.getBallBounceX();
      int ballMaxY = this.getBallMaxY();
      if(this.ballVY >= 1) {
         int var10000 = this.ballVY;
      } else {
         boolean var4 = true;
      }

      if(bounceX > 900) {
         this.p2XV = this.SLIMEVEL;
      }

      if(bounceX + 20 < this.p2X) {
         this.fP2Sticky = false;
         this.p2XV = -this.SLIMEVEL;
      }

      if(this.ballX > this.p2X - 10) {
         this.p2XV = this.SLIMEVEL;
      }

      if(this.ballX + 30 > this.p2X && this.p2YV == 0) {
         this.fP2Sticky = false;
         this.p2YV = this.JUMPVEL;
      }

      if(bounceX > this.p2X + 50 && this.p2YV == 0) {
         this.p2XV = this.SLIMEVEL;
      }

      if(this.ballX > this.p2X && this.ballX < 960) {
         this.fP2Sticky = true;
      }

      if(this.p2YV == 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
         this.p2XV = this.SLIMEVEL;
      }

      if(this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && this.ballVY / 4 == 0 && this.p1X < 400 && this.p2X < 848) {
         if(this.p2X < 900) {
            this.p2XV = this.SLIMEVEL;
         }

         if(this.ballX > 800 && bounceX > 950 && this.p2YV == 0 && ballMaxY > 40) {
            this.p2YV = this.JUMPVEL;
         }
      }

      if(this.p2YV == this.JUMPVEL) {
         if(ballMaxY < 110) {
            this.p2YV = 0;
         }

         if(this.ballX < this.p2X - 400) {
            this.p2YV = 0;
         }

         if(this.ballY < 80) {
            this.p2YV = 0;
         }

         if(this.ballX < 900 && this.p2X > 900) {
            this.p2YV = 0;
         }

         if(this.p2X < 150) {
            this.p2YV = 0;
         }
      }

      if(this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + (this.p2X - 850) / this.SLIMEVEL) {
         this.p2XV = -this.SLIMEVEL;
      }

   }

   private void controlP2v2() {
      int bounceX = this.getBallBounceX();
      int ballMaxY = this.getBallMaxY();
      if(this.ballVY >= 1) {
         int var10000 = this.ballVY;
      } else {
         boolean var4 = true;
      }

      if(this.p2X < 790) {
         this.p2XV = this.SLIMEVEL;
      } else if(this.p2X > 830) {
         this.p2XV = -this.SLIMEVEL;
      } else {
         this.p2XV = 0;
      }

      if(bounceX > 900) {
         this.p2XV = this.SLIMEVEL;
      }

      if(bounceX + 20 < this.p2X) {
         this.fP2Sticky = false;
         this.p2XV = -this.SLIMEVEL;
      }

      if(this.ballX > this.p2X - 10) {
         this.p2XV = this.SLIMEVEL;
      }

      if(this.ballX + 30 > this.p2X && this.p2YV == 0) {
         this.fP2Sticky = false;
         this.p2YV = this.JUMPVEL;
      }

      if(bounceX > this.p2X + 50 && this.p2YV == 0) {
         this.p2XV = this.SLIMEVEL;
      }

      if(this.ballX > this.p2X && this.ballX < 960) {
         this.fP2Sticky = true;
      }

      if(this.p2YV == 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
         this.p2XV = this.SLIMEVEL;
      }

      if(this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && this.ballVY / 4 == 0 && this.p1X < 400 && this.p2X < 848) {
         if(this.p2X < 900) {
            this.p2XV = this.SLIMEVEL;
         }

         if(this.ballX > 800 && bounceX > 950 && this.p2YV == 0 && ballMaxY > 40) {
            this.p2YV = this.JUMPVEL;
         }
      }

      if(this.p2YV == this.JUMPVEL) {
         if(ballMaxY < 110) {
            this.p2YV = 0;
         }

         if(this.ballX < this.p2X - 400) {
            this.p2YV = 0;
         }

         if(this.ballY < 80) {
            this.p2YV = 0;
         }

         if(this.ballX < 900 && this.p2X > 900) {
            this.p2YV = 0;
         }
      }

      if(this.p2YV == 0 && this.p2X < 400 && bounceX > 500 && ballMaxY > 50) {
         this.p2YV = this.JUMPVEL;
      }

      if(this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + (this.p2X - 850) / this.SLIMEVEL) {
         this.p2XV = -this.SLIMEVEL;
      }

   }

   private void controlP2v3() {
      int SLIMEVEL = this.SLIMEVEL * 4 / 3;
      int bounceX = this.getBallBounceX();
      int ballMaxY = this.getBallMaxY();
      if(this.ballVY >= 1) {
         int var10000 = this.ballVY;
      } else {
         boolean var5 = true;
      }

      if(this.p2X < 790) {
         this.p2XV = SLIMEVEL;
      } else if(this.p2X > 830) {
         this.p2XV = -SLIMEVEL;
      } else {
         this.p2XV = 0;
      }

      if(bounceX > 900) {
         this.p2XV = SLIMEVEL;
      }

      if(bounceX + 20 < this.p2X) {
         this.fP2Sticky = false;
         this.p2XV = -SLIMEVEL;
      }

      if(this.ballX > this.p2X - 10) {
         this.p2XV = SLIMEVEL;
      }

      if(this.ballX + 30 > this.p2X && this.p2YV == 0) {
         this.fP2Sticky = false;
         this.p2YV = this.JUMPVEL;
      }

      if(bounceX > this.p2X + 50 && this.p2YV == 0) {
         this.p2XV = SLIMEVEL;
      }

      if(this.ballX > this.p2X && this.ballX < 960) {
         this.fP2Sticky = true;
      }

      if(this.p2YV == 0 && this.ballX > this.p1X - 120 && this.ballX < this.p1X + 120 && this.ballY > this.p1Y && this.ballY < this.p1Y + 100 && this.p1Y > 0) {
         this.p2XV = SLIMEVEL;
      }

      if(this.p2Score >= this.p1Score && bounceX < 200 && this.p2X > this.p1X || bounceX < this.p1X + 50 && bounceX > this.p1X - 50 && this.ballVY / 4 == 0 && this.p1X < 400 && this.p2X < 848) {
         if(this.p2X < 900) {
            this.p2XV = SLIMEVEL;
         }

         if(this.ballX > 800 && bounceX > 950 && this.p2YV == 0 && ballMaxY > 40) {
            this.p2YV = this.JUMPVEL;
         }
      }

      if(this.p2YV == this.JUMPVEL) {
         if(ballMaxY < 110) {
            this.p2YV = 0;
         }

         if(this.ballX < this.p2X - 400) {
            this.p2YV = 0;
         }

         if(this.ballY < 80) {
            this.p2YV = 0;
         }

         if(this.ballX < 900 && this.p2X > 900) {
            this.p2YV = 0;
         }

         if(this.p2XV > 0 && ballMaxY > 200 && bounceX > this.p2X + 300) {
            this.p2YV = 0;
         }
      }

      if(this.p2YV == 0 && this.p2X < 400 && bounceX > this.p2X + 400 && ballMaxY > 50) {
         this.p2YV = this.JUMPVEL;
      }

      if(this.p2TouchingGoal > 0 && 600000000 - this.p2TouchingGoal < 3 + (this.p2X - 850) / SLIMEVEL) {
         this.p2XV = -SLIMEVEL;
      }

   }

   // $FF: renamed from: p (java.lang.String) void
   private void method_rn_ElasticSlime_p_1(String s) {
      ShimmedSystem.out.println(s);
   }
}

ENDOFJAVAMARKER
{
  "startTime": "2019-01-12 18:35:44",
  "sourceLength": 0,
  "success": true,
  "endTime": "2019-01-12 18:35:46",
  "durationMillis": 1903,
  "errors": [],
  "jsout": "var __extends \u003d (this \u0026\u0026 this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] \u003d b[p];\n    function __() { this.constructor \u003d d; }\n    d.prototype \u003d b \u003d\u003d\u003d null ? Object.create(b) : (__.prototype \u003d b.prototype, new __());\n};\n/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nvar ShimmedSize \u003d (function () {\n    function ShimmedSize() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n    return ShimmedSize;\n}());\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\nvar ShimmedApplet \u003d (function () {\n    function ShimmedApplet() {\n    }\n    ShimmedApplet.prototype.size \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.createImage \u003d function (x, y) {\n        return null;\n    };\n    ShimmedApplet.prototype.showStatus \u003d function (s) {\n    };\n    ShimmedApplet.prototype.repaint \u003d function () {\n    };\n    ShimmedApplet.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.requestFocus \u003d function () {\n    };\n    ShimmedApplet.prototype.getWidth \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getDocumentBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAppletContext \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getCodeBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAudioClip \u003d function (u, s) {\n        return null;\n    };\n    ShimmedApplet.prototype.getImage \u003d function (u, s) {\n        return null;\n    };\n    return ShimmedApplet;\n}());\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\nvar ShimmedColor \u003d (function () {\n    function ShimmedColor(r, g, b) {\n    }\n    return ShimmedColor;\n}());\nShimmedColor.yellow \u003d null;\nShimmedColor.black \u003d null;\nShimmedColor.red \u003d null;\nShimmedColor.gray \u003d null;\nShimmedColor.white \u003d null;\nShimmedColor.blue \u003d null;\nShimmedColor.green \u003d null;\nShimmedColor.pink \u003d null;\nShimmedColor.cyan \u003d null;\nShimmedColor.lightGray \u003d null;\nShimmedColor.darkGray \u003d null;\nShimmedColor.orange \u003d null;\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\nvar ShimmedGraphics \u003d (function () {\n    function ShimmedGraphics() {\n    }\n    ShimmedGraphics.prototype.getFont \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.setFont \u003d function (f) {\n    };\n    ShimmedGraphics.prototype.setColor \u003d function (c) {\n    };\n    ShimmedGraphics.prototype.fillRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.getFontMetrics \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.drawString \u003d function (s, x, y) {\n    };\n    ShimmedGraphics.prototype.drawImage \u003d function (i, x, y, o) {\n    };\n    ShimmedGraphics.prototype.drawOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillArc \u003d function (x, y, w, h, s, e) {\n    };\n    ShimmedGraphics.prototype.drawLine \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.drawRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillPolygon$int_A$int_A$int \u003d function (xs, ys, n) {\n    };\n    ShimmedGraphics.prototype.fillPolygon \u003d function (xs, ys, n) {\n        if (((xs !\u003d null \u0026\u0026 xs instanceof Array \u0026\u0026 (xs.length \u003d\u003d 0 || xs[0] \u003d\u003d null || (typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof Array \u0026\u0026 (ys.length \u003d\u003d 0 || ys[0] \u003d\u003d null || (typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return this.fillPolygon$int_A$int_A$int(xs, ys, n);\n        }\n        else if (((xs !\u003d null \u0026\u0026 xs instanceof ShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return this.fillPolygon$ShimmedPolygon(xs);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedGraphics.prototype.fillPolygon$ShimmedPolygon \u003d function (p) {\n    };\n    ShimmedGraphics.prototype.drawArc \u003d function (x, y, w, h, s, e) {\n    };\n    return ShimmedGraphics;\n}());\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\nvar ShimmedImage \u003d (function () {\n    function ShimmedImage() {\n    }\n    ShimmedImage.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedImage.prototype.getHeight \u003d function (a) {\n        return 0;\n    };\n    return ShimmedImage;\n}());\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\nvar ShimmedEvent \u003d (function () {\n    function ShimmedEvent() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n    return ShimmedEvent;\n}());\nShimmedEvent.KEY_ACTION \u003d 0;\nShimmedEvent.LEFT \u003d 1;\nShimmedEvent.RIGHT \u003d 2;\nShimmedEvent.UP \u003d 3;\nShimmedEvent.DOWN \u003d 4;\nShimmedEvent.KEY_ACTION_RELEASE \u003d 5;\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\nvar ShimmedFont \u003d (function () {\n    function ShimmedFont(name, w, h) {\n    }\n    ShimmedFont.prototype.getName \u003d function () {\n        return null;\n    };\n    return ShimmedFont;\n}());\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\nvar ShimmedFontMetrics \u003d (function () {\n    function ShimmedFontMetrics() {\n    }\n    ShimmedFontMetrics.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.stringWidth \u003d function (s) {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.getAscent \u003d function () {\n        return 0;\n    };\n    return ShimmedFontMetrics;\n}());\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\nvar ShimmedThread \u003d (function () {\n    function ShimmedThread(r) {\n    }\n    ShimmedThread.sleep$long \u003d function (ms) {\n    };\n    ShimmedThread.sleep$long$boolean \u003d function (ms, b) {\n    };\n    ShimmedThread.sleep \u003d function (ms, b) {\n        if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return ShimmedThread.sleep$long$boolean(ms, b);\n        }\n        else if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return ShimmedThread.sleep$long(ms);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedThread.prototype.start \u003d function () {\n    };\n    ShimmedThread.prototype.stop \u003d function () {\n    };\n    return ShimmedThread;\n}());\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\nvar ShimmedAppletContext \u003d (function () {\n    function ShimmedAppletContext() {\n    }\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL \u003d function (u) {\n    };\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL$java_lang_String \u003d function (u, s) {\n    };\n    ShimmedAppletContext.prototype.showDocument \u003d function (u, s) {\n        if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return this.showDocument$ShimmedURL$java_lang_String(u, s);\n        }\n        else if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return this.showDocument$ShimmedURL(u);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedAppletContext;\n}());\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\nvar ShimmedDocumentBase \u003d (function () {\n    function ShimmedDocumentBase() {\n    }\n    ShimmedDocumentBase.prototype.getHost \u003d function () {\n        return null;\n    };\n    return ShimmedDocumentBase;\n}());\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\nvar ShimmedURL \u003d (function () {\n    function ShimmedURL(s) {\n    }\n    ShimmedURL.prototype.openStream \u003d function () {\n        return null;\n    };\n    return ShimmedURL;\n}());\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\nvar ShimmedPrintStream \u003d (function () {\n    function ShimmedPrintStream() {\n    }\n    ShimmedPrintStream.prototype.print \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$ \u003d function () {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$java_lang_Object \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println \u003d function (s) {\n        if (((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return this.println$java_lang_Object(s);\n        }\n        else if (s \u003d\u003d\u003d undefined) {\n            return this.println$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedPrintStream;\n}());\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\nvar ShimmedSystem \u003d (function () {\n    function ShimmedSystem() {\n    }\n    ShimmedSystem.currentTimeMillis \u003d function () {\n        return 0;\n    };\n    return ShimmedSystem;\n}());\nShimmedSystem.out \u003d null;\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\nvar ShimmedVector \u003d (function () {\n    function ShimmedVector(n) {\n    }\n    ShimmedVector.prototype.removeAllElements \u003d function () {\n    };\n    ShimmedVector.prototype.get \u003d function (i) {\n        return null;\n    };\n    ShimmedVector.prototype.size \u003d function () {\n        return 0;\n    };\n    ShimmedVector.prototype.add \u003d function (x) {\n    };\n    return ShimmedVector;\n}());\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\nvar ShimmedElement \u003d (function () {\n    function ShimmedElement() {\n    }\n    ShimmedElement.prototype.add \u003d function (e) {\n    };\n    return ShimmedElement;\n}());\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\nvar ShimmedPolygon \u003d (function () {\n    function ShimmedPolygon(xs, ys, n) {\n    }\n    return ShimmedPolygon;\n}());\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\nvar ShimmedInputStream \u003d (function () {\n    function ShimmedInputStream() {\n    }\n    ShimmedInputStream.prototype.close \u003d function () {\n    };\n    return ShimmedInputStream;\n}());\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\nvar ShimmedBufferedReader \u003d (function () {\n    function ShimmedBufferedReader(i) {\n    }\n    ShimmedBufferedReader.prototype.readLine \u003d function () {\n        return null;\n    };\n    ShimmedBufferedReader.prototype.close \u003d function () {\n    };\n    return ShimmedBufferedReader;\n}());\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\nvar ShimmedInputStreamReader \u003d (function () {\n    function ShimmedInputStreamReader(is) {\n    }\n    return ShimmedInputStreamReader;\n}());\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\nvar ShimmedGridLayout \u003d (function () {\n    function ShimmedGridLayout(x, y) {\n    }\n    return ShimmedGridLayout;\n}());\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\nvar ShimmedLong \u003d (function () {\n    function ShimmedLong() {\n    }\n    ShimmedLong.parseLong \u003d function (s) {\n        return 0;\n    };\n    return ShimmedLong;\n}());\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\nvar ShimmedChars \u003d (function () {\n    function ShimmedChars() {\n    }\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    ShimmedChars.charCodeArray \u003d function (s) {\n        return null;\n    };\n    return ShimmedChars;\n}());\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\nvar ShimmedImageObserver \u003d (function () {\n    function ShimmedImageObserver() {\n    }\n    return ShimmedImageObserver;\n}());\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\nvar ShimmedRandom \u003d (function () {\n    function ShimmedRandom() {\n    }\n    ShimmedRandom.prototype.nextInt \u003d function (m) {\n        return 0;\n    };\n    return ShimmedRandom;\n}());\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\nvar ShimmedAudioClip \u003d (function () {\n    function ShimmedAudioClip() {\n    }\n    ShimmedAudioClip.prototype.play \u003d function () {\n    };\n    return ShimmedAudioClip;\n}());\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\nvar ShimmedStringBuffer \u003d (function () {\n    function ShimmedStringBuffer(i) {\n        if (((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else if (i \u003d\u003d\u003d undefined) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    }\n    ShimmedStringBuffer.prototype.append \u003d function (s) {\n        return null;\n    };\n    return ShimmedStringBuffer;\n}());\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\nvar EndOfShimDeclarations \u003d (function () {\n    function EndOfShimDeclarations() {\n    }\n    return EndOfShimDeclarations;\n}());\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\nvar ElasticSlime \u003d (function (_super) {\n    __extends(ElasticSlime, _super);\n    function ElasticSlime() {\n        var _this \u003d _super.call(this) || this;\n        /*private*/ _this.slimeColText \u003d [\"Argentina\", \"Belgium\", \"Australia\", \"Iceland\", \"Cameroon\", \"P.R. of China\", \"Costa Rica\", \"Croatia\", \"Denmark\", \"Eucador\", \"Mexico\", \"France\", \"USA\", \"Italy\", \"Japan\", \"Russia\", \"Paraguay\", \"Poland\", \"Portugal\", \"Ireland\", \"Saudi Arabia\", \"Senegal\", \"Slovenia\", \"Spain\", \"Seth Efrica\", \"South Corea\", \"Sveden\", \"Tunisia\", \"Turkey\", \"Uruguay\", \"Brazil\", \"England\", \"Germany\", \"Night Elves\"];\n        /*private*/ _this.darkRed \u003d new ShimmedColor(128, 0, 0);\n        /*private*/ _this.darkGreen \u003d new ShimmedColor(0, 128, 0);\n        /*private*/ _this.darkBlue \u003d new ShimmedColor(0, 0, 128);\n        _this.nWidth \u003d 0;\n        _this.nHeight \u003d 0;\n        _this.p1Score \u003d 0;\n        _this.p2Score \u003d 0;\n        _this.p1X \u003d 0;\n        _this.p2X \u003d 0;\n        _this.p1Y \u003d 0;\n        _this.p2Y \u003d 0;\n        _this.p1Col \u003d 0;\n        _this.p2Col \u003d 0;\n        _this.slimaryCols \u003d null;\n        _this.secondaryCols \u003d null;\n        _this.p1OldX \u003d 0;\n        _this.p2OldX \u003d 0;\n        _this.p1OldY \u003d 0;\n        _this.p2OldY \u003d 0;\n        _this.p1XV \u003d 0;\n        _this.p2XV \u003d 0;\n        _this.p1YV \u003d 0;\n        _this.p2YV \u003d 0;\n        _this.ballX \u003d 0;\n        _this.ballY \u003d 0;\n        _this.ballVX \u003d 0;\n        _this.ballVY \u003d 0;\n        _this.ballOldX \u003d 0;\n        _this.ballOldY \u003d 0;\n        _this.screen \u003d null;\n        _this.promptMsg \u003d null;\n        _this.replayData \u003d null;\n        _this.replayPos \u003d 0;\n        _this.replayStart \u003d 0;\n        _this.mousePressed \u003d false;\n        _this.fCanChangeCol \u003d false;\n        _this.fInPlay \u003d false;\n        _this.p1Blink \u003d 0;\n        _this.p2Blink \u003d 0;\n        _this.fP1Sticky \u003d false;\n        _this.fP2Sticky \u003d false;\n        _this.fP1Touched \u003d false;\n        _this.fP2Touched \u003d false;\n        _this.p1TouchingGoal \u003d 0;\n        _this.p2TouchingGoal \u003d 0;\n        _this.gameThread \u003d null;\n        _this.fEndGame \u003d false;\n        _this.fPlayOn \u003d false;\n        _this.nScoreX \u003d 0;\n        _this.startTime \u003d 0;\n        _this.gameTime \u003d 0;\n        _this.scoringRun \u003d 0;\n        _this.frenzyCol \u003d 0;\n        _this.playOnTicks \u003d 0;\n        _this.backBuffer \u003d null;\n        _this.SMILE_DIFF \u003d 0;\n        _this.DAMPING \u003d 0;\n        _this.MAX_TICKS_TOUCHING_GOAL \u003d 0;\n        _this.JUMPVEL \u003d 0;\n        _this.SLIMEVEL \u003d 0;\n        _this.GRAVITY \u003d 0;\n        _this.gameLength \u003d 0;\n        _this.worldCup \u003d false;\n        _this.worldCupRound \u003d 0;\n        _this.Speed \u003d 0;\n        _this.fExtraTime \u003d false;\n        _this.fGoldenGoal \u003d false;\n        _this.fSuperSlime \u003d false;\n        _this.dustX \u003d 0;\n        _this.dustY \u003d 0;\n        _this.doubleBuffered \u003d false;\n        _this.NUM_PARTICLES \u003d 0;\n        _this.particle_size \u003d 0;\n        _this.particle_x \u003d null;\n        _this.particle_y \u003d null;\n        _this.particle_weight \u003d null;\n        _this.pointsX \u003d null;\n        _this.pointsY \u003d null;\n        _this.slimaryCols \u003d [ShimmedColor.cyan, ShimmedColor.red, ShimmedColor.green, ShimmedColor.white, _this.darkGreen, ShimmedColor.white, _this.darkRed, _this.darkRed, new ShimmedColor(119, 41, 28), ShimmedColor.yellow, ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(128, 128, 255), _this.darkBlue, ShimmedColor.white, ShimmedColor.red, ShimmedColor.white, new ShimmedColor(119, 41, 28), ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(185, 30, 2), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(252, 239, 82), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(16, 180, 180), new ShimmedColor(241, 245, 71), new ShimmedColor(230, 230, 230), ShimmedColor.white, ShimmedColor.blue];\n        _this.secondaryCols \u003d [ShimmedColor.white, ShimmedColor.black, ShimmedColor.yellow, new ShimmedColor(128, 128, 255), ShimmedColor.red, ShimmedColor.red, _this.darkBlue, ShimmedColor.white, ShimmedColor.white, _this.darkBlue, ShimmedColor.green, ShimmedColor.blue, _this.darkBlue, ShimmedColor.white, ShimmedColor.white, ShimmedColor.blue, ShimmedColor.white, ShimmedColor.red, _this.darkGreen, ShimmedColor.white, new ShimmedColor(128, 255, 128), new ShimmedColor(255, 128, 0), _this.darkGreen, _this.darkBlue, new ShimmedColor(13, 131, 10), ShimmedColor.white, ShimmedColor.blue, ShimmedColor.red, ShimmedColor.white, ShimmedColor.black, new ShimmedColor(7, 177, 33), ShimmedColor.red, ShimmedColor.black, ShimmedColor.blue];\n        _this.frenzyCol \u003d 0;\n        _this.SMILE_DIFF \u003d 2;\n        _this.DAMPING \u003d 7;\n        _this.MAX_TICKS_TOUCHING_GOAL \u003d 600000000;\n        _this.worldCup \u003d false;\n        _this.worldCupRound \u003d 0;\n        _this.Speed \u003d 16;\n        _this.dustX \u003d 0;\n        _this.dustY \u003d 0;\n        _this.NUM_PARTICLES \u003d 100;\n        _this.particle_size \u003d 1;\n        _this.particle_x \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n            a.push(0); return a; })(_this.NUM_PARTICLES);\n        _this.particle_y \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n            a.push(0); return a; })(_this.NUM_PARTICLES);\n        _this.particle_weight \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n            a.push(0); return a; })(_this.NUM_PARTICLES);\n        _this.pointsX \u003d [];\n        _this.pointsY \u003d [];\n        _this.p2Col \u003d 1;\n        _this.replayData \u003d (function (dims) { var allocate \u003d function (dims) { if (dims.length \u003d\u003d 0) {\n            return 0;\n        }\n        else {\n            var array \u003d [];\n            for (var i \u003d 0; i \u003c dims[0]; i++) {\n                array.push(allocate(dims.slice(1)));\n            }\n            return array;\n        } }; return allocate(dims); })([200, 8]);\n        return _this;\n    }\n    ElasticSlime.prototype.initStuff \u003d function () {\n        this.fEndGame \u003d true;\n        this.p1X \u003d 200;\n        this.p1Y \u003d 0;\n        this.p2X \u003d 800;\n        this.p2Y \u003d 0;\n        this.p1XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p2YV \u003d 0;\n        this.p1Score \u003d 0;\n        this.p2Score \u003d 0;\n        this.ballOldX \u003d this.ballX \u003d 500;\n        this.ballOldY \u003d this.ballY \u003d 200;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.replayStart \u003d this.replayPos \u003d 0;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.playOnTicks \u003d 10;\n        this.fPlayOn \u003d false;\n        this.fExtraTime \u003d false;\n        this.fGoldenGoal \u003d false;\n        this.JUMPVEL \u003d !this.fSuperSlime ? 31 : 65;\n        this.SLIMEVEL \u003d !this.fSuperSlime ? 8 : 16;\n        this.GRAVITY \u003d !this.fSuperSlime ? 2 : 8;\n    };\n    /*private*/ ElasticSlime.prototype.drawButtons \u003d function () {\n        var buttons \u003d [\"1 minute\", \"2 minutes\", \"4 minutes\", \"8 minutes\", \"World Cup\"];\n        var fm \u003d this.screen.getFontMetrics();\n        var darkBlue \u003d new ShimmedColor(0, 0, 128);\n        for (var i \u003d 0; i \u003c 5; ++i) {\n            this.screen.setColor(darkBlue);\n            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0), (this.nHeight * 2 / 10 | 0), (this.nWidth / 6 | 0), (this.nHeight / 10 | 0));\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10 | 0) - (fm.stringWidth(buttons[i]) / 2 | 0), (this.nHeight * 5 / 20 | 0) + (fm.getHeight() / 2 | 0));\n        }\n        ;\n        this.flip();\n    };\n    /*private*/ ElasticSlime.prototype.testButton \u003d function (x, y) {\n        for (var i \u003d 0; i \u003c 5; ++i) {\n            if (x \u003e ((2 * i + 1) * this.nWidth / 10 | 0) - (this.nWidth / 12 | 0) \u0026\u0026 x \u003c ((2 * i + 1) * this.nWidth / 10 | 0) + (this.nWidth / 12 | 0) \u0026\u0026 y \u003e (this.nHeight * 2 / 10 | 0) \u0026\u0026 y \u003c (this.nHeight * 3 / 10 | 0)) {\n                if (i \u003d\u003d\u003d 4) {\n                    this.gameLength \u003d 120000;\n                    this.worldCup \u003d true;\n                }\n                else {\n                    this.gameLength \u003d (1 \u003c\u003c i) * 60000;\n                    this.worldCup \u003d false;\n                }\n                return true;\n            }\n        }\n        ;\n        return false;\n    };\n    ElasticSlime.prototype.handleEvent \u003d function (event) {\n        switch ((event.id)) {\n            case 401:\n            case 403:\n                if (this.fCanChangeCol) {\n                    switch ((event.key)) {\n                        case 54:\n                            this.fSuperSlime \u003d !this.fSuperSlime;\n                            this.repaint();\n                            break;\n                        case 73:\n                        case 105:\n                        case 1004:\n                            do {\n                                this.p2Col \u003d this.p2Col !\u003d\u003d 0 ? this.p2Col - 1 : this.slimaryCols.length - 1;\n                            } while ((this.p1Col \u003d\u003d\u003d this.p2Col));\n                            this.drawScores();\n                            this.repaint();\n                            break;\n                        case 75:\n                        case 107:\n                        case 1005:\n                            do {\n                                this.p2Col \u003d this.p2Col \u003d\u003d\u003d this.slimaryCols.length - 1 ? 0 : this.p2Col + 1;\n                            } while ((this.p2Col \u003d\u003d\u003d this.p1Col));\n                            this.drawScores();\n                            this.repaint();\n                            break;\n                        case 83:\n                        case 115:\n                            do {\n                                this.p1Col \u003d this.p1Col \u003d\u003d\u003d this.slimaryCols.length - 1 ? 0 : this.p1Col + 1;\n                            } while ((this.p1Col \u003d\u003d\u003d this.p2Col));\n                            this.drawScores();\n                            this.repaint();\n                            break;\n                        case 87:\n                        case 119:\n                            while ((true)) {\n                                this.p1Col \u003d this.p1Col !\u003d\u003d 0 ? this.p1Col - 1 : this.slimaryCols.length - 1;\n                                if (this.p1Col !\u003d\u003d this.p2Col) {\n                                    this.drawScores();\n                                    this.repaint();\n                                    break;\n                                }\n                            }\n                            ;\n                    }\n                }\n                if (!this.fEndGame) {\n                    switch ((event.key)) {\n                        case 32:\n                            this.mousePressed \u003d true;\n                            return false;\n                        case 65:\n                        case 97:\n                            this.p1XV \u003d -this.SLIMEVEL;\n                            return false;\n                        case 66:\n                        case 98:\n                            this.toggleBuffering();\n                            return false;\n                        case 68:\n                        case 100:\n                            this.SLIMEVEL \u003d !this.fSuperSlime ? 8 : 16;\n                            if (this.Speed \u003e 5) {\n                            }\n                            --this.Speed;\n                            this.SLIMEVEL \u003d !this.fSuperSlime ? (this.Speed / 2 | 0) : this.Speed;\n                            this.p1XV \u003d this.SLIMEVEL;\n                            return false;\n                        case 73:\n                        case 105:\n                        case 1004:\n                            if (this.p2Y \u003d\u003d\u003d 0 \u0026\u0026 !this.worldCup) {\n                                this.p2YV \u003d this.JUMPVEL;\n                            }\n                            return false;\n                        case 74:\n                        case 106:\n                        case 1006:\n                            this.SLIMEVEL \u003d !this.fSuperSlime ? 8 : 16;\n                            if (this.Speed \u003e 5) {\n                            }\n                            --this.Speed;\n                            this.SLIMEVEL \u003d !this.fSuperSlime ? (this.Speed / 2 | 0) : this.Speed;\n                            this.p2XV \u003d this.SLIMEVEL;\n                            if (!this.worldCup) {\n                                this.p2XV \u003d -this.SLIMEVEL;\n                            }\n                            return false;\n                        case 75:\n                        case 107:\n                        case 1005:\n                            if (!this.worldCup) {\n                                this.fP2Sticky \u003d true;\n                            }\n                            return false;\n                        case 76:\n                        case 108:\n                        case 1007:\n                            if (!this.worldCup) {\n                                this.p2XV \u003d this.SLIMEVEL;\n                            }\n                            return false;\n                        case 83:\n                        case 115:\n                            this.fP1Sticky \u003d true;\n                            return false;\n                        case 87:\n                        case 119:\n                            if (this.p1Y \u003d\u003d\u003d 0) {\n                                this.p1YV \u003d this.JUMPVEL;\n                            }\n                    }\n                }\n                break;\n            case 402:\n            case 404:\n                switch ((event.key)) {\n                    case 65:\n                    case 76:\n                    case 97:\n                    case 108:\n                    case 1007:\n                    default:\n                        return false;\n                    case 68:\n                    case 100:\n                        this.SLIMEVEL \u003d !this.fSuperSlime ? 8 : 16;\n                        this.Speed \u003d 16;\n                        if (this.p1X \u003e 0) {\n                            this.p1XV \u003d -50;\n                        }\n                        return false;\n                    case 74:\n                    case 106:\n                    case 1006:\n                        this.SLIMEVEL \u003d !this.fSuperSlime ? 8 : 16;\n                        this.Speed \u003d 16;\n                        if (this.p2X \u003e 0) {\n                            this.p2XV \u003d 50;\n                        }\n                        return false;\n                    case 75:\n                    case 107:\n                    case 1005:\n                        this.fP2Sticky \u003d false;\n                        return false;\n                    case 83:\n                    case 115:\n                        this.fP1Sticky \u003d false;\n                        return false;\n                }\n            case 501:\n                this.mousePressed \u003d true;\n                if (!this.fInPlay \u0026\u0026 this.testButton(event.x, event.y)) {\n                    this.fEndGame \u003d false;\n                    this.fInPlay \u003d true;\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d 500;\n                    this.ballY \u003d 200;\n                    this.ballOldX \u003d 500;\n                    this.ballOldY \u003d 200;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.p1Score \u003d 0;\n                    this.p2Score \u003d 0;\n                    this.promptMsg \u003d \"\";\n                    this.paint(this.getGraphics());\n                    try {\n                        ShimmedThread.sleep$long(100);\n                    }\n                    catch (var4) {\n                    }\n                    ;\n                    this.gameThread \u003d new ShimmedThread(this);\n                    this.gameThread.start();\n                }\n                break;\n            case 503:\n                this.showStatus(\"Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid\");\n                this.requestFocus();\n        }\n        return false;\n    };\n    /*private*/ ElasticSlime.prototype.DrawSlimers \u003d function () {\n        var k1 \u003d (this.nWidth / 10 | 0);\n        var j2 \u003d (this.nHeight / 10 | 0);\n        var i3 \u003d (this.nWidth / 50 | 0);\n        var j3 \u003d (this.nHeight / 25 | 0);\n        var k3 \u003d (this.ballX * this.nWidth / 1000 | 0);\n        var l3 \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        var i \u003d (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        var l \u003d (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawLine(i, l + 20, 0, l + 20);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.drawLine(i, l - 1 + 20, 0, l - 1 + 20);\n        this.screen.drawLine(i, l + 1 + 20, 0, l + 1 + 20);\n        this.screen.drawLine(i, l - 2 + 20, 0, l - 2 + 20);\n        this.screen.drawLine(i, l + 2 + 20, 0, l + 2 + 20);\n        this.screen.drawLine(i, l - 3 + 20, 0, l - 3 + 20);\n        this.screen.drawLine(i, l + 3 + 20, 0, l + 3 + 20);\n        this.screen.drawLine(i, l - 4 + 20, 0, l - 4 + 20);\n        this.screen.drawLine(i, l + 4 + 20, 0, l + 4 + 20);\n        this.screen.drawLine(i, l - 5 + 20, 0, l - 5 + 20);\n        this.screen.drawLine(i, l + 5 + 20, 0, l + 5 + 20);\n        this.screen.drawLine(i, l - 6 + 20, 0, l - 6 + 20);\n        this.screen.drawLine(i, l + 6 + 20, 0, l + 6 + 20);\n        this.screen.drawLine(i, l - 7 + 20, 0, l - 7 + 20);\n        this.screen.drawLine(i, l + 7 + 20, 0, l + 7 + 20);\n        this.screen.drawLine(i, l - 8 + 20, 0, l - 8 + 20);\n        this.screen.drawLine(i, l + 8 + 20, 0, l + 8 + 20);\n        this.screen.drawLine(i, l - 9 + 20, 0, l - 9 + 20);\n        this.screen.drawLine(i, l + 9 + 20, 0, l + 9 + 20);\n        this.screen.drawLine(i, l - 10 + 20, 0, l - 10 + 20);\n        this.screen.drawLine(i, l + 10 + 20, 0, l + 10 + 20);\n        i \u003d (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillRect(i, l, k1, j2);\n        i \u003d (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillRect(i, l, k1, j2);\n        if (!this.fEndGame) {\n            this.MoveBall();\n        }\n        i \u003d (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p1Col] : this.slimaryCols[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimaryCols.length]);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        this.screen.setColor(this.secondaryCols[this.p1Col]);\n        this.pointsX[0] \u003d this.pointsX[2] \u003d i + (k1 / 2 | 0);\n        this.pointsX[1] \u003d i + (k1 * 2 / 5 | 0);\n        this.pointsX[3] \u003d i + (k1 / 8 | 0);\n        this.pointsY[0] \u003d l;\n        this.pointsY[1] \u003d this.pointsY[3] \u003d l + (j2 / 2 | 0);\n        this.pointsY[2] \u003d l + j2;\n        this.screen.fillPolygon$int_A$int_A$int(this.pointsX, this.pointsY, 4);\n        var l4 \u003d this.p1X + 38;\n        var i5 \u003d this.p1Y - 60;\n        i \u003d (l4 * this.nWidth / 1000 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);\n        var i4 \u003d i - k3;\n        var j4 \u003d l - l3;\n        var k4 \u003d (Math.sqrt((i4 * i4 + j4 * j4)) | 0);\n        var flag \u003d Math.random() \u003c 0.01;\n        if (flag) {\n            this.p1Blink \u003d 5;\n        }\n        if (this.p1Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if (k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));\n            }\n        }\n        else {\n            --this.p1Blink;\n        }\n        var i2;\n        var l2;\n        var k;\n        var j1;\n        var k5;\n        if (this.p1Score \u003e this.p2Score + 2) {\n            i2 \u003d (this.p1X * this.nWidth / 1000 | 0);\n            l2 \u003d (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);\n            k \u003d (this.nWidth / 20 | 0);\n            j1 \u003d (this.nHeight / 20 | 0);\n            k5 \u003d 0;\n            do {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);\n                ++k5;\n            } while ((k5 \u003c 3));\n        }\n        i \u003d (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawLine(i, l + 20, 1000, l + 20);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.drawLine(i, l - 1 + 20, 1000, l - 1 + 20);\n        this.screen.drawLine(i, l + 1 + 20, 1000, l + 1 + 20);\n        this.screen.drawLine(i, l - 2 + 20, 1000, l - 2 + 20);\n        this.screen.drawLine(i, l + 2 + 20, 1000, l + 2 + 20);\n        this.screen.drawLine(i, l - 3 + 20, 1000, l - 3 + 20);\n        this.screen.drawLine(i, l + 3 + 20, 1000, l + 3 + 20);\n        this.screen.drawLine(i, l - 4 + 20, 1000, l - 4 + 20);\n        this.screen.drawLine(i, l + 4 + 20, 1000, l + 4 + 20);\n        this.screen.drawLine(i, l - 5 + 20, 1000, l - 5 + 20);\n        this.screen.drawLine(i, l + 5 + 20, 1000, l + 5 + 20);\n        this.screen.drawLine(i, l - 6 + 20, 1000, l - 6 + 20);\n        this.screen.drawLine(i, l + 6 + 20, 1000, l + 6 + 20);\n        this.screen.drawLine(i, l - 7 + 20, 1000, l - 7 + 20);\n        this.screen.drawLine(i, l + 7 + 20, 1000, l + 7 + 20);\n        this.screen.drawLine(i, l - 8 + 20, 1000, l - 8 + 20);\n        this.screen.drawLine(i, l + 8 + 20, 1000, l + 8 + 20);\n        this.screen.drawLine(i, l - 9 + 20, 1000, l - 9 + 20);\n        this.screen.drawLine(i, l + 9 + 20, 1000, l + 9 + 20);\n        this.screen.drawLine(i, l - 10 + 20, 1000, l - 10 + 20);\n        this.screen.drawLine(i, l + 10 + 20, 1000, l + 10 + 20);\n        this.screen.setColor(!this.fSuperSlime ? this.slimaryCols[this.p2Col] : this.slimaryCols[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimaryCols.length]);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        this.screen.setColor(this.secondaryCols[this.p2Col]);\n        this.pointsX[0] \u003d this.pointsX[2] \u003d i + (k1 / 2 | 0);\n        this.pointsX[1] \u003d i + (k1 * 3 / 5 | 0);\n        this.pointsX[3] \u003d i + (k1 * 7 / 8 | 0);\n        this.pointsY[0] \u003d l;\n        this.pointsY[1] \u003d this.pointsY[3] \u003d l + (j2 / 2 | 0);\n        this.pointsY[2] \u003d l + j2;\n        this.screen.fillPolygon$int_A$int_A$int(this.pointsX, this.pointsY, 4);\n        l4 \u003d this.p2X - 18;\n        i5 \u003d this.p2Y - 60;\n        i \u003d (l4 * this.nWidth / 1000 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);\n        i4 \u003d i - k3;\n        j4 \u003d l - l3;\n        k4 \u003d (Math.sqrt((i4 * i4 + j4 * j4)) | 0);\n        flag \u003d Math.random() \u003c 0.01;\n        if (flag) {\n            this.p2Blink \u003d 5;\n        }\n        if (this.p2Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(!flag ? ShimmedColor.white : ShimmedColor.gray);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if (k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));\n            }\n        }\n        else {\n            --this.p2Blink;\n        }\n        if (this.p2Score \u003e this.p1Score + 2) {\n            i2 \u003d (this.nWidth / 20 | 0);\n            l2 \u003d (this.nHeight / 20 | 0);\n            k \u003d (this.p2X * this.nWidth / 1000 | 0) - i2;\n            j1 \u003d (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);\n            k5 \u003d 0;\n            do {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);\n                ++k5;\n            } while ((k5 \u003c 3));\n        }\n        if (this.p1X \u003c 500) {\n            this.drawDust();\n        }\n    };\n    /*private*/ ElasticSlime.prototype.drawDust \u003d function () {\n    };\n    ElasticSlime.prototype.paint \u003d function (g) {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));\n        this.screen.setColor(ShimmedColor.white);\n        this.drawScores();\n        if (!this.fInPlay) {\n            this.DrawSlimers();\n            this.drawButtons();\n        }\n        this.DrawGoals();\n        this.drawPrompt();\n        if (!this.fInPlay) {\n            var fontmetrics \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            if (this.fSuperSlime) {\n                this.screen.drawString(\"Super Elastic Soccer Slime!\", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth(\"Super Soccer Slime!\") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());\n            }\n            else {\n                this.screen.drawString(\"Elastic Soccer Slime!\", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth(\"Soccer Slime!\") / 2 | 0), (this.nHeight / 2 | 0) - fontmetrics.getHeight());\n            }\n            this.screen.setColor(ShimmedColor.white);\n            fontmetrics \u003d this.screen.getFontMetrics();\n            this.screen.drawString(\"Written by Quin Pendragon + Anonymous Tipster\", (this.nWidth / 2 | 0) - (fontmetrics.stringWidth(\"Written by Quin Pendragon + Anonymous Tipster\") / 2 | 0), (this.nHeight / 2 | 0) + fontmetrics.getHeight() * 2);\n        }\n        this.flip();\n    };\n    ElasticSlime.prototype.destroy \u003d function () {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    };\n    /*private*/ ElasticSlime.prototype.ReplayFrame \u003d function (i, j, k, l, i1, flag) {\n        if (flag) {\n            this.ballX \u003d -1000;\n            this.ballOldX \u003d 500;\n            this.ballY \u003d -1000;\n            this.ballOldY \u003d 500;\n            this.p1OldX \u003d this.p1OldY \u003d this.p2OldX \u003d this.p2OldY \u003d -10000;\n        }\n        else {\n            var j1 \u003d i \u003d\u003d\u003d 0 ? 199 : i - 1;\n            this.p1OldX \u003d this.replayData[j1][0];\n            this.p1OldY \u003d this.replayData[j1][1];\n            this.p2OldX \u003d this.replayData[j1][2];\n            this.p2OldY \u003d this.replayData[j1][3];\n            if (i \u003d\u003d\u003d 0) {\n                this.ballOldX \u003d 500;\n                this.ballOldY \u003d 200;\n            }\n            else {\n                this.ballOldX \u003d this.replayData[j1][4];\n                this.ballOldY \u003d this.replayData[j1][5];\n            }\n        }\n        this.p1X \u003d this.replayData[i][0];\n        this.p1Y \u003d this.replayData[i][1];\n        this.p2X \u003d this.replayData[i][2];\n        this.p2Y \u003d this.replayData[i][3];\n        this.ballX \u003d this.replayData[i][4];\n        this.ballY \u003d this.replayData[i][5];\n        this.p1Col \u003d this.replayData[i][6];\n        this.p2Col \u003d this.replayData[i][7];\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 1;\n        if ((i / 10 | 0) % 2 \u003e 0) {\n            this.screen.setColor(ShimmedColor.red);\n            this.screen.drawString(\"Replay...\", j, k);\n        }\n        else {\n            this.screen.setColor(ShimmedColor.blue);\n            this.screen.fillRect(j, k - i1, l, i1 * 2);\n        }\n        this.DrawSlimers();\n        this.DrawGoals();\n        try {\n            ShimmedThread.sleep$long(20);\n        }\n        catch (var9) {\n        }\n        ;\n    };\n    /*private*/ ElasticSlime.prototype.MakeTime \u003d function (l) {\n        var l1 \u003d Math.floor(l / 10) % 100;\n        var l2 \u003d Math.floor(l / 1000) % 60;\n        var l3 \u003d Math.floor(l / 60000) % 60;\n        var s \u003d \"\";\n        if (l3 \u003c 10) {\n            s \u003d s + \"0\";\n        }\n        s \u003d s + l3;\n        s \u003d s + \":\";\n        if (l2 \u003c 10) {\n            s \u003d s + \"0\";\n        }\n        s \u003d s + l2;\n        s \u003d s + \":\";\n        if (l1 \u003c 10) {\n            s \u003d s + \"0\";\n        }\n        s \u003d s + l1;\n        return s;\n    };\n    /*private*/ ElasticSlime.prototype.MoveSlimers \u003d function () {\n        if (this.worldCup) {\n            switch ((this.worldCupRound)) {\n                case 0:\n                    this.controlP2v0();\n                    break;\n                case 1:\n                    this.controlP2v1();\n                    break;\n                case 2:\n                    this.controlP2v2();\n                    break;\n                case 3:\n                    this.controlP2v3();\n            }\n        }\n        this.p1X +\u003d this.p1XV;\n        if (this.p1X \u003c 50) {\n            this.p1X \u003d 50;\n        }\n        if (this.p1X \u003e 950) {\n            this.p1X \u003d 950;\n        }\n        if (this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d this.GRAVITY;\n            if (this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        this.p2X +\u003d this.p2XV;\n        if (this.p2X \u003e 950) {\n            this.p2X \u003d 950;\n        }\n        if (this.p2X \u003c 50) {\n            this.p2X \u003d 50;\n        }\n        if (this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d this.GRAVITY;\n            if (this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n    };\n    /*private*/ ElasticSlime.prototype.MoveBall \u003d function () {\n        var k \u003d (30 * this.nHeight / 1000 | 0);\n        var i \u003d (this.ballOldX * this.nWidth / 1000 | 0);\n        var j \u003d (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        if (!this.fEndGame) {\n            var l1 \u003d (this.ballX - this.p1X) * 2;\n            var i2 \u003d this.ballY - this.p1Y;\n            var j2 \u003d l1 * l1 + i2 * i2;\n            var k2 \u003d this.ballVX - this.p1XV;\n            var l2 \u003d this.ballVY - this.p1YV;\n            var i1 \u003d void 0;\n            var k1 \u003d void 0;\n            if (i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (Math.sqrt(j2) | 0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1 | 0);\n                this.ballX \u003d this.p1X + (l1 * 63 / i1 | 0);\n                this.ballY \u003d this.p1Y + (i2 * 125 / i1 | 0);\n                if (k1 \u003c\u003d 0) {\n                    if (!this.fP1Sticky) {\n                        this.ballVY +\u003d this.p1YV - (2 * i2 * k1 / i1 | 0);\n                        this.ballVX +\u003d ((this.p1XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);\n                    }\n                    else {\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                    }\n                    if (this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if (this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    if (this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if (this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP1Touched \u003d true;\n            }\n            l1 \u003d (this.ballX - this.p2X) * 2;\n            i2 \u003d this.ballY - this.p2Y;\n            j2 \u003d l1 * l1 + i2 * i2;\n            k2 \u003d this.ballVX - this.p2XV;\n            l2 \u003d this.ballVY - this.p2YV;\n            if (i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (Math.sqrt(j2) | 0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1 | 0);\n                this.ballX \u003d this.p2X + (l1 * 63 / i1 | 0);\n                this.ballY \u003d this.p2Y + (i2 * 125 / i1 | 0);\n                if (k1 \u003c\u003d 0) {\n                    if (!this.fP2Sticky) {\n                        this.ballVX +\u003d ((this.p2XV - (2 * l1 * k1 / i1 | 0)) * 7 / 10 | 0);\n                        this.ballVY +\u003d this.p2YV - (2 * i2 * k1 / i1 | 0);\n                    }\n                    else {\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                    }\n                    if (this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if (this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    if (this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if (this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP2Touched \u003d true;\n            }\n            if (this.ballX \u003c 15) {\n                this.ballX \u003d 15;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if (this.ballX \u003e 985) {\n                this.ballX \u003d 985;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if (this.ballX \u003c\u003d 50 || this.ballX \u003e\u003d 950) {\n                if (this.ballY \u003e 200 \u0026\u0026 this.ballOldY \u003c 200 || this.ballY \u003c 200 \u0026\u0026 this.ballOldY \u003e\u003d 200) {\n                    this.ballY \u003d 200;\n                    this.ballVY *\u003d -1;\n                }\n                if (this.ballY \u003e 180 \u0026\u0026 this.ballY \u003c 220) {\n                    if (this.ballX \u003e 40 \u0026\u0026 this.ballX \u003c 50 \u0026\u0026 this.ballVX \u003c 0) {\n                        this.ballX \u003d 50;\n                        this.ballVX *\u003d -1;\n                    }\n                    if (this.ballX \u003c 960 \u0026\u0026 this.ballX \u003e 950 \u0026\u0026 this.ballVX \u003e 0) {\n                        this.ballX \u003d 950;\n                        this.ballVX *\u003d -1;\n                    }\n                }\n            }\n            if (this.ballY \u003c 34) {\n                this.ballY \u003d 34;\n                this.ballVY \u003d (-this.ballVY * 7 / 10 | 0);\n                this.ballVX \u003d (this.ballVX * 7 / 10 | 0);\n            }\n        }\n        i \u003d (this.ballX * this.nWidth / 1000 | 0);\n        j \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        this.screen.setColor(ShimmedColor.yellow);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n    };\n    /*private*/ ElasticSlime.prototype.DrawGoals \u003d function () {\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillRect((this.nWidth / 20 | 0), (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));\n        this.screen.fillRect(this.nWidth - (this.nWidth / 20 | 0) - 5, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), 5, (200 * this.nHeight / 1000 | 0));\n        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);\n        this.screen.fillRect((this.nWidth * 9 / 10 | 0), (4 * this.nHeight / 5 | 0) + 2, (this.nWidth / 10 | 0), 2);\n        var p1TickX;\n        for (p1TickX \u003d 0; p1TickX \u003c (this.nWidth / 20 | 0); p1TickX +\u003d 5) {\n            this.screen.drawLine(p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), p1TickX, (4 * this.nHeight / 5 | 0));\n            this.screen.drawLine(this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0) - (200 * this.nHeight / 1000 | 0), this.nWidth - p1TickX, (4 * this.nHeight / 5 | 0));\n        }\n        ;\n        for (p1TickX \u003d (4 * this.nHeight / 5 | 0) - (this.nHeight / 5 | 0); p1TickX \u003c (4 * this.nHeight / 5 | 0); p1TickX +\u003d 5) {\n            this.screen.drawLine(0, p1TickX, (this.nWidth / 20 | 0), p1TickX);\n            this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - (this.nWidth / 20 | 0), p1TickX);\n        }\n        ;\n        p1TickX \u003d ((600000000 - this.p1TouchingGoal) * this.nWidth / 1200000000 | 0);\n        this.screen.setColor(this.secondaryCols[this.p1Col]);\n        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2 | 0) - p1TickX, 5);\n        var p2TickX \u003d this.nWidth - ((600000000 - this.p2TouchingGoal) * this.nWidth / 1200000000 | 0);\n        this.screen.setColor(this.secondaryCols[this.p2Col]);\n        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect((this.nWidth / 2 | 0), this.nHeight - 5, p2TickX - (this.nWidth / 2 | 0), 5);\n    };\n    /*private*/ ElasticSlime.prototype.DrawStatus \u003d function () {\n        var g \u003d this.screen;\n        var fontmetrics \u003d this.screen.getFontMetrics();\n        var s \u003d null;\n        var time \u003d this.MakeTime(this.gameTime);\n        var i \u003d (this.nHeight / 20 | 0);\n        var k \u003d 0;\n        var kt \u003d fontmetrics.stringWidth(time);\n        if (this.worldCup) {\n            switch ((this.worldCupRound)) {\n                case 1:\n                    s \u003d \"Quarter Finals\";\n                    break;\n                case 2:\n                    s \u003d \"Semi-Finals\";\n                    break;\n                case 3:\n                    s \u003d \"Final\";\n                    break;\n                default:\n                    s \u003d \"Qualifying\";\n            }\n            if (this.fGoldenGoal) {\n                s \u003d s + \" [Golden Goal]\";\n            }\n            else if (this.fExtraTime) {\n                s \u003d s + \" [Extra Time]\";\n            }\n            k \u003d fontmetrics.stringWidth(s);\n        }\n        var mw \u003d k \u003c\u003d kt ? kt : k;\n        g.setColor(ShimmedColor.blue);\n        g.fillRect((this.nWidth / 2 | 0) - (mw / 2 | 0) - 5, 0, mw + 10, i + 22);\n        g.setColor(ShimmedColor.white);\n        this.screen.drawString(time, (this.nWidth / 2 | 0) - (kt / 2 | 0), fontmetrics.getAscent() + 20);\n        if (s !\u003d null) {\n            this.screen.drawString(s, (this.nWidth / 2 | 0) - (k / 2 | 0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());\n        }\n    };\n    ElasticSlime.prototype.drawPrompt$ \u003d function () {\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    };\n    ElasticSlime.prototype.drawPrompt$java_lang_String$int \u003d function (s, i) {\n        var fontmetrics \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.lightGray);\n        this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);\n    };\n    ElasticSlime.prototype.drawPrompt \u003d function (s, i) {\n        if (((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null) \u0026\u0026 ((typeof i \u003d\u003d\u003d \u0027number\u0027) || i \u003d\u003d\u003d null)) {\n            return this.drawPrompt$java_lang_String$int(s, i);\n        }\n        else if (s \u003d\u003d\u003d undefined \u0026\u0026 i \u003d\u003d\u003d undefined) {\n            return this.drawPrompt$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    /*private*/ ElasticSlime.prototype.promptBox \u003d function (msg1, msg2) {\n        var fontmetrics \u003d this.screen.getFontMetrics();\n        var len1 \u003d fontmetrics.stringWidth(msg1);\n        var len2 \u003d fontmetrics.stringWidth(msg2);\n        var maxlen \u003d len1 \u003c\u003d len2 ? len2 : len1;\n        this.screen.setColor(ShimmedColor.darkGray);\n        this.screen.fillRect((this.nWidth / 2 | 0) - (maxlen / 2 | 0) - 20, (this.nHeight * 2 / 5 | 0), maxlen + 40, (this.nHeight / 5 | 0));\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawString(msg1, (this.nWidth / 2 | 0) - (len1 / 2 | 0), (this.nHeight * 9 / 20 | 0));\n        this.screen.drawString(msg2, (this.nWidth / 2 | 0) - (len2 / 2 | 0), (this.nHeight * 11 / 20 | 0));\n        this.flip();\n    };\n    /*private*/ ElasticSlime.prototype.SaveReplayData \u003d function () {\n        this.replayData[this.replayPos][0] \u003d this.p1X;\n        this.replayData[this.replayPos][1] \u003d this.p1Y;\n        this.replayData[this.replayPos][2] \u003d this.p2X;\n        this.replayData[this.replayPos][3] \u003d this.p2Y;\n        this.replayData[this.replayPos][4] \u003d this.ballX;\n        this.replayData[this.replayPos][5] \u003d this.ballY;\n        this.replayData[this.replayPos][6] \u003d this.p1Col;\n        this.replayData[this.replayPos][7] \u003d this.p2Col;\n        ++this.replayPos;\n        if (this.replayPos \u003e\u003d 200) {\n            this.replayPos \u003d 0;\n        }\n        if (this.replayStart \u003d\u003d\u003d this.replayPos) {\n            ++this.replayStart;\n        }\n        if (this.replayStart \u003e\u003d 200) {\n            this.replayStart \u003d 0;\n        }\n    };\n    /*private*/ ElasticSlime.prototype.drawScores \u003d function () {\n        var g \u003d this.screen;\n        var k \u003d (this.nHeight / 20 | 0);\n        var fm \u003d this.screen.getFontMetrics();\n        var i \u003d fm.stringWidth(\"Replay...\");\n        g.setColor(ShimmedColor.blue);\n        g.fillRect(0, 0, this.nWidth, k + 22);\n        g.setColor(ShimmedColor.white);\n        g.drawString(this.slimeColText[this.p1Col] + \" : \" + this.p1Score, (this.nWidth / 20 | 0), k);\n        var p2ScrStr \u003d this.p2Score + \" : \" + this.slimeColText[this.p2Col];\n        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20 | 0) - fm.stringWidth(p2ScrStr), k);\n    };\n    ElasticSlime.prototype.checkScored \u003d function () {\n        if (this.ballY \u003e\u003d 200 || this.ballX \u003e\u003d 40 \u0026\u0026 this.ballX \u003c\u003d 960) {\n            return false;\n        }\n        else {\n            this.nScoreX \u003d this.ballX;\n            this.fPlayOn \u003d true;\n            this.playOnTicks \u003d 10;\n            return true;\n        }\n    };\n    ElasticSlime.prototype.run \u003d function () {\n        this.worldCupRound \u003d 0;\n        do {\n            this.initStuff();\n            this.replayPos \u003d this.replayStart \u003d 0;\n            this.scoringRun \u003d 0;\n            this.fP1Touched \u003d this.fP2Touched \u003d false;\n            this.gameTime \u003d 0;\n            this.startTime \u003d ShimmedSystem.currentTimeMillis();\n            this.fEndGame \u003d false;\n            this.fCanChangeCol \u003d false;\n            this.mousePressed \u003d false;\n            this.gameTime \u003d Math.floor(this.gameLength);\n            this.fInPlay \u003d true;\n            this.fEndGame \u003d false;\n            var l \u003d void 0;\n            if (this.worldCup) {\n                this.paint(this.getGraphics());\n                do {\n                    this.p2Col \u003d ((Math.random() * this.slimaryCols.length / 4.0) | 0) + (this.worldCupRound * this.slimaryCols.length / 4 | 0);\n                } while ((this.p1Col \u003d\u003d\u003d this.p2Col));\n                l \u003d this.slimeColText[this.p1Col] + \" vs. \" + this.slimeColText[this.p2Col];\n                switch ((this.worldCupRound)) {\n                    case 0:\n                        this.promptBox(\"Qualifying Round\", l);\n                        this.gameLength \u003d 30000;\n                        break;\n                    case 1:\n                        this.promptBox(\"Quarter Finals\", l);\n                        this.gameLength \u003d 120000;\n                        break;\n                    case 2:\n                        this.promptBox(\"Semi-Finals\", l);\n                        this.gameLength \u003d 120000;\n                        break;\n                    case 3:\n                        this.promptBox(\"World Cup Final\", l);\n                        this.gameLength \u003d 300000;\n                }\n                try {\n                    ShimmedThread.sleep$long(4000);\n                }\n                catch (var5) {\n                }\n                ;\n                this.repaint();\n                this.flip();\n            }\n            while ((this.gameTime \u003e 0 || this.worldCup \u0026\u0026 this.worldCupRound \u003e 0 \u0026\u0026 this.p1Score \u003d\u003d\u003d this.p2Score)) {\n                this.gameTime \u003d this.startTime + Math.floor(this.gameLength) - ShimmedSystem.currentTimeMillis();\n                if (this.gameTime \u003c 0) {\n                    this.gameTime \u003d 0;\n                }\n                if (this.worldCup \u0026\u0026 !this.fExtraTime \u0026\u0026 this.gameTime \u003c\u003d 0 \u0026\u0026 this.worldCupRound \u003e 0 \u0026\u0026 this.p1Score \u003d\u003d\u003d this.p2Score) {\n                    l \u003d this.p1Score !\u003d\u003d 0 ? \" \" + this.p1Score : \" nil\";\n                    this.promptBox(\"The score is \" + this.slimeColText[this.p1Col] + l + \", \" + this.slimeColText[this.p2Col] + l + \".\", \"And the game goes into extra time...\");\n                    try {\n                        ShimmedThread.sleep$long(4000);\n                    }\n                    catch (var10) {\n                    }\n                    ;\n                    this.repaint();\n                    this.flip();\n                    this.startTime +\u003d 30000;\n                    this.gameTime +\u003d 30000;\n                    this.fExtraTime \u003d true;\n                }\n                else if (this.gameTime \u003c\u003d 0 \u0026\u0026 this.fExtraTime \u0026\u0026 !this.fGoldenGoal \u0026\u0026 this.p1Score \u003d\u003d\u003d this.p2Score) {\n                    this.fGoldenGoal \u003d true;\n                    l \u003d this.p1Score !\u003d\u003d 0 ? \" \" + this.p1Score : \" nil\";\n                    this.promptBox(\"The score is \" + this.slimeColText[this.p1Col] + l + \", \" + this.slimeColText[this.p2Col] + l + \", and the game goes into Golden Goal.\", \"The next player to score will win the match!\");\n                    try {\n                        ShimmedThread.sleep$long(4000);\n                    }\n                    catch (var9) {\n                    }\n                    ;\n                    this.repaint();\n                    this.flip();\n                }\n                this.SaveReplayData();\n                this.p1OldX \u003d this.p1X;\n                this.p1OldY \u003d this.p1Y;\n                this.p2OldX \u003d this.p2X;\n                this.p2OldY \u003d this.p2Y;\n                this.ballOldX \u003d this.ballX;\n                this.ballOldY \u003d this.ballY;\n                this.MoveSlimers();\n                this.DrawSlimers();\n                this.DrawGoals();\n                this.DrawStatus();\n                this.flip();\n                if (this.p1X \u003c 150) {\n                    ++this.p1TouchingGoal;\n                }\n                else {\n                    this.p1TouchingGoal \u003d 0;\n                }\n                if (this.p2X \u003e 850) {\n                    ++this.p2TouchingGoal;\n                }\n                else {\n                    this.p2TouchingGoal \u003d 0;\n                }\n                if (this.fPlayOn) {\n                    --this.playOnTicks;\n                }\n                else {\n                    this.fPlayOn \u003d this.checkScored();\n                }\n                if (this.playOnTicks \u003d\u003d\u003d 0 || this.p1TouchingGoal \u003e 600000000 || this.p2TouchingGoal \u003e 600000000) {\n                    var var11 \u003d ShimmedSystem.currentTimeMillis();\n                    if (this.p1TouchingGoal \u003e 600000000) {\n                        ++this.p2Score;\n                        this.promptMsg \u003d this.slimeColText[this.p1Col] + \" pinged for goal hanging!\";\n                    }\n                    else if (this.p2TouchingGoal \u003e 600000000) {\n                        ++this.p1Score;\n                        this.promptMsg \u003d this.slimeColText[this.p2Col] + \" pinged for goal hanging!\";\n                    }\n                    else if (this.nScoreX \u003c 500) {\n                        ++this.p2Score;\n                        this.promptMsg \u003d this.slimeColText[this.p2Col] + \" Scores!\";\n                    }\n                    else {\n                        ++this.p1Score;\n                        this.promptMsg \u003d this.slimeColText[this.p1Col] + \" Scores!\";\n                    }\n                    this.drawPrompt();\n                    this.drawPrompt$java_lang_String$int(\"Click mouse for replay...\", 1);\n                    this.flip();\n                    this.mousePressed \u003d false;\n                    if (this.gameThread !\u003d null) {\n                        try {\n                            ShimmedThread.sleep$long(2500);\n                        }\n                        catch (var8) {\n                        }\n                        ;\n                    }\n                    if (this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt();\n                    this.playOnTicks \u003d 10;\n                    this.fPlayOn \u003d false;\n                    this.startTime +\u003d ShimmedSystem.currentTimeMillis() - var11;\n                    this.ballX \u003d 490 + ((Math.random() * 20.0) | 0);\n                    this.ballY \u003d 190 + ((Math.random() * 20.0) | 0);\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.repaint();\n                }\n                if (this.gameThread !\u003d null) {\n                    try {\n                        if (this.fPlayOn) {\n                            ShimmedThread.sleep$long(120);\n                        }\n                        else {\n                            ShimmedThread.sleep$long(20);\n                        }\n                    }\n                    catch (var7) {\n                    }\n                    ;\n                }\n            }\n            ;\n            this.fEndGame \u003d true;\n            if (this.fPlayOn) {\n                if (this.nScoreX \u003c 500) {\n                    ++this.p2Score;\n                    this.promptMsg \u003d this.slimeColText[this.p2Col] + \" scores at the final whistle!\";\n                }\n                else {\n                    ++this.p1Score;\n                    this.promptMsg \u003d this.slimeColText[this.p1Col] + \" scores at the final whistle!\";\n                }\n                this.drawPrompt();\n            }\n            else {\n                this.drawPrompt$java_lang_String$int(\"And that\\\u0027s the final whistle!\", 0);\n            }\n            if (this.worldCup) {\n                if (this.p1Score \u003d\u003d\u003d this.p2Score) {\n                    this.drawPrompt$java_lang_String$int(\"It\\\u0027s a draw at full time, here at Slime Stadium!\", 1);\n                    this.promptBox(\"You played well, but a draw is not enough.\", \"You have been eliminated.\");\n                    this.worldCup \u003d false;\n                    this.flip();\n                }\n                else if (this.p1Score \u003e\u003d this.p2Score) {\n                    switch ((this.worldCupRound)) {\n                        case 0:\n                            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" qualifies for the world cup!\", 1);\n                            break;\n                        case 1:\n                            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" proceeds to the semi-finals!\", 1);\n                            break;\n                        case 2:\n                            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" is through to the final!!!\", 1);\n                            break;\n                        case 3:\n                            this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" wins the WORLD CUP!!!!!\", 1);\n                    }\n                    if (this.worldCupRound \u003d\u003d\u003d 3) {\n                        this.worldCup \u003d false;\n                        this.promptBox(\"You win the world cup!!!\", \"Congratulations!\");\n                    }\n                    else {\n                        ++this.worldCupRound;\n                    }\n                }\n                else {\n                    switch ((this.worldCupRound)) {\n                        case 0:\n                        case 1:\n                            this.promptBox(\"You have been eliminated.\", \"Goodbye.\");\n                            break;\n                        case 2:\n                            this.promptBox(\"You have been knocked out of the semifinals.\", \"You played well.\");\n                            break;\n                        case 3:\n                            this.promptBox(\"You came second.\", \"Are you satisfied with that?\");\n                    }\n                    this.worldCup \u003d false;\n                }\n            }\n            else if (this.p1Score \u003d\u003d\u003d this.p2Score) {\n                this.drawPrompt$java_lang_String$int(\"It\\\u0027s a draw at full time, here at Slime Stadium!\", 1);\n            }\n            else if (this.p1Score \u003c this.p2Score) {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p2Col] + \" (\" + this.p2Score + \")    def. \" + this.slimeColText[this.p1Col] + \" (\" + this.p1Score + \")\", 1);\n            }\n            else {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" (\" + this.p1Score + \")    def. \" + this.slimeColText[this.p2Col] + \" (\" + this.p2Score + \")\", 1);\n            }\n            this.flip();\n            try {\n                ShimmedThread.sleep$long(5000);\n            }\n            catch (var6) {\n            }\n            ;\n            this.initStuff();\n        } while ((this.worldCup));\n        this.fCanChangeCol \u003d true;\n        this.fInPlay \u003d false;\n        this.repaint();\n    };\n    ElasticSlime.prototype.init \u003d function () {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.fInPlay \u003d this.fEndGame \u003d false;\n        this.fCanChangeCol \u003d true;\n        this.initStuff();\n        this.promptMsg \u003d \"Click on an option to play...\";\n        this.backBuffer \u003d this.createImage(this.nWidth, this.nHeight);\n        this.screen \u003d this.getGraphics();\n        this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n    };\n    /*private*/ ElasticSlime.prototype.toggleBuffering \u003d function () {\n        if (this.doubleBuffered \u003d !this.doubleBuffered) {\n            this.screen \u003d this.backBuffer.getGraphics();\n            this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n        }\n        else {\n            this.screen \u003d this.getGraphics();\n            this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n        }\n        this.repaint();\n    };\n    /*private*/ ElasticSlime.prototype.DoReplay \u003d function () {\n        var fontmetrics \u003d this.screen.getFontMetrics();\n        var i \u003d fontmetrics.stringWidth(\"Replay...\");\n        var j \u003d fontmetrics.getHeight();\n        var k \u003d (this.nWidth / 2 | 0) - (i / 2 | 0);\n        var l \u003d (this.nHeight / 2 | 0) - j;\n        this.promptMsg \u003d \"Click the mouse to continue...\";\n        this.mousePressed \u003d false;\n        var i1 \u003d this.replayPos - 1;\n        while ((!this.mousePressed)) {\n            ++i1;\n            if (i1 \u003e\u003d 200) {\n                i1 \u003d 0;\n            }\n            if (i1 \u003d\u003d\u003d this.replayPos) {\n                try {\n                    ShimmedThread.sleep$long(1000);\n                }\n                catch (var9) {\n                }\n                ;\n                i1 \u003d this.replayStart;\n                this.paint(this.getGraphics());\n            }\n            this.ReplayFrame(i1, k, l, i, j, false);\n            this.flip();\n        }\n        ;\n        this.promptMsg \u003d \"\";\n        this.paint(this.getGraphics());\n    };\n    /*private*/ ElasticSlime.prototype.flip \u003d function () {\n        if (this.doubleBuffered) {\n            this.getGraphics().drawImage(this.backBuffer, 0, 0, null);\n        }\n    };\n    /*private*/ ElasticSlime.prototype.getBallBounceX \u003d function () {\n        var t \u003d this.ballVY + (Math.sqrt((this.ballVY * this.ballVY + 2 * this.ballY)) | 0);\n        var ballBounceX \u003d this.ballX + t * this.ballVX;\n        if (ballBounceX \u003c 0) {\n            ballBounceX \u003d -ballBounceX;\n        }\n        if (ballBounceX \u003e 1000) {\n            ballBounceX \u003d 1000 - ballBounceX;\n        }\n        return ballBounceX;\n    };\n    /*private*/ ElasticSlime.prototype.getBallMaxY \u003d function () {\n        return this.ballVY \u003c 0 ? this.ballY : this.ballY + (this.ballVY * this.ballVY / 2 | 0);\n    };\n    /*private*/ ElasticSlime.prototype.controlP2v0 \u003d function () {\n        this.p2XV \u003d 0;\n        if (this.ballX \u003e this.p2X + 5 \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if (this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if (this.ballX + 50 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n        if (this.ballX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballY \u003e 10 \u0026\u0026 this.ballY \u003c 150) {\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if (this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n    };\n    /*private*/ ElasticSlime.prototype.controlP2v1 \u003d function () {\n        this.p2XV \u003d 0;\n        var bounceX \u003d this.getBallBounceX();\n        var ballMaxY \u003d this.getBallMaxY();\n        if (this.ballVY \u003e\u003d 1) {\n            var var10000 \u003d this.ballVY;\n        }\n        else {\n            var var4 \u003d true;\n        }\n        if (bounceX \u003e 900) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (bounceX + 20 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n        if (this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if (bounceX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (this.ballX \u003e this.p2X \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if (this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballX \u003e this.p1X - 120 \u0026\u0026 this.ballX \u003c this.p1X + 120 \u0026\u0026 this.ballY \u003e this.p1Y \u0026\u0026 this.ballY \u003c this.p1Y + 100 \u0026\u0026 this.p1Y \u003e 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (this.p2Score \u003e\u003d this.p1Score \u0026\u0026 bounceX \u003c 200 \u0026\u0026 this.p2X \u003e this.p1X || bounceX \u003c this.p1X + 50 \u0026\u0026 bounceX \u003e this.p1X - 50 \u0026\u0026 (this.ballVY / 4 | 0) \u003d\u003d\u003d 0 \u0026\u0026 this.p1X \u003c 400 \u0026\u0026 this.p2X \u003c 848) {\n            if (this.p2X \u003c 900) {\n                this.p2XV \u003d this.SLIMEVEL;\n            }\n            if (this.ballX \u003e 800 \u0026\u0026 bounceX \u003e 950 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 ballMaxY \u003e 40) {\n                this.p2YV \u003d this.JUMPVEL;\n            }\n        }\n        if (this.p2YV \u003d\u003d\u003d this.JUMPVEL) {\n            if (ballMaxY \u003c 110) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballX \u003c this.p2X - 400) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballY \u003c 80) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballX \u003c 900 \u0026\u0026 this.p2X \u003e 900) {\n                this.p2YV \u003d 0;\n            }\n            if (this.p2X \u003c 150) {\n                this.p2YV \u003d 0;\n            }\n        }\n        if (this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n    };\n    /*private*/ ElasticSlime.prototype.controlP2v2 \u003d function () {\n        var bounceX \u003d this.getBallBounceX();\n        var ballMaxY \u003d this.getBallMaxY();\n        if (this.ballVY \u003e\u003d 1) {\n            var var10000 \u003d this.ballVY;\n        }\n        else {\n            var var4 \u003d true;\n        }\n        if (this.p2X \u003c 790) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        else if (this.p2X \u003e 830) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n        else {\n            this.p2XV \u003d 0;\n        }\n        if (bounceX \u003e 900) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (bounceX + 20 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n        if (this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if (bounceX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (this.ballX \u003e this.p2X \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if (this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballX \u003e this.p1X - 120 \u0026\u0026 this.ballX \u003c this.p1X + 120 \u0026\u0026 this.ballY \u003e this.p1Y \u0026\u0026 this.ballY \u003c this.p1Y + 100 \u0026\u0026 this.p1Y \u003e 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if (this.p2Score \u003e\u003d this.p1Score \u0026\u0026 bounceX \u003c 200 \u0026\u0026 this.p2X \u003e this.p1X || bounceX \u003c this.p1X + 50 \u0026\u0026 bounceX \u003e this.p1X - 50 \u0026\u0026 (this.ballVY / 4 | 0) \u003d\u003d\u003d 0 \u0026\u0026 this.p1X \u003c 400 \u0026\u0026 this.p2X \u003c 848) {\n            if (this.p2X \u003c 900) {\n                this.p2XV \u003d this.SLIMEVEL;\n            }\n            if (this.ballX \u003e 800 \u0026\u0026 bounceX \u003e 950 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 ballMaxY \u003e 40) {\n                this.p2YV \u003d this.JUMPVEL;\n            }\n        }\n        if (this.p2YV \u003d\u003d\u003d this.JUMPVEL) {\n            if (ballMaxY \u003c 110) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballX \u003c this.p2X - 400) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballY \u003c 80) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballX \u003c 900 \u0026\u0026 this.p2X \u003e 900) {\n                this.p2YV \u003d 0;\n            }\n        }\n        if (this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.p2X \u003c 400 \u0026\u0026 bounceX \u003e 500 \u0026\u0026 ballMaxY \u003e 50) {\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if (this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / this.SLIMEVEL | 0)) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n    };\n    /*private*/ ElasticSlime.prototype.controlP2v3 \u003d function () {\n        var SLIMEVEL \u003d (this.SLIMEVEL * 4 / 3 | 0);\n        var bounceX \u003d this.getBallBounceX();\n        var ballMaxY \u003d this.getBallMaxY();\n        if (this.ballVY \u003e\u003d 1) {\n            var var10000 \u003d this.ballVY;\n        }\n        else {\n            var var5 \u003d true;\n        }\n        if (this.p2X \u003c 790) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        else if (this.p2X \u003e 830) {\n            this.p2XV \u003d -SLIMEVEL;\n        }\n        else {\n            this.p2XV \u003d 0;\n        }\n        if (bounceX \u003e 900) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if (bounceX + 20 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -SLIMEVEL;\n        }\n        if (this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if (this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if (bounceX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if (this.ballX \u003e this.p2X \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if (this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballX \u003e this.p1X - 120 \u0026\u0026 this.ballX \u003c this.p1X + 120 \u0026\u0026 this.ballY \u003e this.p1Y \u0026\u0026 this.ballY \u003c this.p1Y + 100 \u0026\u0026 this.p1Y \u003e 0) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if (this.p2Score \u003e\u003d this.p1Score \u0026\u0026 bounceX \u003c 200 \u0026\u0026 this.p2X \u003e this.p1X || bounceX \u003c this.p1X + 50 \u0026\u0026 bounceX \u003e this.p1X - 50 \u0026\u0026 (this.ballVY / 4 | 0) \u003d\u003d\u003d 0 \u0026\u0026 this.p1X \u003c 400 \u0026\u0026 this.p2X \u003c 848) {\n            if (this.p2X \u003c 900) {\n                this.p2XV \u003d SLIMEVEL;\n            }\n            if (this.ballX \u003e 800 \u0026\u0026 bounceX \u003e 950 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 ballMaxY \u003e 40) {\n                this.p2YV \u003d this.JUMPVEL;\n            }\n        }\n        if (this.p2YV \u003d\u003d\u003d this.JUMPVEL) {\n            if (ballMaxY \u003c 110) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballX \u003c this.p2X - 400) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballY \u003c 80) {\n                this.p2YV \u003d 0;\n            }\n            if (this.ballX \u003c 900 \u0026\u0026 this.p2X \u003e 900) {\n                this.p2YV \u003d 0;\n            }\n            if (this.p2XV \u003e 0 \u0026\u0026 ballMaxY \u003e 200 \u0026\u0026 bounceX \u003e this.p2X + 300) {\n                this.p2YV \u003d 0;\n            }\n        }\n        if (this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.p2X \u003c 400 \u0026\u0026 bounceX \u003e this.p2X + 400 \u0026\u0026 ballMaxY \u003e 50) {\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if (this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / SLIMEVEL | 0)) {\n            this.p2XV \u003d -SLIMEVEL;\n        }\n    };\n    /*private*/ ElasticSlime.prototype.method_rn_ElasticSlime_p_1 \u003d function (s) {\n        ShimmedSystem.out.println$java_lang_Object(s);\n    };\n    return ElasticSlime;\n}(ShimmedApplet));\nElasticSlime[\"__class\"] \u003d \"ElasticSlime\";\nElasticSlime[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\nvar ShimmedBufferedImage \u003d (function (_super) {\n    __extends(ShimmedBufferedImage, _super);\n    function ShimmedBufferedImage(x, y, z) {\n        return _super.call(this) || this;\n    }\n    ShimmedBufferedImage.prototype.getSubimage \u003d function (a, b, c, d) {\n        return null;\n    };\n    return ShimmedBufferedImage;\n}(ShimmedImage));\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\nvar ShimmedFrame \u003d (function (_super) {\n    __extends(ShimmedFrame, _super);\n    function ShimmedFrame() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    ShimmedFrame.prototype.setTitle \u003d function (s) {\n    };\n    ShimmedFrame.prototype.pack \u003d function () {\n    };\n    ShimmedFrame.prototype.show \u003d function () {\n    };\n    ShimmedFrame.prototype.dispose \u003d function () {\n    };\n    ShimmedFrame.prototype.setLayout \u003d function (g) {\n    };\n    return ShimmedFrame;\n}(ShimmedElement));\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\nvar ShimmedTextField \u003d (function (_super) {\n    __extends(ShimmedTextField, _super);\n    function ShimmedTextField(s) {\n        return _super.call(this) || this;\n    }\n    ShimmedTextField.prototype.getText \u003d function () {\n        return null;\n    };\n    return ShimmedTextField;\n}(ShimmedElement));\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\nvar ShimmedButton \u003d (function (_super) {\n    __extends(ShimmedButton, _super);\n    function ShimmedButton(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedButton;\n}(ShimmedElement));\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\nvar ShimmedPanel \u003d (function (_super) {\n    __extends(ShimmedPanel, _super);\n    function ShimmedPanel() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    return ShimmedPanel;\n}(ShimmedElement));\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\nvar ShimmedLabel \u003d (function (_super) {\n    __extends(ShimmedLabel, _super);\n    function ShimmedLabel(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedLabel;\n}(ShimmedElement));\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n",
  "tsout": "/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nclass ShimmedSize {\n    public width : number;\n\n    public height : number;\n\n    constructor() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n}\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\n\n\nclass ShimmedApplet {\n    public size() : ShimmedSize {\n        return null;\n    }\n\n    public createImage(x : number, y : number) : ShimmedImage {\n        return null;\n    }\n\n    public showStatus(s : string) {\n    }\n\n    public repaint() {\n    }\n\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public requestFocus() {\n    }\n\n    public getWidth() : number {\n        return 0;\n    }\n\n    public getHeight() : number {\n        return 0;\n    }\n\n    public getDocumentBase() : ShimmedDocumentBase {\n        return null;\n    }\n\n    public getAppletContext() : ShimmedAppletContext {\n        return null;\n    }\n\n    public getCodeBase() : ShimmedURL {\n        return null;\n    }\n\n    public getAudioClip(u : ShimmedURL, s : string) : ShimmedAudioClip {\n        return null;\n    }\n\n    public getImage(u : ShimmedURL, s : string) : ShimmedImage {\n        return null;\n    }\n}\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\n\n\nclass ShimmedColor {\n    public static yellow : ShimmedColor \u003d null;\n\n    public static black : ShimmedColor \u003d null;\n\n    public static red : ShimmedColor \u003d null;\n\n    public static gray : ShimmedColor \u003d null;\n\n    public static white : ShimmedColor \u003d null;\n\n    public static blue : ShimmedColor \u003d null;\n\n    public static green : ShimmedColor \u003d null;\n\n    public static pink : ShimmedColor \u003d null;\n\n    public static cyan : ShimmedColor \u003d null;\n\n    public static lightGray : ShimmedColor \u003d null;\n\n    public static darkGray : ShimmedColor \u003d null;\n\n    public static orange : ShimmedColor \u003d null;\n\n    public constructor(r : number, g : number, b : number) {\n    }\n}\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\n\n\nclass ShimmedGraphics {\n    public getFont() : ShimmedFont {\n        return null;\n    }\n\n    public setFont(f : ShimmedFont) {\n    }\n\n    public setColor(c : ShimmedColor) {\n    }\n\n    public fillRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public getFontMetrics() : ShimmedFontMetrics {\n        return null;\n    }\n\n    public drawString(s : string, x : number, y : number) {\n    }\n\n    public drawImage(i : ShimmedImage, x : number, y : number, o : any) {\n    }\n\n    public drawOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n\n    public drawLine(x : number, y : number, w : number, h : number) {\n    }\n\n    public drawRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillPolygon$int_A$int_A$int(xs : number[], ys : number[], n : number) {\n    }\n\n    public fillPolygon(xs? : any, ys? : any, n? : any) : any {\n        if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eArray \u0026\u0026 (xs.length\u003d\u003d0 || xs[0] \u003d\u003d null ||(typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof \u003cany\u003eArray \u0026\u0026 (ys.length\u003d\u003d0 || ys[0] \u003d\u003d null ||(typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.fillPolygon$int_A$int_A$int(xs, ys, n);\n        } else if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.fillPolygon$ShimmedPolygon(xs);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public fillPolygon$ShimmedPolygon(p : ShimmedPolygon) {\n    }\n\n    public drawArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n}\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\n\n\nclass ShimmedImage {\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public getHeight(a : ShimmedApplet) : number {\n        return 0;\n    }\n}\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\n\n\nclass ShimmedEvent {\n    public id : number;\n\n    public x : number;\n\n    public y : number;\n\n    public key : number;\n\n    public target : ShimmedButton;\n\n    public static KEY_ACTION : number \u003d 0;\n\n    public static LEFT : number \u003d 1;\n\n    public static RIGHT : number \u003d 2;\n\n    public static UP : number \u003d 3;\n\n    public static DOWN : number \u003d 4;\n\n    public static KEY_ACTION_RELEASE : number \u003d 5;\n\n    constructor() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n}\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\n\n\nclass ShimmedFont {\n    public getName() : string {\n        return null;\n    }\n\n    public constructor(name : string, w : number, h : number) {\n    }\n}\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\n\n\nclass ShimmedFontMetrics {\n    public getHeight() : number {\n        return 0;\n    }\n\n    public stringWidth(s : string) : number {\n        return 0;\n    }\n\n    public getAscent() : number {\n        return 0;\n    }\n}\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\n\n\nclass ShimmedThread {\n    public static sleep$long(ms : number) {\n    }\n\n    public static sleep$long$boolean(ms : number, b : boolean) {\n    }\n\n    public static sleep(ms? : any, b? : any) : any {\n        if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return \u003cany\u003eShimmedThread.sleep$long$boolean(ms, b);\n        } else if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return \u003cany\u003eShimmedThread.sleep$long(ms);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public constructor(r : ShimmedRunnable) {\n    }\n\n    public start() {\n    }\n\n    public stop() {\n    }\n}\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\n\n\ninterface ShimmedRunnable {}\n\nclass ShimmedAppletContext {\n    public showDocument$ShimmedURL(u : ShimmedURL) {\n    }\n\n    public showDocument$ShimmedURL$java_lang_String(u : ShimmedURL, s : string) {\n    }\n\n    public showDocument(u? : any, s? : any) : any {\n        if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL$java_lang_String(u, s);\n        } else if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL(u);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\n\n\nclass ShimmedDocumentBase {\n    public getHost() : string {\n        return null;\n    }\n}\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\n\n\nclass ShimmedURL {\n    public constructor(s : string) {\n    }\n\n    public openStream() : ShimmedInputStream {\n        return null;\n    }\n}\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\n\n\nclass ShimmedPrintStream {\n    public print(s : any) : any {\n        return null;\n    }\n\n    public println$() : any {\n        return null;\n    }\n\n    public println$java_lang_Object(s : any) : any {\n        return null;\n    }\n\n    public println(s? : any) : any {\n        if(((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.println$java_lang_Object(s);\n        } else if(s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.println$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\n\n\nclass ShimmedSystem {\n    public static out : ShimmedPrintStream \u003d null;\n\n    public static currentTimeMillis() : number {\n        return 0;\n    }\n}\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\n\n\nclass ShimmedVector {\n    public constructor(n : number) {\n    }\n\n    public removeAllElements() {\n    }\n\n    public get(i : number) : any {\n        return null;\n    }\n\n    public size() : number {\n        return 0;\n    }\n\n    public add(x : number[]) {\n    }\n}\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\n\n\nclass ShimmedElement {\n    public add(e : ShimmedElement) {\n    }\n}\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\n\n\nclass ShimmedPolygon {\n    public constructor(xs : number[], ys : number[], n : number) {\n    }\n}\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\n\n\nclass ShimmedInputStream {\n    public close() {\n    }\n}\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\n\n\nclass ShimmedBufferedReader {\n    public constructor(i : ShimmedInputStreamReader) {\n    }\n\n    public readLine() : string {\n        return null;\n    }\n\n    public close() {\n    }\n}\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\n\n\nclass ShimmedInputStreamReader {\n    public constructor(is : ShimmedInputStream) {\n    }\n}\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\n\n\nclass ShimmedGridLayout {\n    public constructor(x : number, y : number) {\n    }\n}\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\n\n\nclass ShimmedLong {\n    public static parseLong(s : string) : number {\n        return 0;\n    }\n}\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\n\n\nclass ShimmedChars {\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    public static charCodeArray(s : string) : string[] {\n        return null;\n    }\n}\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\n\n\nclass ShimmedImageObserver {}\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\n\n\nclass ShimmedRandom {\n    public nextInt(m : number) : number {\n        return 0;\n    }\n}\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\n\n\nclass ShimmedAudioClip {\n    public play() {\n    }\n}\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\n\n\nclass ShimmedStringBuffer {\n    public constructor(i? : any) {\n        if(((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else if(i \u003d\u003d\u003d undefined) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public append(s : any) : ShimmedStringBuffer {\n        return null;\n    }\n}\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\n\n\nclass EndOfShimDeclarations {}\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\n\n\nclass ElasticSlime extends ShimmedApplet implements ShimmedRunnable {\n    /*private*/ nWidth : number;\n\n    /*private*/ nHeight : number;\n\n    /*private*/ p1Score : number;\n\n    /*private*/ p2Score : number;\n\n    /*private*/ p1X : number;\n\n    /*private*/ p2X : number;\n\n    /*private*/ p1Y : number;\n\n    /*private*/ p2Y : number;\n\n    /*private*/ p1Col : number;\n\n    /*private*/ p2Col : number;\n\n    /*private*/ slimeColText : string[] \u003d [\"Argentina\", \"Belgium\", \"Australia\", \"Iceland\", \"Cameroon\", \"P.R. of China\", \"Costa Rica\", \"Croatia\", \"Denmark\", \"Eucador\", \"Mexico\", \"France\", \"USA\", \"Italy\", \"Japan\", \"Russia\", \"Paraguay\", \"Poland\", \"Portugal\", \"Ireland\", \"Saudi Arabia\", \"Senegal\", \"Slovenia\", \"Spain\", \"Seth Efrica\", \"South Corea\", \"Sveden\", \"Tunisia\", \"Turkey\", \"Uruguay\", \"Brazil\", \"England\", \"Germany\", \"Night Elves\"];\n\n    /*private*/ darkRed : ShimmedColor \u003d new ShimmedColor(128, 0, 0);\n\n    /*private*/ darkGreen : ShimmedColor \u003d new ShimmedColor(0, 128, 0);\n\n    /*private*/ darkBlue : ShimmedColor \u003d new ShimmedColor(0, 0, 128);\n\n    /*private*/ slimaryCols : ShimmedColor[];\n\n    /*private*/ secondaryCols : ShimmedColor[];\n\n    /*private*/ p1OldX : number;\n\n    /*private*/ p2OldX : number;\n\n    /*private*/ p1OldY : number;\n\n    /*private*/ p2OldY : number;\n\n    /*private*/ p1XV : number;\n\n    /*private*/ p2XV : number;\n\n    /*private*/ p1YV : number;\n\n    /*private*/ p2YV : number;\n\n    /*private*/ ballX : number;\n\n    /*private*/ ballY : number;\n\n    /*private*/ ballVX : number;\n\n    /*private*/ ballVY : number;\n\n    /*private*/ ballOldX : number;\n\n    /*private*/ ballOldY : number;\n\n    /*private*/ screen : ShimmedGraphics;\n\n    /*private*/ promptMsg : string;\n\n    /*private*/ replayData : number[][];\n\n    /*private*/ replayPos : number;\n\n    /*private*/ replayStart : number;\n\n    /*private*/ mousePressed : boolean;\n\n    /*private*/ fCanChangeCol : boolean;\n\n    /*private*/ fInPlay : boolean;\n\n    /*private*/ p1Blink : number;\n\n    /*private*/ p2Blink : number;\n\n    /*private*/ fP1Sticky : boolean;\n\n    /*private*/ fP2Sticky : boolean;\n\n    /*private*/ fP1Touched : boolean;\n\n    /*private*/ fP2Touched : boolean;\n\n    /*private*/ p1TouchingGoal : number;\n\n    /*private*/ p2TouchingGoal : number;\n\n    /*private*/ gameThread : ShimmedThread;\n\n    /*private*/ fEndGame : boolean;\n\n    /*private*/ fPlayOn : boolean;\n\n    /*private*/ nScoreX : number;\n\n    /*private*/ startTime : number;\n\n    /*private*/ gameTime : number;\n\n    /*private*/ scoringRun : number;\n\n    /*private*/ frenzyCol : number;\n\n    /*private*/ playOnTicks : number;\n\n    /*private*/ backBuffer : ShimmedImage;\n\n    /*private*/ SMILE_DIFF : number;\n\n    /*private*/ DAMPING : number;\n\n    /*private*/ MAX_TICKS_TOUCHING_GOAL : number;\n\n    /*private*/ JUMPVEL : number;\n\n    /*private*/ SLIMEVEL : number;\n\n    /*private*/ GRAVITY : number;\n\n    /*private*/ gameLength : number;\n\n    /*private*/ worldCup : boolean;\n\n    /*private*/ worldCupRound : number;\n\n    /*private*/ Speed : number;\n\n    /*private*/ fExtraTime : boolean;\n\n    /*private*/ fGoldenGoal : boolean;\n\n    /*private*/ fSuperSlime : boolean;\n\n    /*private*/ dustX : number;\n\n    /*private*/ dustY : number;\n\n    /*private*/ doubleBuffered : boolean;\n\n    /*private*/ NUM_PARTICLES : number;\n\n    /*private*/ particle_size : number;\n\n    /*private*/ particle_x : number[];\n\n    /*private*/ particle_y : number[];\n\n    /*private*/ particle_weight : number[];\n\n    /*private*/ pointsX : number[];\n\n    /*private*/ pointsY : number[];\n\n    public initStuff() {\n        this.fEndGame \u003d true;\n        this.p1X \u003d 200;\n        this.p1Y \u003d 0;\n        this.p2X \u003d 800;\n        this.p2Y \u003d 0;\n        this.p1XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p2YV \u003d 0;\n        this.p1Score \u003d 0;\n        this.p2Score \u003d 0;\n        this.ballOldX \u003d this.ballX \u003d 500;\n        this.ballOldY \u003d this.ballY \u003d 200;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.replayStart \u003d this.replayPos \u003d 0;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.playOnTicks \u003d 10;\n        this.fPlayOn \u003d false;\n        this.fExtraTime \u003d false;\n        this.fGoldenGoal \u003d false;\n        this.JUMPVEL \u003d !this.fSuperSlime?31:65;\n        this.SLIMEVEL \u003d !this.fSuperSlime?8:16;\n        this.GRAVITY \u003d !this.fSuperSlime?2:8;\n    }\n\n    /*private*/ drawButtons() {\n        let buttons : string[] \u003d [\"1 minute\", \"2 minutes\", \"4 minutes\", \"8 minutes\", \"World Cup\"];\n        let fm : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let darkBlue : ShimmedColor \u003d new ShimmedColor(0, 0, 128);\n        for(let i : number \u003d 0; i \u003c 5; ++i) {\n            this.screen.setColor(darkBlue);\n            this.screen.fillRect(((2 * i + 1) * this.nWidth / 10|0) - (this.nWidth / 12|0), (this.nHeight * 2 / 10|0), (this.nWidth / 6|0), (this.nHeight / 10|0));\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.drawString(buttons[i], ((2 * i + 1) * this.nWidth / 10|0) - (fm.stringWidth(buttons[i]) / 2|0), (this.nHeight * 5 / 20|0) + (fm.getHeight() / 2|0));\n        };\n        this.flip();\n    }\n\n    /*private*/ testButton(x : number, y : number) : boolean {\n        for(let i : number \u003d 0; i \u003c 5; ++i) {\n            if(x \u003e ((2 * i + 1) * this.nWidth / 10|0) - (this.nWidth / 12|0) \u0026\u0026 x \u003c ((2 * i + 1) * this.nWidth / 10|0) + (this.nWidth / 12|0) \u0026\u0026 y \u003e (this.nHeight * 2 / 10|0) \u0026\u0026 y \u003c (this.nHeight * 3 / 10|0)) {\n                if(i \u003d\u003d\u003d 4) {\n                    this.gameLength \u003d 120000;\n                    this.worldCup \u003d true;\n                } else {\n                    this.gameLength \u003d (1 \u003c\u003c i) * 60000;\n                    this.worldCup \u003d false;\n                }\n                return true;\n            }\n        };\n        return false;\n    }\n\n    public handleEvent(event : ShimmedEvent) : boolean {\n        switch((event.id)) {\n        case 401:\n        case 403:\n            if(this.fCanChangeCol) {\n                switch((event.key)) {\n                case 54:\n                    this.fSuperSlime \u003d !this.fSuperSlime;\n                    this.repaint();\n                    break;\n                case 73:\n                case 105:\n                case 1004:\n                    do {\n                        this.p2Col \u003d this.p2Col !\u003d\u003d 0?this.p2Col - 1:this.slimaryCols.length - 1;\n                    } while((this.p1Col \u003d\u003d\u003d this.p2Col));\n                    this.drawScores();\n                    this.repaint();\n                    break;\n                case 75:\n                case 107:\n                case 1005:\n                    do {\n                        this.p2Col \u003d this.p2Col \u003d\u003d\u003d this.slimaryCols.length - 1?0:this.p2Col + 1;\n                    } while((this.p2Col \u003d\u003d\u003d this.p1Col));\n                    this.drawScores();\n                    this.repaint();\n                    break;\n                case 83:\n                case 115:\n                    do {\n                        this.p1Col \u003d this.p1Col \u003d\u003d\u003d this.slimaryCols.length - 1?0:this.p1Col + 1;\n                    } while((this.p1Col \u003d\u003d\u003d this.p2Col));\n                    this.drawScores();\n                    this.repaint();\n                    break;\n                case 87:\n                case 119:\n                    while((true)) {\n                        this.p1Col \u003d this.p1Col !\u003d\u003d 0?this.p1Col - 1:this.slimaryCols.length - 1;\n                        if(this.p1Col !\u003d\u003d this.p2Col) {\n                            this.drawScores();\n                            this.repaint();\n                            break;\n                        }\n                    };\n                }\n            }\n            if(!this.fEndGame) {\n                switch((event.key)) {\n                case 32:\n                    this.mousePressed \u003d true;\n                    return false;\n                case 65:\n                case 97:\n                    this.p1XV \u003d -this.SLIMEVEL;\n                    return false;\n                case 66:\n                case 98:\n                    this.toggleBuffering();\n                    return false;\n                case 68:\n                case 100:\n                    this.SLIMEVEL \u003d !this.fSuperSlime?8:16;\n                    if(this.Speed \u003e 5) {\n                    }\n                    --this.Speed;\n                    this.SLIMEVEL \u003d !this.fSuperSlime?(this.Speed / 2|0):this.Speed;\n                    this.p1XV \u003d this.SLIMEVEL;\n                    return false;\n                case 73:\n                case 105:\n                case 1004:\n                    if(this.p2Y \u003d\u003d\u003d 0 \u0026\u0026 !this.worldCup) {\n                        this.p2YV \u003d this.JUMPVEL;\n                    }\n                    return false;\n                case 74:\n                case 106:\n                case 1006:\n                    this.SLIMEVEL \u003d !this.fSuperSlime?8:16;\n                    if(this.Speed \u003e 5) {\n                    }\n                    --this.Speed;\n                    this.SLIMEVEL \u003d !this.fSuperSlime?(this.Speed / 2|0):this.Speed;\n                    this.p2XV \u003d this.SLIMEVEL;\n                    if(!this.worldCup) {\n                        this.p2XV \u003d -this.SLIMEVEL;\n                    }\n                    return false;\n                case 75:\n                case 107:\n                case 1005:\n                    if(!this.worldCup) {\n                        this.fP2Sticky \u003d true;\n                    }\n                    return false;\n                case 76:\n                case 108:\n                case 1007:\n                    if(!this.worldCup) {\n                        this.p2XV \u003d this.SLIMEVEL;\n                    }\n                    return false;\n                case 83:\n                case 115:\n                    this.fP1Sticky \u003d true;\n                    return false;\n                case 87:\n                case 119:\n                    if(this.p1Y \u003d\u003d\u003d 0) {\n                        this.p1YV \u003d this.JUMPVEL;\n                    }\n                }\n            }\n            break;\n        case 402:\n        case 404:\n            switch((event.key)) {\n            case 65:\n            case 76:\n            case 97:\n            case 108:\n            case 1007:\n            default:\n                return false;\n            case 68:\n            case 100:\n                this.SLIMEVEL \u003d !this.fSuperSlime?8:16;\n                this.Speed \u003d 16;\n                if(this.p1X \u003e 0) {\n                    this.p1XV \u003d -50;\n                }\n                return false;\n            case 74:\n            case 106:\n            case 1006:\n                this.SLIMEVEL \u003d !this.fSuperSlime?8:16;\n                this.Speed \u003d 16;\n                if(this.p2X \u003e 0) {\n                    this.p2XV \u003d 50;\n                }\n                return false;\n            case 75:\n            case 107:\n            case 1005:\n                this.fP2Sticky \u003d false;\n                return false;\n            case 83:\n            case 115:\n                this.fP1Sticky \u003d false;\n                return false;\n            }\n        case 501:\n            this.mousePressed \u003d true;\n            if(!this.fInPlay \u0026\u0026 this.testButton(event.x, event.y)) {\n                this.fEndGame \u003d false;\n                this.fInPlay \u003d true;\n                this.p1X \u003d 200;\n                this.p1Y \u003d 0;\n                this.p2X \u003d 800;\n                this.p2Y \u003d 0;\n                this.p1XV \u003d 0;\n                this.p1YV \u003d 0;\n                this.p2XV \u003d 0;\n                this.p2YV \u003d 0;\n                this.ballX \u003d 500;\n                this.ballY \u003d 200;\n                this.ballOldX \u003d 500;\n                this.ballOldY \u003d 200;\n                this.ballVX \u003d 0;\n                this.ballVY \u003d 0;\n                this.p1Score \u003d 0;\n                this.p2Score \u003d 0;\n                this.promptMsg \u003d \"\";\n                this.paint(this.getGraphics());\n                try {\n                    ShimmedThread.sleep$long(100);\n                } catch(var4) {\n                };\n                this.gameThread \u003d new ShimmedThread(this);\n                this.gameThread.start();\n            }\n            break;\n        case 503:\n            this.showStatus(\"Slime Volleyball 2-Player: Soccer Slime, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid\");\n            this.requestFocus();\n        }\n        return false;\n    }\n\n    /*private*/ DrawSlimers() {\n        let k1 : number \u003d (this.nWidth / 10|0);\n        let j2 : number \u003d (this.nHeight / 10|0);\n        let i3 : number \u003d (this.nWidth / 50|0);\n        let j3 : number \u003d (this.nHeight / 25|0);\n        let k3 : number \u003d (this.ballX * this.nWidth / 1000|0);\n        let l3 : number \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        let i : number \u003d (this.p1X * this.nWidth / 1000|0) - (k1 / 2|0);\n        let l : number \u003d (7 * this.nHeight / 10|0) - (this.p1Y * this.nHeight / 1000|0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawLine(i, l + 20, 0, l + 20);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.drawLine(i, l - 1 + 20, 0, l - 1 + 20);\n        this.screen.drawLine(i, l + 1 + 20, 0, l + 1 + 20);\n        this.screen.drawLine(i, l - 2 + 20, 0, l - 2 + 20);\n        this.screen.drawLine(i, l + 2 + 20, 0, l + 2 + 20);\n        this.screen.drawLine(i, l - 3 + 20, 0, l - 3 + 20);\n        this.screen.drawLine(i, l + 3 + 20, 0, l + 3 + 20);\n        this.screen.drawLine(i, l - 4 + 20, 0, l - 4 + 20);\n        this.screen.drawLine(i, l + 4 + 20, 0, l + 4 + 20);\n        this.screen.drawLine(i, l - 5 + 20, 0, l - 5 + 20);\n        this.screen.drawLine(i, l + 5 + 20, 0, l + 5 + 20);\n        this.screen.drawLine(i, l - 6 + 20, 0, l - 6 + 20);\n        this.screen.drawLine(i, l + 6 + 20, 0, l + 6 + 20);\n        this.screen.drawLine(i, l - 7 + 20, 0, l - 7 + 20);\n        this.screen.drawLine(i, l + 7 + 20, 0, l + 7 + 20);\n        this.screen.drawLine(i, l - 8 + 20, 0, l - 8 + 20);\n        this.screen.drawLine(i, l + 8 + 20, 0, l + 8 + 20);\n        this.screen.drawLine(i, l - 9 + 20, 0, l - 9 + 20);\n        this.screen.drawLine(i, l + 9 + 20, 0, l + 9 + 20);\n        this.screen.drawLine(i, l - 10 + 20, 0, l - 10 + 20);\n        this.screen.drawLine(i, l + 10 + 20, 0, l + 10 + 20);\n        i \u003d (this.p1OldX * this.nWidth / 1000|0) - (k1 / 2|0);\n        l \u003d (7 * this.nHeight / 10|0) - (this.p1OldY * this.nHeight / 1000|0);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillRect(i, l, k1, j2);\n        i \u003d (this.p2OldX * this.nWidth / 1000|0) - (k1 / 2|0);\n        l \u003d (7 * this.nHeight / 10|0) - (this.p2OldY * this.nHeight / 1000|0);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillRect(i, l, k1, j2);\n        if(!this.fEndGame) {\n            this.MoveBall();\n        }\n        i \u003d (this.p1X * this.nWidth / 1000|0) - (k1 / 2|0);\n        l \u003d (7 * this.nHeight / 10|0) - (this.p1Y * this.nHeight / 1000|0);\n        this.screen.setColor(!this.fSuperSlime?this.slimaryCols[this.p1Col]:this.slimaryCols[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimaryCols.length]);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        this.screen.setColor(this.secondaryCols[this.p1Col]);\n        this.pointsX[0] \u003d this.pointsX[2] \u003d i + (k1 / 2|0);\n        this.pointsX[1] \u003d i + (k1 * 2 / 5|0);\n        this.pointsX[3] \u003d i + (k1 / 8|0);\n        this.pointsY[0] \u003d l;\n        this.pointsY[1] \u003d this.pointsY[3] \u003d l + (j2 / 2|0);\n        this.pointsY[2] \u003d l + j2;\n        this.screen.fillPolygon$int_A$int_A$int(this.pointsX, this.pointsY, 4);\n        let l4 : number \u003d this.p1X + 38;\n        let i5 : number \u003d this.p1Y - 60;\n        i \u003d (l4 * this.nWidth / 1000|0);\n        l \u003d (7 * this.nHeight / 10|0) - (i5 * this.nHeight / 1000|0);\n        let i4 : number \u003d i - k3;\n        let j4 : number \u003d l - l3;\n        let k4 : number \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(i4 * i4 + j4 * j4))|0);\n        let flag : boolean \u003d Math.random() \u003c 0.01;\n        if(flag) {\n            this.p1Blink \u003d 5;\n        }\n        if(this.p1Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if(k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4|0) - (3 * i3 / 4|0), l - (4 * j4 / k4|0) - (3 * j3 / 4|0), (i3 / 2|0), (j3 / 2|0));\n            }\n        } else {\n            --this.p1Blink;\n        }\n        let i2 : number;\n        let l2 : number;\n        let k : number;\n        let j1 : number;\n        let k5 : number;\n        if(this.p1Score \u003e this.p2Score + 2) {\n            i2 \u003d (this.p1X * this.nWidth / 1000|0);\n            l2 \u003d (7 * this.nHeight / 10|0) - ((this.p1Y - 40) * this.nHeight / 1000|0);\n            k \u003d (this.nWidth / 20|0);\n            j1 \u003d (this.nHeight / 20|0);\n            k5 \u003d 0;\n            do {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);\n                ++k5;\n            } while((k5 \u003c 3));\n        }\n        i \u003d (this.p2X * this.nWidth / 1000|0) - (k1 / 2|0);\n        l \u003d (7 * this.nHeight / 10|0) - (this.p2Y * this.nHeight / 1000|0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawLine(i, l + 20, 1000, l + 20);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.drawLine(i, l - 1 + 20, 1000, l - 1 + 20);\n        this.screen.drawLine(i, l + 1 + 20, 1000, l + 1 + 20);\n        this.screen.drawLine(i, l - 2 + 20, 1000, l - 2 + 20);\n        this.screen.drawLine(i, l + 2 + 20, 1000, l + 2 + 20);\n        this.screen.drawLine(i, l - 3 + 20, 1000, l - 3 + 20);\n        this.screen.drawLine(i, l + 3 + 20, 1000, l + 3 + 20);\n        this.screen.drawLine(i, l - 4 + 20, 1000, l - 4 + 20);\n        this.screen.drawLine(i, l + 4 + 20, 1000, l + 4 + 20);\n        this.screen.drawLine(i, l - 5 + 20, 1000, l - 5 + 20);\n        this.screen.drawLine(i, l + 5 + 20, 1000, l + 5 + 20);\n        this.screen.drawLine(i, l - 6 + 20, 1000, l - 6 + 20);\n        this.screen.drawLine(i, l + 6 + 20, 1000, l + 6 + 20);\n        this.screen.drawLine(i, l - 7 + 20, 1000, l - 7 + 20);\n        this.screen.drawLine(i, l + 7 + 20, 1000, l + 7 + 20);\n        this.screen.drawLine(i, l - 8 + 20, 1000, l - 8 + 20);\n        this.screen.drawLine(i, l + 8 + 20, 1000, l + 8 + 20);\n        this.screen.drawLine(i, l - 9 + 20, 1000, l - 9 + 20);\n        this.screen.drawLine(i, l + 9 + 20, 1000, l + 9 + 20);\n        this.screen.drawLine(i, l - 10 + 20, 1000, l - 10 + 20);\n        this.screen.drawLine(i, l + 10 + 20, 1000, l + 10 + 20);\n        this.screen.setColor(!this.fSuperSlime?this.slimaryCols[this.p2Col]:this.slimaryCols[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimaryCols.length]);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        this.screen.setColor(this.secondaryCols[this.p2Col]);\n        this.pointsX[0] \u003d this.pointsX[2] \u003d i + (k1 / 2|0);\n        this.pointsX[1] \u003d i + (k1 * 3 / 5|0);\n        this.pointsX[3] \u003d i + (k1 * 7 / 8|0);\n        this.pointsY[0] \u003d l;\n        this.pointsY[1] \u003d this.pointsY[3] \u003d l + (j2 / 2|0);\n        this.pointsY[2] \u003d l + j2;\n        this.screen.fillPolygon$int_A$int_A$int(this.pointsX, this.pointsY, 4);\n        l4 \u003d this.p2X - 18;\n        i5 \u003d this.p2Y - 60;\n        i \u003d (l4 * this.nWidth / 1000|0);\n        l \u003d (7 * this.nHeight / 10|0) - (i5 * this.nHeight / 1000|0);\n        i4 \u003d i - k3;\n        j4 \u003d l - l3;\n        k4 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(i4 * i4 + j4 * j4))|0);\n        flag \u003d Math.random() \u003c 0.01;\n        if(flag) {\n            this.p2Blink \u003d 5;\n        }\n        if(this.p2Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(!flag?ShimmedColor.white:ShimmedColor.gray);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if(k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4|0) - (3 * i3 / 4|0), l - (4 * j4 / k4|0) - (3 * j3 / 4|0), (i3 / 2|0), (j3 / 2|0));\n            }\n        } else {\n            --this.p2Blink;\n        }\n        if(this.p2Score \u003e this.p1Score + 2) {\n            i2 \u003d (this.nWidth / 20|0);\n            l2 \u003d (this.nHeight / 20|0);\n            k \u003d (this.p2X * this.nWidth / 1000|0) - i2;\n            j1 \u003d (7 * this.nHeight / 10|0) - ((this.p2Y - 40) * this.nHeight / 1000|0);\n            k5 \u003d 0;\n            do {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);\n                ++k5;\n            } while((k5 \u003c 3));\n        }\n        if(this.p1X \u003c 500) {\n            this.drawDust();\n        }\n    }\n\n    /*private*/ drawDust() {\n    }\n\n    public paint(g : ShimmedGraphics) {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5|0));\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5|0), this.nWidth, (this.nHeight / 5|0));\n        this.screen.setColor(ShimmedColor.white);\n        this.drawScores();\n        if(!this.fInPlay) {\n            this.DrawSlimers();\n            this.drawButtons();\n        }\n        this.DrawGoals();\n        this.drawPrompt();\n        if(!this.fInPlay) {\n            let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            if(this.fSuperSlime) {\n                this.screen.drawString(\"Super Elastic Soccer Slime!\", (this.nWidth / 2|0) - (fontmetrics.stringWidth(\"Super Soccer Slime!\") / 2|0), (this.nHeight / 2|0) - fontmetrics.getHeight());\n            } else {\n                this.screen.drawString(\"Elastic Soccer Slime!\", (this.nWidth / 2|0) - (fontmetrics.stringWidth(\"Soccer Slime!\") / 2|0), (this.nHeight / 2|0) - fontmetrics.getHeight());\n            }\n            this.screen.setColor(ShimmedColor.white);\n            fontmetrics \u003d this.screen.getFontMetrics();\n            this.screen.drawString(\"Written by Quin Pendragon + Anonymous Tipster\", (this.nWidth / 2|0) - (fontmetrics.stringWidth(\"Written by Quin Pendragon + Anonymous Tipster\") / 2|0), (this.nHeight / 2|0) + fontmetrics.getHeight() * 2);\n        }\n        this.flip();\n    }\n\n    public destroy() {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    }\n\n    /*private*/ ReplayFrame(i : number, j : number, k : number, l : number, i1 : number, flag : boolean) {\n        if(flag) {\n            this.ballX \u003d -1000;\n            this.ballOldX \u003d 500;\n            this.ballY \u003d -1000;\n            this.ballOldY \u003d 500;\n            this.p1OldX \u003d this.p1OldY \u003d this.p2OldX \u003d this.p2OldY \u003d -10000;\n        } else {\n            let j1 : number \u003d i \u003d\u003d\u003d 0?199:i - 1;\n            this.p1OldX \u003d this.replayData[j1][0];\n            this.p1OldY \u003d this.replayData[j1][1];\n            this.p2OldX \u003d this.replayData[j1][2];\n            this.p2OldY \u003d this.replayData[j1][3];\n            if(i \u003d\u003d\u003d 0) {\n                this.ballOldX \u003d 500;\n                this.ballOldY \u003d 200;\n            } else {\n                this.ballOldX \u003d this.replayData[j1][4];\n                this.ballOldY \u003d this.replayData[j1][5];\n            }\n        }\n        this.p1X \u003d this.replayData[i][0];\n        this.p1Y \u003d this.replayData[i][1];\n        this.p2X \u003d this.replayData[i][2];\n        this.p2Y \u003d this.replayData[i][3];\n        this.ballX \u003d this.replayData[i][4];\n        this.ballY \u003d this.replayData[i][5];\n        this.p1Col \u003d this.replayData[i][6];\n        this.p2Col \u003d this.replayData[i][7];\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 1;\n        if((i / 10|0) % 2 \u003e 0) {\n            this.screen.setColor(ShimmedColor.red);\n            this.screen.drawString(\"Replay...\", j, k);\n        } else {\n            this.screen.setColor(ShimmedColor.blue);\n            this.screen.fillRect(j, k - i1, l, i1 * 2);\n        }\n        this.DrawSlimers();\n        this.DrawGoals();\n        try {\n            ShimmedThread.sleep$long(20);\n        } catch(var9) {\n        };\n    }\n\n    /*private*/ MakeTime(l : number) : string {\n        let l1 : number \u003d Math.floor(l / 10) % 100;\n        let l2 : number \u003d Math.floor(l / 1000) % 60;\n        let l3 : number \u003d Math.floor(l / 60000) % 60;\n        let s : string \u003d \"\";\n        if(l3 \u003c 10) {\n            s \u003d s + \"0\";\n        }\n        s \u003d s + l3;\n        s \u003d s + \":\";\n        if(l2 \u003c 10) {\n            s \u003d s + \"0\";\n        }\n        s \u003d s + l2;\n        s \u003d s + \":\";\n        if(l1 \u003c 10) {\n            s \u003d s + \"0\";\n        }\n        s \u003d s + l1;\n        return s;\n    }\n\n    /*private*/ MoveSlimers() {\n        if(this.worldCup) {\n            switch((this.worldCupRound)) {\n            case 0:\n                this.controlP2v0();\n                break;\n            case 1:\n                this.controlP2v1();\n                break;\n            case 2:\n                this.controlP2v2();\n                break;\n            case 3:\n                this.controlP2v3();\n            }\n        }\n        this.p1X +\u003d this.p1XV;\n        if(this.p1X \u003c 50) {\n            this.p1X \u003d 50;\n        }\n        if(this.p1X \u003e 950) {\n            this.p1X \u003d 950;\n        }\n        if(this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d this.GRAVITY;\n            if(this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        this.p2X +\u003d this.p2XV;\n        if(this.p2X \u003e 950) {\n            this.p2X \u003d 950;\n        }\n        if(this.p2X \u003c 50) {\n            this.p2X \u003d 50;\n        }\n        if(this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d this.GRAVITY;\n            if(this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n    }\n\n    public constructor() {\n        super();\n        this.nWidth \u003d 0;\n        this.nHeight \u003d 0;\n        this.p1Score \u003d 0;\n        this.p2Score \u003d 0;\n        this.p1X \u003d 0;\n        this.p2X \u003d 0;\n        this.p1Y \u003d 0;\n        this.p2Y \u003d 0;\n        this.p1Col \u003d 0;\n        this.p2Col \u003d 0;\n        this.slimaryCols \u003d null;\n        this.secondaryCols \u003d null;\n        this.p1OldX \u003d 0;\n        this.p2OldX \u003d 0;\n        this.p1OldY \u003d 0;\n        this.p2OldY \u003d 0;\n        this.p1XV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2YV \u003d 0;\n        this.ballX \u003d 0;\n        this.ballY \u003d 0;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.ballOldX \u003d 0;\n        this.ballOldY \u003d 0;\n        this.screen \u003d null;\n        this.promptMsg \u003d null;\n        this.replayData \u003d null;\n        this.replayPos \u003d 0;\n        this.replayStart \u003d 0;\n        this.mousePressed \u003d false;\n        this.fCanChangeCol \u003d false;\n        this.fInPlay \u003d false;\n        this.p1Blink \u003d 0;\n        this.p2Blink \u003d 0;\n        this.fP1Sticky \u003d false;\n        this.fP2Sticky \u003d false;\n        this.fP1Touched \u003d false;\n        this.fP2Touched \u003d false;\n        this.p1TouchingGoal \u003d 0;\n        this.p2TouchingGoal \u003d 0;\n        this.gameThread \u003d null;\n        this.fEndGame \u003d false;\n        this.fPlayOn \u003d false;\n        this.nScoreX \u003d 0;\n        this.startTime \u003d 0;\n        this.gameTime \u003d 0;\n        this.scoringRun \u003d 0;\n        this.frenzyCol \u003d 0;\n        this.playOnTicks \u003d 0;\n        this.backBuffer \u003d null;\n        this.SMILE_DIFF \u003d 0;\n        this.DAMPING \u003d 0;\n        this.MAX_TICKS_TOUCHING_GOAL \u003d 0;\n        this.JUMPVEL \u003d 0;\n        this.SLIMEVEL \u003d 0;\n        this.GRAVITY \u003d 0;\n        this.gameLength \u003d 0;\n        this.worldCup \u003d false;\n        this.worldCupRound \u003d 0;\n        this.Speed \u003d 0;\n        this.fExtraTime \u003d false;\n        this.fGoldenGoal \u003d false;\n        this.fSuperSlime \u003d false;\n        this.dustX \u003d 0;\n        this.dustY \u003d 0;\n        this.doubleBuffered \u003d false;\n        this.NUM_PARTICLES \u003d 0;\n        this.particle_size \u003d 0;\n        this.particle_x \u003d null;\n        this.particle_y \u003d null;\n        this.particle_weight \u003d null;\n        this.pointsX \u003d null;\n        this.pointsY \u003d null;\n        this.slimaryCols \u003d [ShimmedColor.cyan, ShimmedColor.red, ShimmedColor.green, ShimmedColor.white, this.darkGreen, ShimmedColor.white, this.darkRed, this.darkRed, new ShimmedColor(119, 41, 28), ShimmedColor.yellow, ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(128, 128, 255), this.darkBlue, ShimmedColor.white, ShimmedColor.red, ShimmedColor.white, new ShimmedColor(119, 41, 28), ShimmedColor.green, ShimmedColor.white, ShimmedColor.white, ShimmedColor.white, new ShimmedColor(185, 30, 2), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(252, 239, 82), ShimmedColor.white, ShimmedColor.red, new ShimmedColor(16, 180, 180), new ShimmedColor(241, 245, 71), new ShimmedColor(230, 230, 230), ShimmedColor.white, ShimmedColor.blue];\n        this.secondaryCols \u003d [ShimmedColor.white, ShimmedColor.black, ShimmedColor.yellow, new ShimmedColor(128, 128, 255), ShimmedColor.red, ShimmedColor.red, this.darkBlue, ShimmedColor.white, ShimmedColor.white, this.darkBlue, ShimmedColor.green, ShimmedColor.blue, this.darkBlue, ShimmedColor.white, ShimmedColor.white, ShimmedColor.blue, ShimmedColor.white, ShimmedColor.red, this.darkGreen, ShimmedColor.white, new ShimmedColor(128, 255, 128), new ShimmedColor(255, 128, 0), this.darkGreen, this.darkBlue, new ShimmedColor(13, 131, 10), ShimmedColor.white, ShimmedColor.blue, ShimmedColor.red, ShimmedColor.white, ShimmedColor.black, new ShimmedColor(7, 177, 33), ShimmedColor.red, ShimmedColor.black, ShimmedColor.blue];\n        this.frenzyCol \u003d 0;\n        this.SMILE_DIFF \u003d 2;\n        this.DAMPING \u003d 7;\n        this.MAX_TICKS_TOUCHING_GOAL \u003d 600000000;\n        this.worldCup \u003d false;\n        this.worldCupRound \u003d 0;\n        this.Speed \u003d 16;\n        this.dustX \u003d 0;\n        this.dustY \u003d 0;\n        this.NUM_PARTICLES \u003d 100;\n        this.particle_size \u003d 1;\n        this.particle_x \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.NUM_PARTICLES);\n        this.particle_y \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.NUM_PARTICLES);\n        this.particle_weight \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.NUM_PARTICLES);\n        this.pointsX \u003d [];\n        this.pointsY \u003d [];\n        this.p2Col \u003d 1;\n        this.replayData \u003d \u003cany\u003e (function(dims) { let allocate \u003d function(dims) { if(dims.length\u003d\u003d0) { return 0; } else { let array \u003d []; for(let i \u003d 0; i \u003c dims[0]; i++) { array.push(allocate(dims.slice(1))); } return array; }}; return allocate(dims);})([200, 8]);\n    }\n\n    /*private*/ MoveBall() {\n        let k : number \u003d (30 * this.nHeight / 1000|0);\n        let i : number \u003d (this.ballOldX * this.nWidth / 1000|0);\n        let j : number \u003d (4 * this.nHeight / 5|0) - (this.ballOldY * this.nHeight / 1000|0);\n        this.screen.setColor(ShimmedColor.blue);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        if(!this.fEndGame) {\n            let l1 : number \u003d (this.ballX - this.p1X) * 2;\n            let i2 : number \u003d this.ballY - this.p1Y;\n            let j2 : number \u003d l1 * l1 + i2 * i2;\n            let k2 : number \u003d this.ballVX - this.p1XV;\n            let l2 : number \u003d this.ballVY - this.p1YV;\n            let i1 : number;\n            let k1 : number;\n            if(i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003ej2)|0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1|0);\n                this.ballX \u003d this.p1X + (l1 * 63 / i1|0);\n                this.ballY \u003d this.p1Y + (i2 * 125 / i1|0);\n                if(k1 \u003c\u003d 0) {\n                    if(!this.fP1Sticky) {\n                        this.ballVY +\u003d this.p1YV - (2 * i2 * k1 / i1|0);\n                        this.ballVX +\u003d ((this.p1XV - (2 * l1 * k1 / i1|0)) * 7 / 10|0);\n                    } else {\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                    }\n                    if(this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if(this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    if(this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if(this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP1Touched \u003d true;\n            }\n            l1 \u003d (this.ballX - this.p2X) * 2;\n            i2 \u003d this.ballY - this.p2Y;\n            j2 \u003d l1 * l1 + i2 * i2;\n            k2 \u003d this.ballVX - this.p2XV;\n            l2 \u003d this.ballVY - this.p2YV;\n            if(i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003ej2)|0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1|0);\n                this.ballX \u003d this.p2X + (l1 * 63 / i1|0);\n                this.ballY \u003d this.p2Y + (i2 * 125 / i1|0);\n                if(k1 \u003c\u003d 0) {\n                    if(!this.fP2Sticky) {\n                        this.ballVX +\u003d ((this.p2XV - (2 * l1 * k1 / i1|0)) * 7 / 10|0);\n                        this.ballVY +\u003d this.p2YV - (2 * i2 * k1 / i1|0);\n                    } else {\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                    }\n                    if(this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if(this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    if(this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if(this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP2Touched \u003d true;\n            }\n            if(this.ballX \u003c 15) {\n                this.ballX \u003d 15;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if(this.ballX \u003e 985) {\n                this.ballX \u003d 985;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if(this.ballX \u003c\u003d 50 || this.ballX \u003e\u003d 950) {\n                if(this.ballY \u003e 200 \u0026\u0026 this.ballOldY \u003c 200 || this.ballY \u003c 200 \u0026\u0026 this.ballOldY \u003e\u003d 200) {\n                    this.ballY \u003d 200;\n                    this.ballVY *\u003d -1;\n                }\n                if(this.ballY \u003e 180 \u0026\u0026 this.ballY \u003c 220) {\n                    if(this.ballX \u003e 40 \u0026\u0026 this.ballX \u003c 50 \u0026\u0026 this.ballVX \u003c 0) {\n                        this.ballX \u003d 50;\n                        this.ballVX *\u003d -1;\n                    }\n                    if(this.ballX \u003c 960 \u0026\u0026 this.ballX \u003e 950 \u0026\u0026 this.ballVX \u003e 0) {\n                        this.ballX \u003d 950;\n                        this.ballVX *\u003d -1;\n                    }\n                }\n            }\n            if(this.ballY \u003c 34) {\n                this.ballY \u003d 34;\n                this.ballVY \u003d (-this.ballVY * 7 / 10|0);\n                this.ballVX \u003d (this.ballVX * 7 / 10|0);\n            }\n        }\n        i \u003d (this.ballX * this.nWidth / 1000|0);\n        j \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        this.screen.setColor(ShimmedColor.yellow);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n    }\n\n    /*private*/ DrawGoals() {\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillRect((this.nWidth / 20|0), (4 * this.nHeight / 5|0) - (200 * this.nHeight / 1000|0), 5, (200 * this.nHeight / 1000|0));\n        this.screen.fillRect(this.nWidth - (this.nWidth / 20|0) - 5, (4 * this.nHeight / 5|0) - (200 * this.nHeight / 1000|0), 5, (200 * this.nHeight / 1000|0));\n        this.screen.fillRect(0, (4 * this.nHeight / 5|0) + 2, (this.nWidth / 10|0), 2);\n        this.screen.fillRect((this.nWidth * 9 / 10|0), (4 * this.nHeight / 5|0) + 2, (this.nWidth / 10|0), 2);\n        let p1TickX : number;\n        for(p1TickX \u003d 0; p1TickX \u003c (this.nWidth / 20|0); p1TickX +\u003d 5) {\n            this.screen.drawLine(p1TickX, (4 * this.nHeight / 5|0) - (200 * this.nHeight / 1000|0), p1TickX, (4 * this.nHeight / 5|0));\n            this.screen.drawLine(this.nWidth - p1TickX, (4 * this.nHeight / 5|0) - (200 * this.nHeight / 1000|0), this.nWidth - p1TickX, (4 * this.nHeight / 5|0));\n        };\n        for(p1TickX \u003d (4 * this.nHeight / 5|0) - (this.nHeight / 5|0); p1TickX \u003c (4 * this.nHeight / 5|0); p1TickX +\u003d 5) {\n            this.screen.drawLine(0, p1TickX, (this.nWidth / 20|0), p1TickX);\n            this.screen.drawLine(this.nWidth, p1TickX, this.nWidth - (this.nWidth / 20|0), p1TickX);\n        };\n        p1TickX \u003d ((600000000 - this.p1TouchingGoal) * this.nWidth / 1200000000|0);\n        this.screen.setColor(this.secondaryCols[this.p1Col]);\n        this.screen.fillRect(0, this.nHeight - 5, p1TickX, 5);\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect(p1TickX, this.nHeight - 5, (this.nWidth / 2|0) - p1TickX, 5);\n        let p2TickX : number \u003d this.nWidth - ((600000000 - this.p2TouchingGoal) * this.nWidth / 1200000000|0);\n        this.screen.setColor(this.secondaryCols[this.p2Col]);\n        this.screen.fillRect(p2TickX, this.nHeight - 5, this.nWidth, 5);\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect((this.nWidth / 2|0), this.nHeight - 5, p2TickX - (this.nWidth / 2|0), 5);\n    }\n\n    /*private*/ DrawStatus() {\n        let g : ShimmedGraphics \u003d this.screen;\n        let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let s : string \u003d null;\n        let time : string \u003d this.MakeTime(this.gameTime);\n        let i : number \u003d (this.nHeight / 20|0);\n        let k : number \u003d 0;\n        let kt : number \u003d fontmetrics.stringWidth(time);\n        if(this.worldCup) {\n            switch((this.worldCupRound)) {\n            case 1:\n                s \u003d \"Quarter Finals\";\n                break;\n            case 2:\n                s \u003d \"Semi-Finals\";\n                break;\n            case 3:\n                s \u003d \"Final\";\n                break;\n            default:\n                s \u003d \"Qualifying\";\n            }\n            if(this.fGoldenGoal) {\n                s \u003d s + \" [Golden Goal]\";\n            } else if(this.fExtraTime) {\n                s \u003d s + \" [Extra Time]\";\n            }\n            k \u003d fontmetrics.stringWidth(s);\n        }\n        let mw : number \u003d k \u003c\u003d kt?kt:k;\n        g.setColor(ShimmedColor.blue);\n        g.fillRect((this.nWidth / 2|0) - (mw / 2|0) - 5, 0, mw + 10, i + 22);\n        g.setColor(ShimmedColor.white);\n        this.screen.drawString(time, (this.nWidth / 2|0) - (kt / 2|0), fontmetrics.getAscent() + 20);\n        if(s !\u003d null) {\n            this.screen.drawString(s, (this.nWidth / 2|0) - (k / 2|0), fontmetrics.getAscent() + 20 - fontmetrics.getHeight());\n        }\n    }\n\n    public drawPrompt$() {\n        this.screen.setColor(ShimmedColor.gray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5|0) + 6, this.nWidth, (this.nHeight / 5|0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    }\n\n    public drawPrompt$java_lang_String$int(s : string, i : number) {\n        let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.lightGray);\n        this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2|0), (this.nHeight * 4 / 5|0) + fontmetrics.getHeight() * (i + 1) + 10);\n    }\n\n    public drawPrompt(s? : any, i? : any) : any {\n        if(((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null) \u0026\u0026 ((typeof i \u003d\u003d\u003d \u0027number\u0027) || i \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.drawPrompt$java_lang_String$int(s, i);\n        } else if(s \u003d\u003d\u003d undefined \u0026\u0026 i \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.drawPrompt$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    /*private*/ promptBox(msg1 : string, msg2 : string) {\n        let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let len1 : number \u003d fontmetrics.stringWidth(msg1);\n        let len2 : number \u003d fontmetrics.stringWidth(msg2);\n        let maxlen : number \u003d len1 \u003c\u003d len2?len2:len1;\n        this.screen.setColor(ShimmedColor.darkGray);\n        this.screen.fillRect((this.nWidth / 2|0) - (maxlen / 2|0) - 20, (this.nHeight * 2 / 5|0), maxlen + 40, (this.nHeight / 5|0));\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawString(msg1, (this.nWidth / 2|0) - (len1 / 2|0), (this.nHeight * 9 / 20|0));\n        this.screen.drawString(msg2, (this.nWidth / 2|0) - (len2 / 2|0), (this.nHeight * 11 / 20|0));\n        this.flip();\n    }\n\n    /*private*/ SaveReplayData() {\n        this.replayData[this.replayPos][0] \u003d this.p1X;\n        this.replayData[this.replayPos][1] \u003d this.p1Y;\n        this.replayData[this.replayPos][2] \u003d this.p2X;\n        this.replayData[this.replayPos][3] \u003d this.p2Y;\n        this.replayData[this.replayPos][4] \u003d this.ballX;\n        this.replayData[this.replayPos][5] \u003d this.ballY;\n        this.replayData[this.replayPos][6] \u003d this.p1Col;\n        this.replayData[this.replayPos][7] \u003d this.p2Col;\n        ++this.replayPos;\n        if(this.replayPos \u003e\u003d 200) {\n            this.replayPos \u003d 0;\n        }\n        if(this.replayStart \u003d\u003d\u003d this.replayPos) {\n            ++this.replayStart;\n        }\n        if(this.replayStart \u003e\u003d 200) {\n            this.replayStart \u003d 0;\n        }\n    }\n\n    /*private*/ drawScores() {\n        let g : ShimmedGraphics \u003d this.screen;\n        let k : number \u003d (this.nHeight / 20|0);\n        let fm : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let i : number \u003d fm.stringWidth(\"Replay...\");\n        g.setColor(ShimmedColor.blue);\n        g.fillRect(0, 0, this.nWidth, k + 22);\n        g.setColor(ShimmedColor.white);\n        g.drawString(this.slimeColText[this.p1Col] + \" : \" + this.p1Score, (this.nWidth / 20|0), k);\n        let p2ScrStr : string \u003d this.p2Score + \" : \" + this.slimeColText[this.p2Col];\n        g.drawString(p2ScrStr, this.nWidth - (this.nWidth / 20|0) - fm.stringWidth(p2ScrStr), k);\n    }\n\n    public checkScored() : boolean {\n        if(this.ballY \u003e\u003d 200 || this.ballX \u003e\u003d 40 \u0026\u0026 this.ballX \u003c\u003d 960) {\n            return false;\n        } else {\n            this.nScoreX \u003d this.ballX;\n            this.fPlayOn \u003d true;\n            this.playOnTicks \u003d 10;\n            return true;\n        }\n    }\n\n    public run() {\n        this.worldCupRound \u003d 0;\n        do {\n            this.initStuff();\n            this.replayPos \u003d this.replayStart \u003d 0;\n            this.scoringRun \u003d 0;\n            this.fP1Touched \u003d this.fP2Touched \u003d false;\n            this.gameTime \u003d 0;\n            this.startTime \u003d ShimmedSystem.currentTimeMillis();\n            this.fEndGame \u003d false;\n            this.fCanChangeCol \u003d false;\n            this.mousePressed \u003d false;\n            this.gameTime \u003d Math.floor(\u003cnumber\u003ethis.gameLength);\n            this.fInPlay \u003d true;\n            this.fEndGame \u003d false;\n            let l : string;\n            if(this.worldCup) {\n                this.paint(this.getGraphics());\n                do {\n                    this.p2Col \u003d (\u003cnumber\u003e(Math.random() * \u003cnumber\u003ethis.slimaryCols.length / 4.0)|0) + (this.worldCupRound * this.slimaryCols.length / 4|0);\n                } while((this.p1Col \u003d\u003d\u003d this.p2Col));\n                l \u003d this.slimeColText[this.p1Col] + \" vs. \" + this.slimeColText[this.p2Col];\n                switch((this.worldCupRound)) {\n                case 0:\n                    this.promptBox(\"Qualifying Round\", l);\n                    this.gameLength \u003d 30000;\n                    break;\n                case 1:\n                    this.promptBox(\"Quarter Finals\", l);\n                    this.gameLength \u003d 120000;\n                    break;\n                case 2:\n                    this.promptBox(\"Semi-Finals\", l);\n                    this.gameLength \u003d 120000;\n                    break;\n                case 3:\n                    this.promptBox(\"World Cup Final\", l);\n                    this.gameLength \u003d 300000;\n                }\n                try {\n                    ShimmedThread.sleep$long(4000);\n                } catch(var5) {\n                };\n                this.repaint();\n                this.flip();\n            }\n            while((this.gameTime \u003e 0 || this.worldCup \u0026\u0026 this.worldCupRound \u003e 0 \u0026\u0026 this.p1Score \u003d\u003d\u003d this.p2Score)) {\n                this.gameTime \u003d this.startTime + Math.floor(\u003cnumber\u003ethis.gameLength) - ShimmedSystem.currentTimeMillis();\n                if(this.gameTime \u003c 0) {\n                    this.gameTime \u003d 0;\n                }\n                if(this.worldCup \u0026\u0026 !this.fExtraTime \u0026\u0026 this.gameTime \u003c\u003d 0 \u0026\u0026 this.worldCupRound \u003e 0 \u0026\u0026 this.p1Score \u003d\u003d\u003d this.p2Score) {\n                    l \u003d this.p1Score !\u003d\u003d 0?\" \" + this.p1Score:\" nil\";\n                    this.promptBox(\"The score is \" + this.slimeColText[this.p1Col] + l + \", \" + this.slimeColText[this.p2Col] + l + \".\", \"And the game goes into extra time...\");\n                    try {\n                        ShimmedThread.sleep$long(4000);\n                    } catch(var10) {\n                    };\n                    this.repaint();\n                    this.flip();\n                    this.startTime +\u003d 30000;\n                    this.gameTime +\u003d 30000;\n                    this.fExtraTime \u003d true;\n                } else if(this.gameTime \u003c\u003d 0 \u0026\u0026 this.fExtraTime \u0026\u0026 !this.fGoldenGoal \u0026\u0026 this.p1Score \u003d\u003d\u003d this.p2Score) {\n                    this.fGoldenGoal \u003d true;\n                    l \u003d this.p1Score !\u003d\u003d 0?\" \" + this.p1Score:\" nil\";\n                    this.promptBox(\"The score is \" + this.slimeColText[this.p1Col] + l + \", \" + this.slimeColText[this.p2Col] + l + \", and the game goes into Golden Goal.\", \"The next player to score will win the match!\");\n                    try {\n                        ShimmedThread.sleep$long(4000);\n                    } catch(var9) {\n                    };\n                    this.repaint();\n                    this.flip();\n                }\n                this.SaveReplayData();\n                this.p1OldX \u003d this.p1X;\n                this.p1OldY \u003d this.p1Y;\n                this.p2OldX \u003d this.p2X;\n                this.p2OldY \u003d this.p2Y;\n                this.ballOldX \u003d this.ballX;\n                this.ballOldY \u003d this.ballY;\n                this.MoveSlimers();\n                this.DrawSlimers();\n                this.DrawGoals();\n                this.DrawStatus();\n                this.flip();\n                if(this.p1X \u003c 150) {\n                    ++this.p1TouchingGoal;\n                } else {\n                    this.p1TouchingGoal \u003d 0;\n                }\n                if(this.p2X \u003e 850) {\n                    ++this.p2TouchingGoal;\n                } else {\n                    this.p2TouchingGoal \u003d 0;\n                }\n                if(this.fPlayOn) {\n                    --this.playOnTicks;\n                } else {\n                    this.fPlayOn \u003d this.checkScored();\n                }\n                if(this.playOnTicks \u003d\u003d\u003d 0 || this.p1TouchingGoal \u003e 600000000 || this.p2TouchingGoal \u003e 600000000) {\n                    let var11 : number \u003d ShimmedSystem.currentTimeMillis();\n                    if(this.p1TouchingGoal \u003e 600000000) {\n                        ++this.p2Score;\n                        this.promptMsg \u003d this.slimeColText[this.p1Col] + \" pinged for goal hanging!\";\n                    } else if(this.p2TouchingGoal \u003e 600000000) {\n                        ++this.p1Score;\n                        this.promptMsg \u003d this.slimeColText[this.p2Col] + \" pinged for goal hanging!\";\n                    } else if(this.nScoreX \u003c 500) {\n                        ++this.p2Score;\n                        this.promptMsg \u003d this.slimeColText[this.p2Col] + \" Scores!\";\n                    } else {\n                        ++this.p1Score;\n                        this.promptMsg \u003d this.slimeColText[this.p1Col] + \" Scores!\";\n                    }\n                    this.drawPrompt();\n                    this.drawPrompt$java_lang_String$int(\"Click mouse for replay...\", 1);\n                    this.flip();\n                    this.mousePressed \u003d false;\n                    if(this.gameThread !\u003d null) {\n                        try {\n                            ShimmedThread.sleep$long(2500);\n                        } catch(var8) {\n                        };\n                    }\n                    if(this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt();\n                    this.playOnTicks \u003d 10;\n                    this.fPlayOn \u003d false;\n                    this.startTime +\u003d ShimmedSystem.currentTimeMillis() - var11;\n                    this.ballX \u003d 490 + (\u003cnumber\u003e(Math.random() * 20.0)|0);\n                    this.ballY \u003d 190 + (\u003cnumber\u003e(Math.random() * 20.0)|0);\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.repaint();\n                }\n                if(this.gameThread !\u003d null) {\n                    try {\n                        if(this.fPlayOn) {\n                            ShimmedThread.sleep$long(120);\n                        } else {\n                            ShimmedThread.sleep$long(20);\n                        }\n                    } catch(var7) {\n                    };\n                }\n            };\n            this.fEndGame \u003d true;\n            if(this.fPlayOn) {\n                if(this.nScoreX \u003c 500) {\n                    ++this.p2Score;\n                    this.promptMsg \u003d this.slimeColText[this.p2Col] + \" scores at the final whistle!\";\n                } else {\n                    ++this.p1Score;\n                    this.promptMsg \u003d this.slimeColText[this.p1Col] + \" scores at the final whistle!\";\n                }\n                this.drawPrompt();\n            } else {\n                this.drawPrompt$java_lang_String$int(\"And that\\\u0027s the final whistle!\", 0);\n            }\n            if(this.worldCup) {\n                if(this.p1Score \u003d\u003d\u003d this.p2Score) {\n                    this.drawPrompt$java_lang_String$int(\"It\\\u0027s a draw at full time, here at Slime Stadium!\", 1);\n                    this.promptBox(\"You played well, but a draw is not enough.\", \"You have been eliminated.\");\n                    this.worldCup \u003d false;\n                    this.flip();\n                } else if(this.p1Score \u003e\u003d this.p2Score) {\n                    switch((this.worldCupRound)) {\n                    case 0:\n                        this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" qualifies for the world cup!\", 1);\n                        break;\n                    case 1:\n                        this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" proceeds to the semi-finals!\", 1);\n                        break;\n                    case 2:\n                        this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" is through to the final!!!\", 1);\n                        break;\n                    case 3:\n                        this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" wins the WORLD CUP!!!!!\", 1);\n                    }\n                    if(this.worldCupRound \u003d\u003d\u003d 3) {\n                        this.worldCup \u003d false;\n                        this.promptBox(\"You win the world cup!!!\", \"Congratulations!\");\n                    } else {\n                        ++this.worldCupRound;\n                    }\n                } else {\n                    switch((this.worldCupRound)) {\n                    case 0:\n                    case 1:\n                        this.promptBox(\"You have been eliminated.\", \"Goodbye.\");\n                        break;\n                    case 2:\n                        this.promptBox(\"You have been knocked out of the semifinals.\", \"You played well.\");\n                        break;\n                    case 3:\n                        this.promptBox(\"You came second.\", \"Are you satisfied with that?\");\n                    }\n                    this.worldCup \u003d false;\n                }\n            } else if(this.p1Score \u003d\u003d\u003d this.p2Score) {\n                this.drawPrompt$java_lang_String$int(\"It\\\u0027s a draw at full time, here at Slime Stadium!\", 1);\n            } else if(this.p1Score \u003c this.p2Score) {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p2Col] + \" (\" + this.p2Score + \")    def. \" + this.slimeColText[this.p1Col] + \" (\" + this.p1Score + \")\", 1);\n            } else {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \" (\" + this.p1Score + \")    def. \" + this.slimeColText[this.p2Col] + \" (\" + this.p2Score + \")\", 1);\n            }\n            this.flip();\n            try {\n                ShimmedThread.sleep$long(5000);\n            } catch(var6) {\n            };\n            this.initStuff();\n        } while((this.worldCup));\n        this.fCanChangeCol \u003d true;\n        this.fInPlay \u003d false;\n        this.repaint();\n    }\n\n    public init() {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.fInPlay \u003d this.fEndGame \u003d false;\n        this.fCanChangeCol \u003d true;\n        this.initStuff();\n        this.promptMsg \u003d \"Click on an option to play...\";\n        this.backBuffer \u003d this.createImage(this.nWidth, this.nHeight);\n        this.screen \u003d this.getGraphics();\n        this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n    }\n\n    /*private*/ toggleBuffering() {\n        if(this.doubleBuffered \u003d !this.doubleBuffered) {\n            this.screen \u003d this.backBuffer.getGraphics();\n            this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n        } else {\n            this.screen \u003d this.getGraphics();\n            this.screen.setFont(new ShimmedFont(this.screen.getFont().getName(), 1, 15));\n        }\n        this.repaint();\n    }\n\n    /*private*/ DoReplay() {\n        let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let i : number \u003d fontmetrics.stringWidth(\"Replay...\");\n        let j : number \u003d fontmetrics.getHeight();\n        let k : number \u003d (this.nWidth / 2|0) - (i / 2|0);\n        let l : number \u003d (this.nHeight / 2|0) - j;\n        this.promptMsg \u003d \"Click the mouse to continue...\";\n        this.mousePressed \u003d false;\n        let i1 : number \u003d this.replayPos - 1;\n        while((!this.mousePressed)) {\n            ++i1;\n            if(i1 \u003e\u003d 200) {\n                i1 \u003d 0;\n            }\n            if(i1 \u003d\u003d\u003d this.replayPos) {\n                try {\n                    ShimmedThread.sleep$long(1000);\n                } catch(var9) {\n                };\n                i1 \u003d this.replayStart;\n                this.paint(this.getGraphics());\n            }\n            this.ReplayFrame(i1, k, l, i, j, false);\n            this.flip();\n        };\n        this.promptMsg \u003d \"\";\n        this.paint(this.getGraphics());\n    }\n\n    /*private*/ flip() {\n        if(this.doubleBuffered) {\n            this.getGraphics().drawImage(this.backBuffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n        }\n    }\n\n    /*private*/ getBallBounceX() : number {\n        let t : number \u003d this.ballVY + (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(this.ballVY * this.ballVY + 2 * this.ballY))|0);\n        let ballBounceX : number \u003d this.ballX + t * this.ballVX;\n        if(ballBounceX \u003c 0) {\n            ballBounceX \u003d -ballBounceX;\n        }\n        if(ballBounceX \u003e 1000) {\n            ballBounceX \u003d 1000 - ballBounceX;\n        }\n        return ballBounceX;\n    }\n\n    /*private*/ getBallMaxY() : number {\n        return this.ballVY \u003c 0?this.ballY:this.ballY + (this.ballVY * this.ballVY / 2|0);\n    }\n\n    /*private*/ controlP2v0() {\n        this.p2XV \u003d 0;\n        if(this.ballX \u003e this.p2X + 5 \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if(this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if(this.ballX + 50 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n        if(this.ballX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballY \u003e 10 \u0026\u0026 this.ballY \u003c 150) {\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if(this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / this.SLIMEVEL|0)) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n    }\n\n    /*private*/ controlP2v1() {\n        this.p2XV \u003d 0;\n        let bounceX : number \u003d this.getBallBounceX();\n        let ballMaxY : number \u003d this.getBallMaxY();\n        if(this.ballVY \u003e\u003d 1) {\n            let var10000 : number \u003d this.ballVY;\n        } else {\n            let var4 : boolean \u003d true;\n        }\n        if(bounceX \u003e 900) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(bounceX + 20 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n        if(this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if(bounceX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(this.ballX \u003e this.p2X \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if(this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballX \u003e this.p1X - 120 \u0026\u0026 this.ballX \u003c this.p1X + 120 \u0026\u0026 this.ballY \u003e this.p1Y \u0026\u0026 this.ballY \u003c this.p1Y + 100 \u0026\u0026 this.p1Y \u003e 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(this.p2Score \u003e\u003d this.p1Score \u0026\u0026 bounceX \u003c 200 \u0026\u0026 this.p2X \u003e this.p1X || bounceX \u003c this.p1X + 50 \u0026\u0026 bounceX \u003e this.p1X - 50 \u0026\u0026 (this.ballVY / 4|0) \u003d\u003d\u003d 0 \u0026\u0026 this.p1X \u003c 400 \u0026\u0026 this.p2X \u003c 848) {\n            if(this.p2X \u003c 900) {\n                this.p2XV \u003d this.SLIMEVEL;\n            }\n            if(this.ballX \u003e 800 \u0026\u0026 bounceX \u003e 950 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 ballMaxY \u003e 40) {\n                this.p2YV \u003d this.JUMPVEL;\n            }\n        }\n        if(this.p2YV \u003d\u003d\u003d this.JUMPVEL) {\n            if(ballMaxY \u003c 110) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballX \u003c this.p2X - 400) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballY \u003c 80) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballX \u003c 900 \u0026\u0026 this.p2X \u003e 900) {\n                this.p2YV \u003d 0;\n            }\n            if(this.p2X \u003c 150) {\n                this.p2YV \u003d 0;\n            }\n        }\n        if(this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / this.SLIMEVEL|0)) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n    }\n\n    /*private*/ controlP2v2() {\n        let bounceX : number \u003d this.getBallBounceX();\n        let ballMaxY : number \u003d this.getBallMaxY();\n        if(this.ballVY \u003e\u003d 1) {\n            let var10000 : number \u003d this.ballVY;\n        } else {\n            let var4 : boolean \u003d true;\n        }\n        if(this.p2X \u003c 790) {\n            this.p2XV \u003d this.SLIMEVEL;\n        } else if(this.p2X \u003e 830) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        } else {\n            this.p2XV \u003d 0;\n        }\n        if(bounceX \u003e 900) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(bounceX + 20 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n        if(this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if(bounceX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(this.ballX \u003e this.p2X \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if(this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballX \u003e this.p1X - 120 \u0026\u0026 this.ballX \u003c this.p1X + 120 \u0026\u0026 this.ballY \u003e this.p1Y \u0026\u0026 this.ballY \u003c this.p1Y + 100 \u0026\u0026 this.p1Y \u003e 0) {\n            this.p2XV \u003d this.SLIMEVEL;\n        }\n        if(this.p2Score \u003e\u003d this.p1Score \u0026\u0026 bounceX \u003c 200 \u0026\u0026 this.p2X \u003e this.p1X || bounceX \u003c this.p1X + 50 \u0026\u0026 bounceX \u003e this.p1X - 50 \u0026\u0026 (this.ballVY / 4|0) \u003d\u003d\u003d 0 \u0026\u0026 this.p1X \u003c 400 \u0026\u0026 this.p2X \u003c 848) {\n            if(this.p2X \u003c 900) {\n                this.p2XV \u003d this.SLIMEVEL;\n            }\n            if(this.ballX \u003e 800 \u0026\u0026 bounceX \u003e 950 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 ballMaxY \u003e 40) {\n                this.p2YV \u003d this.JUMPVEL;\n            }\n        }\n        if(this.p2YV \u003d\u003d\u003d this.JUMPVEL) {\n            if(ballMaxY \u003c 110) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballX \u003c this.p2X - 400) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballY \u003c 80) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballX \u003c 900 \u0026\u0026 this.p2X \u003e 900) {\n                this.p2YV \u003d 0;\n            }\n        }\n        if(this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.p2X \u003c 400 \u0026\u0026 bounceX \u003e 500 \u0026\u0026 ballMaxY \u003e 50) {\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if(this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / this.SLIMEVEL|0)) {\n            this.p2XV \u003d -this.SLIMEVEL;\n        }\n    }\n\n    /*private*/ controlP2v3() {\n        let SLIMEVEL : number \u003d (this.SLIMEVEL * 4 / 3|0);\n        let bounceX : number \u003d this.getBallBounceX();\n        let ballMaxY : number \u003d this.getBallMaxY();\n        if(this.ballVY \u003e\u003d 1) {\n            let var10000 : number \u003d this.ballVY;\n        } else {\n            let var5 : boolean \u003d true;\n        }\n        if(this.p2X \u003c 790) {\n            this.p2XV \u003d SLIMEVEL;\n        } else if(this.p2X \u003e 830) {\n            this.p2XV \u003d -SLIMEVEL;\n        } else {\n            this.p2XV \u003d 0;\n        }\n        if(bounceX \u003e 900) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if(bounceX + 20 \u003c this.p2X) {\n            this.fP2Sticky \u003d false;\n            this.p2XV \u003d -SLIMEVEL;\n        }\n        if(this.ballX \u003e this.p2X - 10) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if(this.ballX + 30 \u003e this.p2X \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.fP2Sticky \u003d false;\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if(bounceX \u003e this.p2X + 50 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if(this.ballX \u003e this.p2X \u0026\u0026 this.ballX \u003c 960) {\n            this.fP2Sticky \u003d true;\n        }\n        if(this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.ballX \u003e this.p1X - 120 \u0026\u0026 this.ballX \u003c this.p1X + 120 \u0026\u0026 this.ballY \u003e this.p1Y \u0026\u0026 this.ballY \u003c this.p1Y + 100 \u0026\u0026 this.p1Y \u003e 0) {\n            this.p2XV \u003d SLIMEVEL;\n        }\n        if(this.p2Score \u003e\u003d this.p1Score \u0026\u0026 bounceX \u003c 200 \u0026\u0026 this.p2X \u003e this.p1X || bounceX \u003c this.p1X + 50 \u0026\u0026 bounceX \u003e this.p1X - 50 \u0026\u0026 (this.ballVY / 4|0) \u003d\u003d\u003d 0 \u0026\u0026 this.p1X \u003c 400 \u0026\u0026 this.p2X \u003c 848) {\n            if(this.p2X \u003c 900) {\n                this.p2XV \u003d SLIMEVEL;\n            }\n            if(this.ballX \u003e 800 \u0026\u0026 bounceX \u003e 950 \u0026\u0026 this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 ballMaxY \u003e 40) {\n                this.p2YV \u003d this.JUMPVEL;\n            }\n        }\n        if(this.p2YV \u003d\u003d\u003d this.JUMPVEL) {\n            if(ballMaxY \u003c 110) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballX \u003c this.p2X - 400) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballY \u003c 80) {\n                this.p2YV \u003d 0;\n            }\n            if(this.ballX \u003c 900 \u0026\u0026 this.p2X \u003e 900) {\n                this.p2YV \u003d 0;\n            }\n            if(this.p2XV \u003e 0 \u0026\u0026 ballMaxY \u003e 200 \u0026\u0026 bounceX \u003e this.p2X + 300) {\n                this.p2YV \u003d 0;\n            }\n        }\n        if(this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.p2X \u003c 400 \u0026\u0026 bounceX \u003e this.p2X + 400 \u0026\u0026 ballMaxY \u003e 50) {\n            this.p2YV \u003d this.JUMPVEL;\n        }\n        if(this.p2TouchingGoal \u003e 0 \u0026\u0026 600000000 - this.p2TouchingGoal \u003c 3 + ((this.p2X - 850) / SLIMEVEL|0)) {\n            this.p2XV \u003d -SLIMEVEL;\n        }\n    }\n\n    /*private*/ method_rn_ElasticSlime_p_1(s : string) {\n        ShimmedSystem.out.println$java_lang_Object(s);\n    }\n}\nElasticSlime[\"__class\"] \u003d \"ElasticSlime\";\nElasticSlime[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\n\n\n\nclass ShimmedBufferedImage extends ShimmedImage {\n    public constructor(x : number, y : number, z : number) {\n        super();\n    }\n\n    public getSubimage(a : number, b : number, c : number, d : number) : ShimmedBufferedImage {\n        return null;\n    }\n}\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\n\n\nclass ShimmedFrame extends ShimmedElement {\n    public setTitle(s : string) {\n    }\n\n    public pack() {\n    }\n\n    public show() {\n    }\n\n    public dispose() {\n    }\n\n    public setLayout(g : ShimmedGridLayout) {\n    }\n}\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\n\n\nclass ShimmedTextField extends ShimmedElement {\n    public constructor(s : number) {\n        super();\n    }\n\n    public getText() : string {\n        return null;\n    }\n}\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\n\n\nclass ShimmedButton extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\n\n\nclass ShimmedPanel extends ShimmedElement {}\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\n\n\nclass ShimmedLabel extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n\n\n\n",
  "packageName": "_"
}