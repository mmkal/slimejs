public class ShimmedSize {
	public int width;
	public int height;
}
public class ShimmedApplet {
	public ShimmedSize size() { return null; }
	public ShimmedImage createImage(int x, int y) { return null; }
	public void showStatus(String s) {}
	public void repaint() {}
	public ShimmedGraphics getGraphics() { return null; }
	public void requestFocus() {}
	public int getWidth() { return 0; }
	public int getHeight() { return 0; }
	public ShimmedDocumentBase getDocumentBase() { return null; }
	public ShimmedAppletContext getAppletContext() { return null; }
	public ShimmedURL getCodeBase() { return null; }
	public ShimmedAudioClip getAudioClip(ShimmedURL u, String s) { return null; }
	public ShimmedImage getImage(ShimmedURL u, String s) { return null; }
}
public class ShimmedColor {
	public static ShimmedColor yellow = null;
	public static ShimmedColor black = null;
	public static ShimmedColor red = null;
	public static ShimmedColor gray = null;
	public static ShimmedColor white = null;
	public static ShimmedColor blue = null;
	public static ShimmedColor green = null;
	public static ShimmedColor pink = null;
	public static ShimmedColor cyan = null;
	public static ShimmedColor lightGray = null;
	public static ShimmedColor darkGray = null;
	public static ShimmedColor orange = null;
	public ShimmedColor(int r, int g, int b) {}
}
public class ShimmedGraphics {
	public ShimmedFont getFont() { return null; }
	public void setFont(ShimmedFont f) {}
	public void setColor(ShimmedColor c) {}
	public void fillRect(int x, int y, int w, int h) {}
	public ShimmedFontMetrics getFontMetrics() { return null; }
	public void drawString(String s, int x, int y) {}
	public void drawImage(ShimmedImage i, int x, int y, Object o) {}
	public void drawOval(int x, int y, int w, int h) {}
	public void fillOval(int x, int y, int w, int h) {}
	public void fillArc(int x, int y, int w, int h, int s, int e) {}
	public void drawLine(int x, int y, int w, int h) {}
	public void drawRect(int x, int y, int w, int h) {}
	public void fillPolygon(int[] xs, int[] ys, int n) {}
	public void fillPolygon(ShimmedPolygon p) {}
	public void drawArc(int x, int y, int w, int h, int s, int e) {}
}
public class ShimmedImage {
	public ShimmedGraphics getGraphics() { return null; }
	public int getHeight(ShimmedApplet a) { return 0; }
}
public class ShimmedEvent {
	public int id;
	public int x;
	public int y;
	public int key;
	public ShimmedButton target;
	public static final int KEY_ACTION = 0;
	public static final int LEFT = 1;
	public static final int RIGHT = 2;
	public static final int UP = 3;
	public static final int DOWN = 4;
	public static final int KEY_ACTION_RELEASE = 5;
}
public class ShimmedFont {
	public String getName() { return null; }
	public ShimmedFont(String name, int w, int h) {}
}
public class ShimmedFontMetrics {
	public int getHeight() { return 0; }
	public int stringWidth(String s) { return 0; }
	public int getAscent() { return 0; }
}
public class ShimmedThread {
    public static void sleep(long ms) {}
    public static void sleep(long ms, boolean b) {}
    public ShimmedThread(ShimmedRunnable r) {}
    public void start() {}
    public void stop() {}
}
public interface ShimmedRunnable {}

public class ShimmedAppletContext {
	public void showDocument(ShimmedURL u) {}
	public void showDocument(ShimmedURL u, String s) {}
}
public class ShimmedDocumentBase {
	public String getHost() { return null; }
}
public class ShimmedURL { 
	public ShimmedURL(String s) {}
	public ShimmedInputStream openStream() { return null; }
}
public class ShimmedPrintStream {
	public Object print(Object s) { return null; }
	public Object println() { return null; }
	public Object println(Object s) { return null; }
}
public class ShimmedSystem {
	public static ShimmedPrintStream out = null;
	public static long currentTimeMillis() { return 0L; }
}
public class ShimmedBufferedImage extends ShimmedImage {
	public ShimmedBufferedImage(int x, int y, int z) {}
	public ShimmedBufferedImage getSubimage(int a, int b, int c, int d) { return null; }
}
public class ShimmedVector {
	public ShimmedVector(int n) {}
	public void removeAllElements() {}
	public Object get(int i) { return null; }
	public int size() { return 0; }
	public void add(int[] x) {}
}
public class ShimmedElement {
	public void add(ShimmedElement e) {}
}
public class ShimmedFrame extends ShimmedElement {
	public void setTitle(String s) {}
	public void pack() {}
	public void show() {}
	public void dispose() {}
	public void setLayout(ShimmedGridLayout g) {}
}
public class ShimmedTextField extends ShimmedElement {
	public ShimmedTextField(int s) {}
	public String getText() { return null; }
}
public class ShimmedButton extends ShimmedElement {
	public ShimmedButton(String s) {}
}
public class ShimmedPolygon {
	public ShimmedPolygon(int[] xs, int[] ys, int n) {}
}
public class ShimmedInputStream {
	public void close() {}
}
public class ShimmedBufferedReader {
	public ShimmedBufferedReader(ShimmedInputStreamReader i) {}
	public String readLine() { return null; }
	public void close() {}
}
public class ShimmedInputStreamReader {
	public ShimmedInputStreamReader(ShimmedInputStream is) {}
}
public class ShimmedPanel extends ShimmedElement {
}
public class ShimmedLabel extends ShimmedElement {
	public ShimmedLabel(String s) {}
}
public class ShimmedGridLayout {
	public ShimmedGridLayout(int x, int y) {}
}
public class ShimmedLong {
	public static long parseLong(String s) { return 0L; }
}
public class ShimmedChars {
	/** Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints. */
	public static char[] charCodeArray(String s) { return null; }
}
public class ShimmedImageObserver {

}
public class ShimmedRandom {
	public int nextInt(int m) { return 0; }
}
public class ShimmedAudioClip {
	public void play() {}
}
public class ShimmedStringBuffer {
	public ShimmedStringBuffer() {}
	public ShimmedStringBuffer(Object i) {}
	public ShimmedStringBuffer append(Object s) { return null; }
}

public class EndOfShimDeclarations{}

public class Slime2P extends ShimmedApplet implements ShimmedRunnable {
   private int nWidth;
   private int nHeight;
   private final int topScore = 10;
   private int nScore;
   private int nPointsScored;
   private int p1X;
   private int p2X;
   private int p1Y;
   private int p2Y;
   private int p1Col;
   private int p2Col = 1;
   private ShimmedColor[] slimeColours;
   private String[] slimeColText = new String[]{"Super Blue Slime ", "Power Green Slime "};
   private int p1OldX;
   private int p2OldX;
   private int p1OldY;
   private int p2OldY;
   private int p1XV;
   private int p2XV;
   private int p1YV;
   private int p2YV;
   private int ballX;
   private int ballY;
   private int ballVX;
   private int ballVY;
   private int ballOldX;
   private int ballOldY;
   private ShimmedGraphics screen;
   private String promptMsg;
   private int[][] replayData;
   private int replayPos;
   private int replayStart;
   private boolean mousePressed;
   private boolean fCanChangeCol;
   private boolean fInPlay;
   private int p1Blink;
   private int p2Blink;
   private boolean fP1Touched;
   private boolean fP2Touched;
   private ShimmedThread gameThread;
   private boolean fEndGame;
   private long startTime;
   private long gameTime;
   private int scoringRun;
   private int frenzyCol = 0;
   private final int scoringRunForSuper = 2;
   private final int pow_HOPBALL = 1;
   private final int pow_KILLBALL = 2;
   private final int pow_INVERTBALL = 3;
   private final int pow_ATTRACTBALL = 4;
   private final int pow_REPELBALL = 5;
   private final int pow_HOPBALL_ENERGY = 10;
   private final int pow_KILLBALL_ENERGY = 35;
   private final int pow_INVERTBALL_ENERGY = 15;
   private final int pow_ATTRACTBALL_ENERGY = 5;
   private final int pow_REPELBALL_ENERGY = 5;
   private int p1Pow = 1;
   private int p2Pow = 1;
   private int p1PowReq = 10;
   private int p2PowReq = 10;
   private ShimmedColor bgColor = new ShimmedColor(0, 0, 50);
   private float p1Energy = 100.0F;
   private float p2Energy = 100.0F;
   String p1PowString = "undefined";
   String p2PowString = "undefined";
   boolean fBouncyRoof = true;

   public boolean handleEvent(ShimmedEvent event) {
      switch(event.id) {
      case 401:
      case 403:
         if(!this.fEndGame) {
            switch(event.key) {
            case 9:
            case 81:
            case 113:
               this.slimerSpecial(1);
               break;
            case 10:
            case 72:
            case 104:
               this.slimerSpecial(2);
               break;
            case 65:
            case 97:
               this.p1XV = this.scoringRun <= -2?-16:-8;
               break;
            case 68:
            case 100:
               this.p1XV = this.scoringRun <= -2?16:8;
               break;
            case 73:
            case 105:
            case 1004:
               if(this.p2Y == 0) {
                  this.p2YV = this.scoringRun >= 2?45:31;
               }
               break;
            case 74:
            case 106:
            case 1006:
               this.p2XV = this.scoringRun >= 2?-16:-8;
               break;
            case 75:
            case 107:
            case 1005:
               if(this.fCanChangeCol) {
                  this.p2Pow = this.p2Pow != 5?this.p2Pow + 1:1;
                  switch(this.p2Pow) {
                  case 1:
                     this.p2PowReq = 10;
                     break;
                  case 2:
                     this.p2PowReq = 35;
                     break;
                  case 3:
                     this.p2PowReq = 15;
                     break;
                  case 4:
                     this.p2PowReq = 5;
                     break;
                  case 5:
                     this.p2PowReq = 5;
                  }

                  this.drawScores();
                  this.drawEnergyBars();
                  break;
               }
            case 32:
               this.mousePressed = true;
               break;
            case 76:
            case 108:
            case 1007:
               this.p2XV = this.scoringRun >= 2?16:8;
               break;
            case 83:
            case 115:
               this.p1Pow = this.p1Pow != 5?this.p1Pow + 1:1;
               switch(this.p1Pow) {
               case 1:
                  this.p1PowReq = 10;
                  break;
               case 2:
                  this.p1PowReq = 35;
                  break;
               case 3:
                  this.p1PowReq = 15;
                  break;
               case 4:
                  this.p1PowReq = 5;
                  break;
               case 5:
                  this.p1PowReq = 5;
               }

               this.drawScores();
               this.drawEnergyBars();
               break;
            case 87:
            case 119:
               if(this.p1Y == 0) {
                  this.p1YV = this.scoringRun <= -2?45:31;
               }
            }
         }
         break;
      case 402:
      case 404:
         switch(event.key) {
         case 65:
         case 97:
            if(this.p1XV < 0) {
               this.p1XV = 0;
            }

            return false;
         case 68:
         case 100:
            if(this.p1XV > 0) {
               this.p1XV = 0;
            }

            return false;
         case 74:
         case 106:
         case 1006:
            if(this.p2XV < 0) {
               this.p2XV = 0;
            }

            return false;
         case 76:
         case 108:
         case 1007:
            if(this.p2XV > 0) {
               this.p2XV = 0;
            }

            return false;
         default:
            return false;
         }
      case 501:
         this.mousePressed = true;
         if(!this.fInPlay) {
            this.fEndGame = false;
            this.fInPlay = true;
            this.nScore = 5;
            this.nPointsScored = 0;
            this.p1X = 200;
            this.p1Y = 0;
            this.p2X = 800;
            this.p2Y = 0;
            this.p1XV = 0;
            this.p1YV = 0;
            this.p2XV = 0;
            this.p2YV = 0;
            this.ballX = 200;
            this.ballY = 400;
            this.ballVX = 0;
            this.ballVY = 0;
            this.promptMsg = "";
            this.repaint();
            this.gameThread = new ShimmedThread(this);
            this.gameThread.start();
         }
         break;
      case 503:
         this.showStatus("Slime Volleyball 2-Player, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid");
      }

      return false;
   }

   private void DrawSlimers() {
      int k1 = this.nWidth / 10;
      int j2 = this.nHeight / 10;
      int i3 = this.nWidth / 50;
      int j3 = this.nHeight / 25;
      int k3 = this.ballX * this.nWidth / 1000;
      int l3 = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      int i = this.p1OldX * this.nWidth / 1000 - k1 / 2;
      int l = 7 * this.nHeight / 10 - this.p1OldY * this.nHeight / 1000;
      this.screen.setColor(this.bgColor);
      this.screen.fillRect(i, l, k1, j2);
      i = this.p2OldX * this.nWidth / 1000 - k1 / 2;
      l = 7 * this.nHeight / 10 - this.p2OldY * this.nHeight / 1000;
      this.screen.setColor(this.bgColor);
      this.screen.fillRect(i, l, k1, j2);
      this.MoveBall();
      i = this.p1X * this.nWidth / 1000 - k1 / 2;
      l = 7 * this.nHeight / 10 - this.p1Y * this.nHeight / 1000;
      this.screen.setColor(this.scoringRun <= -2?this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length]:ShimmedColor.blue);
      this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
      int l4 = this.p1X + 38;
      int i5 = this.p1Y - 60;
      i = l4 * this.nWidth / 1000;
      l = 7 * this.nHeight / 10 - i5 * this.nHeight / 1000;
      int i4 = i - k3;
      int j4 = l - l3;
      int k4 = (int)Math.sqrt((double)(i4 * i4 + j4 * j4));
      boolean flag = Math.random() < 0.01D;
      if(flag) {
         this.p1Blink = 5;
      }

      if(this.p1Blink == 0) {
         this.screen.setColor(ShimmedColor.white);
         this.screen.fillOval(i - i3, l - j3, i3, j3);
         if(k4 > 0 && !flag) {
            this.screen.setColor(ShimmedColor.black);
            this.screen.fillOval(i - 4 * i4 / k4 - 3 * i3 / 4, l - 4 * j4 / k4 - 3 * j3 / 4, i3 / 2, j3 / 2);
         }
      } else {
         --this.p1Blink;
      }

      i = this.p2X * this.nWidth / 1000 - k1 / 2;
      l = 7 * this.nHeight / 10 - this.p2Y * this.nHeight / 1000;
      this.screen.setColor(this.scoringRun >= 2?this.slimeColours[this.frenzyCol = (this.frenzyCol + 1) % this.slimeColours.length]:ShimmedColor.green);
      this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);
      l4 = this.p2X - 18;
      i5 = this.p2Y - 60;
      i = l4 * this.nWidth / 1000;
      l = 7 * this.nHeight / 10 - i5 * this.nHeight / 1000;
      i4 = i - k3;
      j4 = l - l3;
      k4 = (int)Math.sqrt((double)(i4 * i4 + j4 * j4));
      flag = Math.random() < 0.01D;
      if(flag) {
         this.p2Blink = 5;
      }

      if(this.p2Blink == 0) {
         this.screen.setColor(flag?ShimmedColor.gray:ShimmedColor.white);
         this.screen.fillOval(i - i3, l - j3, i3, j3);
         if(k4 > 0 && !flag) {
            this.screen.setColor(ShimmedColor.black);
            this.screen.fillOval(i - 4 * i4 / k4 - 3 * i3 / 4, l - 4 * j4 / k4 - 3 * j3 / 4, i3 / 2, j3 / 2);
         }
      } else {
         --this.p2Blink;
      }

      int i2;
      int l2;
      int k;
      int j1;
      int k5;
      if(this.nScore > 8) {
         i2 = this.p1X * this.nWidth / 1000;
         l2 = 7 * this.nHeight / 10 - (this.p1Y - 40) * this.nHeight / 1000;
         k = this.nWidth / 20;
         j1 = this.nHeight / 20;
         k5 = 0;

         do {
            this.screen.setColor(ShimmedColor.black);
            this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);
            ++k5;
         } while(k5 < 3);

      } else {
         if(this.nScore < 2) {
            i2 = this.nWidth / 20;
            l2 = this.nHeight / 20;
            k = this.p2X * this.nWidth / 1000 - i2;
            j1 = 7 * this.nHeight / 10 - (this.p2Y - 40) * this.nHeight / 1000;
            k5 = 0;

            do {
               this.screen.setColor(ShimmedColor.black);
               this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);
               ++k5;
            } while(k5 < 3);
         }

      }
   }

   public void paint(ShimmedGraphics g) {
      this.nWidth = this.size().width;
      this.nHeight = this.size().height;
      g.setColor(this.bgColor);
      g.fillRect(0, 0, this.nWidth, 4 * this.nHeight / 5);
      g.setColor(ShimmedColor.darkGray);
      g.fillRect(0, 4 * this.nHeight / 5, this.nWidth, this.nHeight / 5);
      g.setColor(ShimmedColor.white);
      g.fillRect(this.nWidth / 2 - 2, 7 * this.nHeight / 10, 4, this.nHeight / 10 + 5);
      this.drawScores();
      this.drawPrompt();
      this.drawEnergyBars();
      if(!this.fInPlay) {
         ShimmedFontMetrics fm = this.screen.getFontMetrics();
         g.setFont(new ShimmedFont("Arial", 1, 150));
         fm = g.getFontMetrics();
         g.setColor(new ShimmedColor(20, 20, 40));
         g.drawString("2", this.nWidth / 2 - fm.stringWidth("2") / 2, this.nHeight / 2 + 20);
         g.setFont(new ShimmedFont("Courier", 0, 18));
         fm = g.getFontMetrics();
         g.setColor(new ShimmedColor(255, 255, 255));
         g.drawString("Slime Volleyball", this.nWidth / 2 - fm.stringWidth("Slime Volleyball") / 2, this.nHeight / 2);
         g.setFont(new ShimmedFont("Courier", 3, 12));
         fm = g.getFontMetrics();
         g.setColor(new ShimmedColor(255, 255, 100));
         g.drawString("POWER SLIME - beta", this.nWidth / 2 - fm.stringWidth("POWER SLIME - beta") / 2, this.nHeight / 2 + 15);
         g.setFont(new ShimmedFont("Arial", 0, 11));
         fm = g.getFontMetrics();
         g.setColor(new ShimmedColor(255, 255, 255));
         fm = g.getFontMetrics();
         g.drawString("Written by Quin Pendragon", this.nWidth / 2 - fm.stringWidth("Written by Quin Pendragon") / 2, this.nHeight / 2 + fm.getHeight() * 2 + 20);
         g.drawString("Mod by Tim Lightfoot", this.nWidth / 2 - fm.stringWidth("Mod by Tim Lightfoot") / 2, this.nHeight / 2 + fm.getHeight() * 2 + 35);
      }

   }

   public void destroy() {
      this.gameThread.stop();
      this.gameThread = null;
   }

   private void ReplayFrame(int i, int j, int k, int l, int i1, boolean flag) {
      if(flag) {
         this.ballX = this.ballOldX = -50000000;
         this.ballY = this.ballOldY = 100000;
         this.p1OldX = this.p1OldY = this.p2OldX = this.p2OldY = -10000;
      } else {
         int _ex = i != 0?i - 1:199;
         this.p1OldX = this.replayData[_ex][0];
         this.p1OldY = this.replayData[_ex][1];
         this.p2OldX = this.replayData[_ex][2];
         this.p2OldY = this.replayData[_ex][3];
         this.ballOldX = this.replayData[_ex][4];
         this.ballOldY = this.replayData[_ex][5];
      }

      this.p1X = this.replayData[i][0];
      this.p1Y = this.replayData[i][1];
      this.p2X = this.replayData[i][2];
      this.p2Y = this.replayData[i][3];
      this.ballX = this.replayData[i][4];
      this.ballY = this.replayData[i][5];
      this.p1Col = this.replayData[i][6];
      this.p2Col = this.replayData[i][7];
      this.ballVX = 0;
      this.ballVY = 1;
      if(i / 10 % 2 > 0) {
         this.screen.setColor(ShimmedColor.red);
         this.screen.drawString("Replay...", j, k);
      } else {
         this.screen.setColor(this.bgColor);
         this.screen.fillRect(j, k - i1, l, i1 * 2);
      }

      this.DrawSlimers();

      try {
         ShimmedThread.sleep(20L);
      } catch (InterruptedException var8) {
         ;
      }
   }

   private String MakeTime(long l) {
      long l1 = l / 10L % 100L;
      long l2 = l / 1000L % 60L;
      long l3 = l / 60000L % 60L;
      long l4 = l / 3600000L;
      String s = "";
      if(l4 < 10L) {
         s = String.valueOf(String.valueOf(s)).concat("0");
      }

      s = String.valueOf(String.valueOf(s)).concat(String.valueOf(String.valueOf(l4)));
      s = String.valueOf(String.valueOf(s)).concat(":");
      if(l3 < 10L) {
         s = String.valueOf(String.valueOf(s)).concat("0");
      }

      s = String.valueOf(String.valueOf(s)).concat(String.valueOf(String.valueOf(l3)));
      s = String.valueOf(String.valueOf(s)).concat(":");
      if(l2 < 10L) {
         s = String.valueOf(String.valueOf(s)).concat("0");
      }

      s = String.valueOf(String.valueOf(s)).concat(String.valueOf(String.valueOf(l2)));
      s = String.valueOf(String.valueOf(s)).concat(":");
      if(l1 < 10L) {
         s = String.valueOf(String.valueOf(s)).concat("0");
      }

      s = String.valueOf(String.valueOf(s)).concat(String.valueOf(String.valueOf(l1)));
      return s;
   }

   private void MoveSlimers() {
      this.p1X += this.p1XV;
      if(this.p1X < 50) {
         this.p1X = 50;
      }

      if(this.p1X > 445) {
         this.p1X = 445;
      }

      if(this.p1YV != 0) {
         this.p1Y += this.p1YV -= this.scoringRun <= -2?4:2;
         if(this.p1Y < 0) {
            this.p1Y = 0;
            this.p1YV = 0;
         }
      }

      this.p2X += this.p2XV;
      if(this.p2X > 950) {
         this.p2X = 950;
      }

      if(this.p2X < 555) {
         this.p2X = 555;
      }

      if(this.p2YV != 0) {
         this.p2Y += this.p2YV -= this.scoringRun >= 2?4:2;
         if(this.p2Y < 0) {
            this.p2Y = 0;
            this.p2YV = 0;
         }
      }

   }

   public Slime2P() {
      this.slimeColours = new ShimmedColor[]{ShimmedColor.red, ShimmedColor.green, ShimmedColor.yellow, ShimmedColor.white, ShimmedColor.black};
      this.replayData = new int[200][8];
   }

   private void MoveBall() {
      int k = 30 * this.nHeight / 1000;
      int i = this.ballOldX * this.nWidth / 1000;
      int j = 4 * this.nHeight / 5 - this.ballOldY * this.nHeight / 1000;
      this.screen.setColor(this.bgColor);
      this.screen.fillOval(i - k, j - k, k * 2, k * 2);
      this.ballY += --this.ballVY;
      this.ballX += this.ballVX;
      if(this.fBouncyRoof) {
         ;
      }

      if(!this.fEndGame) {
         int l1 = (this.ballX - this.p1X) * 2;
         int i2 = this.ballY - this.p1Y;
         int j2 = l1 * l1 + i2 * i2;
         int k2 = this.ballVX - this.p1XV;
         int l2 = this.ballVY - this.p1YV;
         int i1;
         int k1;
         if(i2 > 0 && j2 < 15625 && j2 > 25) {
            i1 = (int)Math.sqrt((double)j2);
            k1 = (l1 * k2 + i2 * l2) / i1;
            this.ballX = this.p1X + l1 * 63 / i1;
            this.ballY = this.p1Y + i2 * 125 / i1;
            if(k1 <= 0) {
               this.ballVX += this.p1XV - 2 * l1 * k1 / i1;
               if(this.ballVX < -15) {
                  this.ballVX = -15;
               }

               if(this.ballVX > 15) {
                  this.ballVX = 15;
               }

               this.ballVY += this.p1YV - 2 * i2 * k1 / i1;
               if(this.ballVY < -22) {
                  this.ballVY = -22;
               }

               if(this.ballVY > 22) {
                  this.ballVY = 22;
               }
            }

            this.fP1Touched = true;
         }

         l1 = (this.ballX - this.p2X) * 2;
         i2 = this.ballY - this.p2Y;
         j2 = l1 * l1 + i2 * i2;
         k2 = this.ballVX - this.p2XV;
         l2 = this.ballVY - this.p2YV;
         if(i2 > 0 && j2 < 15625 && j2 > 25) {
            i1 = (int)Math.sqrt((double)j2);
            k1 = (l1 * k2 + i2 * l2) / i1;
            this.ballX = this.p2X + l1 * 63 / i1;
            this.ballY = this.p2Y + i2 * 125 / i1;
            if(k1 <= 0) {
               this.ballVX += this.p2XV - 2 * l1 * k1 / i1;
               if(this.ballVX < -15) {
                  this.ballVX = -15;
               }

               if(this.ballVX > 15) {
                  this.ballVX = 15;
               }

               this.ballVY += this.p2YV - 2 * i2 * k1 / i1;
               if(this.ballVY < -22) {
                  this.ballVY = -22;
               }

               if(this.ballVY > 22) {
                  this.ballVY = 22;
               }
            }

            this.fP2Touched = true;
         }

         if(this.ballX < 15) {
            this.ballX = 15;
            this.ballVX = -this.ballVX;
         }

         if(this.ballX > 985) {
            this.ballX = 985;
            this.ballVX = -this.ballVX;
         }

         if(this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
            if(this.ballVY < 0 && this.ballY > 130) {
               this.ballVY *= -1;
               this.ballY = 130;
            } else if(this.ballX < 500) {
               this.ballX = 480;
               this.ballVX = this.ballVX >= 0?-this.ballVX:this.ballVX;
            } else {
               this.ballX = 520;
               this.ballVX = this.ballVX <= 0?-this.ballVX:this.ballVX;
            }
         }
      }

      i = this.ballX * this.nWidth / 1000;
      j = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      this.screen.setColor(ShimmedColor.yellow);
      this.screen.fillOval(i - k, j - k, k * 2, k * 2);
   }

   private void DrawStatus() {
      ShimmedGraphics g = this.screen;
      int i = this.nHeight / 20;
      g.setColor(this.bgColor);
      ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
      int j = this.nWidth / 2 + (this.nScore - 5) * this.nWidth / 24;
      String s = String.valueOf(String.valueOf((new ShimmedStringBuffer("Points: ")).append(this.nPointsScored).append("   Elapsed: ").append(this.MakeTime(this.gameTime))));
      int k = fontmetrics.stringWidth(s);
      g.fillRect(j - k / 2 - 5, 0, k + 10, i + 22);
      g.setColor(ShimmedColor.white);
      this.screen.drawString(s, j - k / 2, fontmetrics.getAscent() + 20);
   }

   public void drawPrompt() {
      this.screen.setColor(ShimmedColor.darkGray);
      this.screen.fillRect(0, 4 * this.nHeight / 5 + 6, this.nWidth, this.nHeight / 5 - 10);
      this.drawPrompt(this.promptMsg, 0);
   }

   public void drawPrompt(String s, int i) {
      ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
      this.screen.setColor(ShimmedColor.lightGray);
      this.screen.drawString(s, (this.nWidth - fontmetrics.stringWidth(s)) / 2, this.nHeight * 4 / 5 + fontmetrics.getHeight() * (i + 1) + 10);
   }

   private void SaveReplayData() {
      this.replayData[this.replayPos][0] = this.p1X;
      this.replayData[this.replayPos][1] = this.p1Y;
      this.replayData[this.replayPos][2] = this.p2X;
      this.replayData[this.replayPos][3] = this.p2Y;
      this.replayData[this.replayPos][4] = this.ballX;
      this.replayData[this.replayPos][5] = this.ballY;
      this.replayData[this.replayPos][6] = this.p1Col;
      this.replayData[this.replayPos][7] = this.p2Col;
      ++this.replayPos;
      if(this.replayPos >= 200) {
         this.replayPos = 0;
      }

      if(this.replayStart == this.replayPos) {
         ++this.replayStart;
      }

      if(this.replayStart >= 200) {
         this.replayStart = 0;
      }

   }

   private void drawScores() {
      ShimmedGraphics g = this.screen;
      int k = this.nHeight / 20;

      int i1;
      int j;
      for(i1 = 0; i1 < this.nScore; ++i1) {
         j = (i1 + 1) * this.nWidth / 24;
         g.setColor(ShimmedColor.blue);
         g.fillOval(j, 20, k, k);
         g.setColor(ShimmedColor.white);
         g.drawOval(j, 20, k, k);
      }

      g.setColor(this.bgColor);
      g.drawString("Special Ability: ".concat(String.valueOf(String.valueOf(this.p1PowString))), 20, 60);
      switch(this.p1Pow) {
      case 1:
         this.p1PowString = "Super Hop";
         break;
      case 2:
         this.p1PowString = "Stun Ball";
         break;
      case 3:
         this.p1PowString = "Invert Ball";
         break;
      case 4:
         this.p1PowString = "Telekenetic Attract";
         break;
      case 5:
         this.p1PowString = "Telekenetic Repel";
      }

      g.setColor(ShimmedColor.white);
      g.drawString("Special Ability: ".concat(String.valueOf(String.valueOf(this.p1PowString))), 20, 60);

      for(i1 = 0; i1 < 10 - this.nScore; ++i1) {
         j = this.nWidth - (i1 + 1) * this.nWidth / 24 - k;
         g.setColor(ShimmedColor.green);
         g.fillOval(j, 20, k, k);
         g.setColor(ShimmedColor.white);
         g.drawOval(j, 20, k, k);
      }

      g.setColor(this.bgColor);
      g.drawString("Special Ability: ".concat(String.valueOf(String.valueOf(this.p2PowString))), this.nWidth - 200, 60);
      switch(this.p2Pow) {
      case 1:
         this.p2PowString = "Super Hop";
         break;
      case 2:
         this.p2PowString = "Stun Ball";
         break;
      case 3:
         this.p2PowString = "Invert Ball";
         break;
      case 4:
         this.p2PowString = "Telekenetic Attract";
         break;
      case 5:
         this.p2PowString = "Telekenetic Repel";
      }

      g.setColor(ShimmedColor.white);
      g.drawString("Special Ability: ".concat(String.valueOf(String.valueOf(this.p2PowString))), this.nWidth - 200, 60);
   }

   public void run() {
      this.replayPos = this.replayStart = 0;
      this.p1Col = 0;
      this.p2Col = 1;
      this.scoringRun = 0;
      this.fP1Touched = this.fP2Touched = false;
      this.nPointsScored = 0;
      this.startTime = ShimmedSystem.currentTimeMillis();

      while(this.nScore != 0 && this.nScore != 10 && this.gameThread != null) {
         this.gameTime = ShimmedSystem.currentTimeMillis() - this.startTime;
         this.SaveReplayData();
         this.p1OldX = this.p1X;
         this.p1OldY = this.p1Y;
         this.p2OldX = this.p2X;
         this.p2OldY = this.p2Y;
         this.ballOldX = this.ballX;
         this.ballOldY = this.ballY;
         this.MoveSlimers();
         this.DrawSlimers();
         this.DrawStatus();
         this.recoverSlimerEnergy();
         this.drawEnergyBars();
         this.drawScores();
         if(this.ballY < 35) {
            long l = ShimmedSystem.currentTimeMillis();
            ++this.nPointsScored;
            this.nScore += this.ballX <= 500?-1:1;
            if(this.ballX <= 500 && this.scoringRun >= 0) {
               ++this.scoringRun;
            } else if(this.ballX > 500 && this.scoringRun <= 0) {
               --this.scoringRun;
            } else if(this.ballX <= 500 && this.scoringRun <= 0) {
               this.scoringRun = 1;
            } else if(this.ballX > 500 && this.scoringRun >= 0) {
               this.scoringRun = -1;
            }

            this.promptMsg = this.ballX <= 500?this.slimeColText[this.p2Col]:this.slimeColText[this.p1Col];
            if(!this.fP1Touched && !this.fP2Touched) {
               this.promptMsg = "It\'s official, you suck!";
            } else if((this.scoringRun < 0?-this.scoringRun:this.scoringRun) == 2) {
               this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("is on fire!");
            } else if(this.ballX > 500 && this.fP1Touched && !this.fP2Touched || this.ballX <= 500 && !this.fP1Touched && this.fP2Touched) {
               this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("aces the serve!");
            } else if(this.ballX > 500 && !this.fP1Touched && this.fP2Touched || this.ballX <= 500 && this.fP1Touched && !this.fP2Touched) {
               this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("watches you make a tool of yourself!");
            } else {
               switch(this.nScore) {
               case 0:
               case 10:
                  if(this.nPointsScored == 5) {
                     this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("Wins with a QUICK FIVE!!!");
                  } else if(this.scoringRun == 8) {
                     this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("Wins with a BIG NINE!!!");
                  } else {
                     this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("Wins!!!");
                  }
                  break;
               case 1:
               case 2:
               case 3:
               case 7:
               case 8:
               case 9:
               default:
                  this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("Scores!");
                  break;
               case 4:
                  this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat(String.valueOf(String.valueOf(this.ballX >= 500?"Scores!":"takes the lead!!")));
                  break;
               case 5:
                  this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat("Equalizes!");
                  break;
               case 6:
                  this.promptMsg = String.valueOf(String.valueOf(this.promptMsg)).concat(String.valueOf(String.valueOf(this.ballX <= 500?"Scores!":"takes the lead!!")));
               }
            }

            this.fCanChangeCol = false;
            boolean flag = this.nScore != 0 && this.nScore != 10;
            int i = this.ballX;
            this.drawPrompt();
            if(flag) {
               this.drawPrompt("Click mouse or Hit space for replay...", 1);
               this.mousePressed = false;
               if(this.gameThread != null) {
                  try {
                     ShimmedThread.sleep(2500L);
                  } catch (InterruptedException var8) {
                     ;
                  }
               }

               if(this.mousePressed) {
                  this.SaveReplayData();
                  this.DoReplay();
               }
            } else if(this.gameThread != null) {
               try {
                  ShimmedThread.sleep(2500L);
               } catch (InterruptedException var7) {
                  ;
               }
            }

            this.promptMsg = "";
            this.drawPrompt();
            this.fCanChangeCol = true;
            if(flag) {
               this.p1X = 200;
               this.p1Y = 0;
               this.p2X = 800;
               this.p2Y = 0;
               this.p1XV = 0;
               this.p1YV = 0;
               this.p2XV = 0;
               this.p2YV = 0;
               this.ballX = i >= 500?200:800;
               this.ballY = 400;
               this.ballVX = 0;
               this.ballVY = 0;
               this.replayStart = this.replayPos = 0;
               this.fP1Touched = this.fP2Touched = false;
               this.repaint();
            }

            this.startTime += ShimmedSystem.currentTimeMillis() - l;
         }

         if(this.gameThread != null) {
            try {
               ShimmedThread.sleep(20L);
            } catch (InterruptedException var6) {
               ;
            }
         }
      }

      this.fEndGame = true;
      this.SaveReplayData();
      this.DoReplay();
      this.fInPlay = false;
      this.promptMsg = "Click the mouse to play...";
      this.repaint();
   }

   public void init() {
      this.nWidth = this.size().width;
      this.nHeight = this.size().height;
      this.nScore = 5;
      this.fInPlay = this.fEndGame = false;
      this.fCanChangeCol = true;
      this.promptMsg = "Click the mouse to play...";
      this.screen = this.getGraphics();
   }

   private void DoReplay() {
      ShimmedFontMetrics fontmetrics = this.screen.getFontMetrics();
      int i = fontmetrics.stringWidth("Replay...");
      int j = fontmetrics.getHeight();
      int k = this.nWidth / 2 - i / 2;
      int l = this.nHeight / 2 - j;
      this.promptMsg = "Click mouse or hit space to continue...";
      this.mousePressed = false;

      for(int i1 = this.replayPos - 1; !this.mousePressed; this.ReplayFrame(i1, k, l, i, j, false)) {
         ++i1;
         if(i1 >= 200) {
            i1 = 0;
         }

         if(i1 == this.replayPos) {
            try {
               ShimmedThread.sleep(1000L);
            } catch (InterruptedException var8) {
               ;
            }

            i1 = this.replayStart;
            this.paint(this.getGraphics());
         }
      }

      this.promptMsg = "";
      this.paint(this.getGraphics());
   }

   private void DoFatality() {
   }

   private void slimerSpecial(int playerNum) {
      if(this.fP1Touched && this.fP2Touched) {
         float dx;
         float dy;
         switch(playerNum) {
         case 1:
            if(this.scoringRun > -2) {
               this.p1Energy -= (float)this.p1PowReq;
            }

            switch(this.p1Pow) {
            case 1:
               if(this.p1Energy > (float)this.p1PowReq) {
                  this.promptMsg = "Slimer 1 Hops the ball!";
                  this.drawPrompt();
                  this.ballVY += 20;
                  this.drawEnergyBars();
               }

               return;
            case 2:
               if(this.p1Energy > (float)this.p1PowReq) {
                  this.promptMsg = "Slimer 1 stuns the ball!";
                  this.drawPrompt();
                  this.ballVX = 0;
                  this.ballVY = 0;
                  this.drawEnergyBars();
               }

               return;
            case 3:
               if(this.p1Energy > (float)this.p1PowReq) {
                  this.promptMsg = "Slimer 1 Inverts the ball!";
                  this.drawPrompt();
                  this.ballVX *= -1;
                  this.ballVY *= -1;
                  this.drawEnergyBars();
               }

               return;
            case 4:
               this.promptMsg = "Slimer 1 uses telekenetic attract!";
               this.drawPrompt();
               if(this.p1Energy > (float)this.p1PowReq) {
                  dx = (float)(this.ballX - this.p1X);
                  dy = (float)(this.ballY - this.p1Y);
                  if(Math.abs(dx) > Math.abs(dy)) {
                     dy /= dx;
                     dx /= Math.abs(dx);
                  } else {
                     dx /= dy;
                     dy /= Math.abs(dy);
                  }

                  this.ballVX = (int)((float)this.ballVX - (float)8 * dx);
                  this.ballVY = (int)((float)this.ballVY - (float)8 * dy);
                  this.drawEnergyBars();
               }

               return;
            case 5:
               if(this.p1Energy > (float)this.p1PowReq) {
                  this.promptMsg = "Slimer 1 uses telekenetic repel!";
                  this.drawPrompt();
                  dx = (float)(this.ballX - this.p1X);
                  dy = (float)(this.ballY - this.p1Y);
                  if(Math.abs(dx) > Math.abs(dy)) {
                     dy /= dx;
                     dx /= Math.abs(dx);
                  } else {
                     dx /= dy;
                     dy /= Math.abs(dy);
                  }

                  this.ballVX = (int)((float)this.ballVX + (float)10 * dx);
                  this.ballVY = (int)((float)this.ballVY + (float)10 * dy);
                  this.drawEnergyBars();
               }

               return;
            default:
               return;
            }
         case 2:
            if(this.scoringRun < 2) {
               this.p2Energy -= (float)this.p2PowReq;
            }

            switch(this.p2Pow) {
            case 1:
               if(this.p2Energy > (float)this.p2PowReq) {
                  this.promptMsg = "Slimer 2 Hops the ball!";
                  this.drawPrompt();
                  this.ballVY += 20;
                  this.drawEnergyBars();
               }
               break;
            case 2:
               if(this.p2Energy > (float)this.p2PowReq) {
                  this.promptMsg = "Slimer 2 stuns the ball!";
                  this.drawPrompt();
                  this.ballVX = 0;
                  this.ballVY = 0;
                  this.drawEnergyBars();
               }
               break;
            case 3:
               if(this.p2Energy > (float)this.p2PowReq) {
                  this.promptMsg = "Slimer 2 Inverts the ball!";
                  this.drawPrompt();
                  this.ballVX *= -1;
                  this.ballVY *= -1;
                  this.drawEnergyBars();
               }
               break;
            case 4:
               this.promptMsg = "Slimer 2 uses telekenetic attract!";
               this.drawPrompt();
               if(this.p2Energy > (float)this.p2PowReq) {
                  dx = (float)(this.ballX - this.p2X);
                  dy = (float)(this.ballY - this.p2Y);
                  if(Math.abs(dx) > Math.abs(dy)) {
                     dy /= dx;
                     dx /= Math.abs(dx);
                  } else {
                     dx /= dy;
                     dy /= Math.abs(dy);
                  }

                  this.ballVX = (int)((float)this.ballVX - (float)8 * dx);
                  this.ballVY = (int)((float)this.ballVY - (float)8 * dy);
                  this.drawEnergyBars();
               }
               break;
            case 5:
               if(this.p2Energy > (float)this.p2PowReq) {
                  this.promptMsg = "Slimer 2 uses telekenetic repel!";
                  this.drawPrompt();
                  dx = (float)(this.ballX - this.p2X);
                  dy = (float)(this.ballY - this.p2Y);
                  if(Math.abs(dx) > Math.abs(dy)) {
                     dy /= dx;
                     dx /= Math.abs(dx);
                  } else {
                     dx /= dy;
                     dy /= Math.abs(dy);
                  }

                  this.ballVX = (int)((float)this.ballVX + (float)10 * dx);
                  this.ballVY = (int)((float)this.ballVY + (float)10 * dy);
                  this.drawEnergyBars();
               }
            }
         }
      } else {
         this.promptMsg = "Sorry, No more cheap points!";
         this.drawPrompt();
      }

   }

   private void recoverSlimerEnergy() {
      if(this.p1Energy < (float)100) {
         this.p1Energy = (float)((double)this.p1Energy + 0.22D);
      }

      if(this.p2Energy < (float)100) {
         this.p2Energy = (float)((double)this.p2Energy + 0.22D);
      }

   }

   private void drawEnergyBars() {
      this.screen.setColor(ShimmedColor.darkGray);
      this.screen.fillRect(0, 4 * this.nHeight / 5 + 30, this.nWidth, 15);
      this.screen.setColor(ShimmedColor.black);
      this.screen.drawRect(10, 4 * this.nHeight / 5 + 30, this.nWidth / 2 - 20, 15);
      this.screen.drawRect(10 + this.nWidth / 2, 4 * this.nHeight / 5 + 30, this.nWidth / 2 - 20, 15);
      this.screen.setColor(new ShimmedColor(50, 50, 255));
      this.screen.fillRect(11, 4 * this.nHeight / 5 + 31, (int)((float)(this.nWidth / 2 - 22) * this.p1Energy) / 100, 14);
      this.screen.setColor(new ShimmedColor(30, 30, 30));
      this.screen.drawRect(10, 4 * this.nHeight / 5 + 30, (this.nWidth / 2 - 20) * this.p1PowReq / 100, 15);
      this.screen.setColor(new ShimmedColor(50, 255, 50));
      this.screen.fillRect(11 + this.nWidth / 2, 4 * this.nHeight / 5 + 31, (int)((float)(this.nWidth / 2 - 22) * this.p2Energy) / 100, 14);
      this.screen.setColor(new ShimmedColor(30, 30, 30));
      this.screen.drawRect(10 + this.nWidth / 2, 4 * this.nHeight / 5 + 30, (this.nWidth / 2 - 20) * this.p2PowReq / 100, 15);
   }
}

ENDOFJAVAMARKER
{
  "startTime": "2019-01-12 18:36:04",
  "sourceLength": 0,
  "success": true,
  "endTime": "2019-01-12 18:36:05",
  "durationMillis": 1639,
  "errors": [],
  "jsout": "var __extends \u003d (this \u0026\u0026 this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] \u003d b[p];\n    function __() { this.constructor \u003d d; }\n    d.prototype \u003d b \u003d\u003d\u003d null ? Object.create(b) : (__.prototype \u003d b.prototype, new __());\n};\n/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nvar ShimmedSize \u003d (function () {\n    function ShimmedSize() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n    return ShimmedSize;\n}());\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\nvar ShimmedApplet \u003d (function () {\n    function ShimmedApplet() {\n    }\n    ShimmedApplet.prototype.size \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.createImage \u003d function (x, y) {\n        return null;\n    };\n    ShimmedApplet.prototype.showStatus \u003d function (s) {\n    };\n    ShimmedApplet.prototype.repaint \u003d function () {\n    };\n    ShimmedApplet.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.requestFocus \u003d function () {\n    };\n    ShimmedApplet.prototype.getWidth \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getDocumentBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAppletContext \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getCodeBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAudioClip \u003d function (u, s) {\n        return null;\n    };\n    ShimmedApplet.prototype.getImage \u003d function (u, s) {\n        return null;\n    };\n    return ShimmedApplet;\n}());\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\nvar ShimmedColor \u003d (function () {\n    function ShimmedColor(r, g, b) {\n    }\n    return ShimmedColor;\n}());\nShimmedColor.yellow \u003d null;\nShimmedColor.black \u003d null;\nShimmedColor.red \u003d null;\nShimmedColor.gray \u003d null;\nShimmedColor.white \u003d null;\nShimmedColor.blue \u003d null;\nShimmedColor.green \u003d null;\nShimmedColor.pink \u003d null;\nShimmedColor.cyan \u003d null;\nShimmedColor.lightGray \u003d null;\nShimmedColor.darkGray \u003d null;\nShimmedColor.orange \u003d null;\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\nvar ShimmedGraphics \u003d (function () {\n    function ShimmedGraphics() {\n    }\n    ShimmedGraphics.prototype.getFont \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.setFont \u003d function (f) {\n    };\n    ShimmedGraphics.prototype.setColor \u003d function (c) {\n    };\n    ShimmedGraphics.prototype.fillRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.getFontMetrics \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.drawString \u003d function (s, x, y) {\n    };\n    ShimmedGraphics.prototype.drawImage \u003d function (i, x, y, o) {\n    };\n    ShimmedGraphics.prototype.drawOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillArc \u003d function (x, y, w, h, s, e) {\n    };\n    ShimmedGraphics.prototype.drawLine \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.drawRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillPolygon$int_A$int_A$int \u003d function (xs, ys, n) {\n    };\n    ShimmedGraphics.prototype.fillPolygon \u003d function (xs, ys, n) {\n        if (((xs !\u003d null \u0026\u0026 xs instanceof Array \u0026\u0026 (xs.length \u003d\u003d 0 || xs[0] \u003d\u003d null || (typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof Array \u0026\u0026 (ys.length \u003d\u003d 0 || ys[0] \u003d\u003d null || (typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return this.fillPolygon$int_A$int_A$int(xs, ys, n);\n        }\n        else if (((xs !\u003d null \u0026\u0026 xs instanceof ShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return this.fillPolygon$ShimmedPolygon(xs);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedGraphics.prototype.fillPolygon$ShimmedPolygon \u003d function (p) {\n    };\n    ShimmedGraphics.prototype.drawArc \u003d function (x, y, w, h, s, e) {\n    };\n    return ShimmedGraphics;\n}());\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\nvar ShimmedImage \u003d (function () {\n    function ShimmedImage() {\n    }\n    ShimmedImage.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedImage.prototype.getHeight \u003d function (a) {\n        return 0;\n    };\n    return ShimmedImage;\n}());\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\nvar ShimmedEvent \u003d (function () {\n    function ShimmedEvent() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n    return ShimmedEvent;\n}());\nShimmedEvent.KEY_ACTION \u003d 0;\nShimmedEvent.LEFT \u003d 1;\nShimmedEvent.RIGHT \u003d 2;\nShimmedEvent.UP \u003d 3;\nShimmedEvent.DOWN \u003d 4;\nShimmedEvent.KEY_ACTION_RELEASE \u003d 5;\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\nvar ShimmedFont \u003d (function () {\n    function ShimmedFont(name, w, h) {\n    }\n    ShimmedFont.prototype.getName \u003d function () {\n        return null;\n    };\n    return ShimmedFont;\n}());\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\nvar ShimmedFontMetrics \u003d (function () {\n    function ShimmedFontMetrics() {\n    }\n    ShimmedFontMetrics.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.stringWidth \u003d function (s) {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.getAscent \u003d function () {\n        return 0;\n    };\n    return ShimmedFontMetrics;\n}());\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\nvar ShimmedThread \u003d (function () {\n    function ShimmedThread(r) {\n    }\n    ShimmedThread.sleep$long \u003d function (ms) {\n    };\n    ShimmedThread.sleep$long$boolean \u003d function (ms, b) {\n    };\n    ShimmedThread.sleep \u003d function (ms, b) {\n        if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return ShimmedThread.sleep$long$boolean(ms, b);\n        }\n        else if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return ShimmedThread.sleep$long(ms);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedThread.prototype.start \u003d function () {\n    };\n    ShimmedThread.prototype.stop \u003d function () {\n    };\n    return ShimmedThread;\n}());\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\nvar ShimmedAppletContext \u003d (function () {\n    function ShimmedAppletContext() {\n    }\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL \u003d function (u) {\n    };\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL$java_lang_String \u003d function (u, s) {\n    };\n    ShimmedAppletContext.prototype.showDocument \u003d function (u, s) {\n        if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return this.showDocument$ShimmedURL$java_lang_String(u, s);\n        }\n        else if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return this.showDocument$ShimmedURL(u);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedAppletContext;\n}());\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\nvar ShimmedDocumentBase \u003d (function () {\n    function ShimmedDocumentBase() {\n    }\n    ShimmedDocumentBase.prototype.getHost \u003d function () {\n        return null;\n    };\n    return ShimmedDocumentBase;\n}());\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\nvar ShimmedURL \u003d (function () {\n    function ShimmedURL(s) {\n    }\n    ShimmedURL.prototype.openStream \u003d function () {\n        return null;\n    };\n    return ShimmedURL;\n}());\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\nvar ShimmedPrintStream \u003d (function () {\n    function ShimmedPrintStream() {\n    }\n    ShimmedPrintStream.prototype.print \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$ \u003d function () {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$java_lang_Object \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println \u003d function (s) {\n        if (((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return this.println$java_lang_Object(s);\n        }\n        else if (s \u003d\u003d\u003d undefined) {\n            return this.println$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedPrintStream;\n}());\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\nvar ShimmedSystem \u003d (function () {\n    function ShimmedSystem() {\n    }\n    ShimmedSystem.currentTimeMillis \u003d function () {\n        return 0;\n    };\n    return ShimmedSystem;\n}());\nShimmedSystem.out \u003d null;\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\nvar ShimmedVector \u003d (function () {\n    function ShimmedVector(n) {\n    }\n    ShimmedVector.prototype.removeAllElements \u003d function () {\n    };\n    ShimmedVector.prototype.get \u003d function (i) {\n        return null;\n    };\n    ShimmedVector.prototype.size \u003d function () {\n        return 0;\n    };\n    ShimmedVector.prototype.add \u003d function (x) {\n    };\n    return ShimmedVector;\n}());\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\nvar ShimmedElement \u003d (function () {\n    function ShimmedElement() {\n    }\n    ShimmedElement.prototype.add \u003d function (e) {\n    };\n    return ShimmedElement;\n}());\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\nvar ShimmedPolygon \u003d (function () {\n    function ShimmedPolygon(xs, ys, n) {\n    }\n    return ShimmedPolygon;\n}());\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\nvar ShimmedInputStream \u003d (function () {\n    function ShimmedInputStream() {\n    }\n    ShimmedInputStream.prototype.close \u003d function () {\n    };\n    return ShimmedInputStream;\n}());\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\nvar ShimmedBufferedReader \u003d (function () {\n    function ShimmedBufferedReader(i) {\n    }\n    ShimmedBufferedReader.prototype.readLine \u003d function () {\n        return null;\n    };\n    ShimmedBufferedReader.prototype.close \u003d function () {\n    };\n    return ShimmedBufferedReader;\n}());\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\nvar ShimmedInputStreamReader \u003d (function () {\n    function ShimmedInputStreamReader(is) {\n    }\n    return ShimmedInputStreamReader;\n}());\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\nvar ShimmedGridLayout \u003d (function () {\n    function ShimmedGridLayout(x, y) {\n    }\n    return ShimmedGridLayout;\n}());\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\nvar ShimmedLong \u003d (function () {\n    function ShimmedLong() {\n    }\n    ShimmedLong.parseLong \u003d function (s) {\n        return 0;\n    };\n    return ShimmedLong;\n}());\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\nvar ShimmedChars \u003d (function () {\n    function ShimmedChars() {\n    }\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    ShimmedChars.charCodeArray \u003d function (s) {\n        return null;\n    };\n    return ShimmedChars;\n}());\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\nvar ShimmedImageObserver \u003d (function () {\n    function ShimmedImageObserver() {\n    }\n    return ShimmedImageObserver;\n}());\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\nvar ShimmedRandom \u003d (function () {\n    function ShimmedRandom() {\n    }\n    ShimmedRandom.prototype.nextInt \u003d function (m) {\n        return 0;\n    };\n    return ShimmedRandom;\n}());\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\nvar ShimmedAudioClip \u003d (function () {\n    function ShimmedAudioClip() {\n    }\n    ShimmedAudioClip.prototype.play \u003d function () {\n    };\n    return ShimmedAudioClip;\n}());\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\nvar ShimmedStringBuffer \u003d (function () {\n    function ShimmedStringBuffer(i) {\n        if (((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else if (i \u003d\u003d\u003d undefined) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    }\n    ShimmedStringBuffer.prototype.append \u003d function (s) {\n        return null;\n    };\n    return ShimmedStringBuffer;\n}());\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\nvar EndOfShimDeclarations \u003d (function () {\n    function EndOfShimDeclarations() {\n    }\n    return EndOfShimDeclarations;\n}());\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\nvar Slime2P \u003d (function (_super) {\n    __extends(Slime2P, _super);\n    function Slime2P() {\n        var _this \u003d _super.call(this) || this;\n        /*private*/ _this.topScore \u003d 10;\n        /*private*/ _this.p2Col \u003d 1;\n        /*private*/ _this.slimeColText \u003d [\"Super Blue Slime \", \"Power Green Slime \"];\n        /*private*/ _this.frenzyCol \u003d 0;\n        /*private*/ _this.scoringRunForSuper \u003d 2;\n        /*private*/ _this.pow_HOPBALL \u003d 1;\n        /*private*/ _this.pow_KILLBALL \u003d 2;\n        /*private*/ _this.pow_INVERTBALL \u003d 3;\n        /*private*/ _this.pow_ATTRACTBALL \u003d 4;\n        /*private*/ _this.pow_REPELBALL \u003d 5;\n        /*private*/ _this.pow_HOPBALL_ENERGY \u003d 10;\n        /*private*/ _this.pow_KILLBALL_ENERGY \u003d 35;\n        /*private*/ _this.pow_INVERTBALL_ENERGY \u003d 15;\n        /*private*/ _this.pow_ATTRACTBALL_ENERGY \u003d 5;\n        /*private*/ _this.pow_REPELBALL_ENERGY \u003d 5;\n        /*private*/ _this.p1Pow \u003d 1;\n        /*private*/ _this.p2Pow \u003d 1;\n        /*private*/ _this.p1PowReq \u003d 10;\n        /*private*/ _this.p2PowReq \u003d 10;\n        /*private*/ _this.bgColor \u003d new ShimmedColor(0, 0, 50);\n        /*private*/ _this.p1Energy \u003d 100.0;\n        /*private*/ _this.p2Energy \u003d 100.0;\n        _this.p1PowString \u003d \"undefined\";\n        _this.p2PowString \u003d \"undefined\";\n        _this.fBouncyRoof \u003d true;\n        _this.nWidth \u003d 0;\n        _this.nHeight \u003d 0;\n        _this.nScore \u003d 0;\n        _this.nPointsScored \u003d 0;\n        _this.p1X \u003d 0;\n        _this.p2X \u003d 0;\n        _this.p1Y \u003d 0;\n        _this.p2Y \u003d 0;\n        _this.p1Col \u003d 0;\n        _this.slimeColours \u003d null;\n        _this.p1OldX \u003d 0;\n        _this.p2OldX \u003d 0;\n        _this.p1OldY \u003d 0;\n        _this.p2OldY \u003d 0;\n        _this.p1XV \u003d 0;\n        _this.p2XV \u003d 0;\n        _this.p1YV \u003d 0;\n        _this.p2YV \u003d 0;\n        _this.ballX \u003d 0;\n        _this.ballY \u003d 0;\n        _this.ballVX \u003d 0;\n        _this.ballVY \u003d 0;\n        _this.ballOldX \u003d 0;\n        _this.ballOldY \u003d 0;\n        _this.screen \u003d null;\n        _this.promptMsg \u003d null;\n        _this.replayData \u003d null;\n        _this.replayPos \u003d 0;\n        _this.replayStart \u003d 0;\n        _this.mousePressed \u003d false;\n        _this.fCanChangeCol \u003d false;\n        _this.fInPlay \u003d false;\n        _this.p1Blink \u003d 0;\n        _this.p2Blink \u003d 0;\n        _this.fP1Touched \u003d false;\n        _this.fP2Touched \u003d false;\n        _this.gameThread \u003d null;\n        _this.fEndGame \u003d false;\n        _this.startTime \u003d 0;\n        _this.gameTime \u003d 0;\n        _this.scoringRun \u003d 0;\n        _this.slimeColours \u003d [ShimmedColor.red, ShimmedColor.green, ShimmedColor.yellow, ShimmedColor.white, ShimmedColor.black];\n        _this.replayData \u003d (function (dims) { var allocate \u003d function (dims) { if (dims.length \u003d\u003d 0) {\n            return 0;\n        }\n        else {\n            var array \u003d [];\n            for (var i \u003d 0; i \u003c dims[0]; i++) {\n                array.push(allocate(dims.slice(1)));\n            }\n            return array;\n        } }; return allocate(dims); })([200, 8]);\n        return _this;\n    }\n    Slime2P.prototype.handleEvent \u003d function (event) {\n        switch ((event.id)) {\n            case 401:\n            case 403:\n                if (!this.fEndGame) {\n                    switch ((event.key)) {\n                        case 9:\n                        case 81:\n                        case 113:\n                            this.slimerSpecial(1);\n                            break;\n                        case 10:\n                        case 72:\n                        case 104:\n                            this.slimerSpecial(2);\n                            break;\n                        case 65:\n                        case 97:\n                            this.p1XV \u003d this.scoringRun \u003c\u003d -2 ? -16 : -8;\n                            break;\n                        case 68:\n                        case 100:\n                            this.p1XV \u003d this.scoringRun \u003c\u003d -2 ? 16 : 8;\n                            break;\n                        case 73:\n                        case 105:\n                        case 1004:\n                            if (this.p2Y \u003d\u003d\u003d 0) {\n                                this.p2YV \u003d this.scoringRun \u003e\u003d 2 ? 45 : 31;\n                            }\n                            break;\n                        case 74:\n                        case 106:\n                        case 1006:\n                            this.p2XV \u003d this.scoringRun \u003e\u003d 2 ? -16 : -8;\n                            break;\n                        case 75:\n                        case 107:\n                        case 1005:\n                            if (this.fCanChangeCol) {\n                                this.p2Pow \u003d this.p2Pow !\u003d\u003d 5 ? this.p2Pow + 1 : 1;\n                                switch ((this.p2Pow)) {\n                                    case 1:\n                                        this.p2PowReq \u003d 10;\n                                        break;\n                                    case 2:\n                                        this.p2PowReq \u003d 35;\n                                        break;\n                                    case 3:\n                                        this.p2PowReq \u003d 15;\n                                        break;\n                                    case 4:\n                                        this.p2PowReq \u003d 5;\n                                        break;\n                                    case 5:\n                                        this.p2PowReq \u003d 5;\n                                }\n                                this.drawScores();\n                                this.drawEnergyBars();\n                                break;\n                            }\n                        case 32:\n                            this.mousePressed \u003d true;\n                            break;\n                        case 76:\n                        case 108:\n                        case 1007:\n                            this.p2XV \u003d this.scoringRun \u003e\u003d 2 ? 16 : 8;\n                            break;\n                        case 83:\n                        case 115:\n                            this.p1Pow \u003d this.p1Pow !\u003d\u003d 5 ? this.p1Pow + 1 : 1;\n                            switch ((this.p1Pow)) {\n                                case 1:\n                                    this.p1PowReq \u003d 10;\n                                    break;\n                                case 2:\n                                    this.p1PowReq \u003d 35;\n                                    break;\n                                case 3:\n                                    this.p1PowReq \u003d 15;\n                                    break;\n                                case 4:\n                                    this.p1PowReq \u003d 5;\n                                    break;\n                                case 5:\n                                    this.p1PowReq \u003d 5;\n                            }\n                            this.drawScores();\n                            this.drawEnergyBars();\n                            break;\n                        case 87:\n                        case 119:\n                            if (this.p1Y \u003d\u003d\u003d 0) {\n                                this.p1YV \u003d this.scoringRun \u003c\u003d -2 ? 45 : 31;\n                            }\n                    }\n                }\n                break;\n            case 402:\n            case 404:\n                switch ((event.key)) {\n                    case 65:\n                    case 97:\n                        if (this.p1XV \u003c 0) {\n                            this.p1XV \u003d 0;\n                        }\n                        return false;\n                    case 68:\n                    case 100:\n                        if (this.p1XV \u003e 0) {\n                            this.p1XV \u003d 0;\n                        }\n                        return false;\n                    case 74:\n                    case 106:\n                    case 1006:\n                        if (this.p2XV \u003c 0) {\n                            this.p2XV \u003d 0;\n                        }\n                        return false;\n                    case 76:\n                    case 108:\n                    case 1007:\n                        if (this.p2XV \u003e 0) {\n                            this.p2XV \u003d 0;\n                        }\n                        return false;\n                    default:\n                        return false;\n                }\n            case 501:\n                this.mousePressed \u003d true;\n                if (!this.fInPlay) {\n                    this.fEndGame \u003d false;\n                    this.fInPlay \u003d true;\n                    this.nScore \u003d 5;\n                    this.nPointsScored \u003d 0;\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d 200;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.promptMsg \u003d \"\";\n                    this.repaint();\n                    this.gameThread \u003d new ShimmedThread(this);\n                    this.gameThread.start();\n                }\n                break;\n            case 503:\n                this.showStatus(\"Slime Volleyball 2-Player, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid\");\n        }\n        return false;\n    };\n    /*private*/ Slime2P.prototype.DrawSlimers \u003d function () {\n        var k1 \u003d (this.nWidth / 10 | 0);\n        var j2 \u003d (this.nHeight / 10 | 0);\n        var i3 \u003d (this.nWidth / 50 | 0);\n        var j3 \u003d (this.nHeight / 25 | 0);\n        var k3 \u003d (this.ballX * this.nWidth / 1000 | 0);\n        var l3 \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        var i \u003d (this.p1OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        var l \u003d (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.bgColor);\n        this.screen.fillRect(i, l, k1, j2);\n        i \u003d (this.p2OldX * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.bgColor);\n        this.screen.fillRect(i, l, k1, j2);\n        this.MoveBall();\n        i \u003d (this.p1X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.scoringRun \u003c\u003d -2 ? this.slimeColours[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimeColours.length] : ShimmedColor.blue);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        var l4 \u003d this.p1X + 38;\n        var i5 \u003d this.p1Y - 60;\n        i \u003d (l4 * this.nWidth / 1000 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);\n        var i4 \u003d i - k3;\n        var j4 \u003d l - l3;\n        var k4 \u003d (Math.sqrt((i4 * i4 + j4 * j4)) | 0);\n        var flag \u003d Math.random() \u003c 0.01;\n        if (flag) {\n            this.p1Blink \u003d 5;\n        }\n        if (this.p1Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if (k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));\n            }\n        }\n        else {\n            --this.p1Blink;\n        }\n        i \u003d (this.p2X * this.nWidth / 1000 | 0) - (k1 / 2 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.scoringRun \u003e\u003d 2 ? this.slimeColours[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimeColours.length] : ShimmedColor.green);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        l4 \u003d this.p2X - 18;\n        i5 \u003d this.p2Y - 60;\n        i \u003d (l4 * this.nWidth / 1000 | 0);\n        l \u003d (7 * this.nHeight / 10 | 0) - (i5 * this.nHeight / 1000 | 0);\n        i4 \u003d i - k3;\n        j4 \u003d l - l3;\n        k4 \u003d (Math.sqrt((i4 * i4 + j4 * j4)) | 0);\n        flag \u003d Math.random() \u003c 0.01;\n        if (flag) {\n            this.p2Blink \u003d 5;\n        }\n        if (this.p2Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(flag ? ShimmedColor.gray : ShimmedColor.white);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if (k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4 | 0) - (3 * i3 / 4 | 0), l - (4 * j4 / k4 | 0) - (3 * j3 / 4 | 0), (i3 / 2 | 0), (j3 / 2 | 0));\n            }\n        }\n        else {\n            --this.p2Blink;\n        }\n        var i2;\n        var l2;\n        var k;\n        var j1;\n        var k5;\n        if (this.nScore \u003e 8) {\n            i2 \u003d (this.p1X * this.nWidth / 1000 | 0);\n            l2 \u003d (7 * this.nHeight / 10 | 0) - ((this.p1Y - 40) * this.nHeight / 1000 | 0);\n            k \u003d (this.nWidth / 20 | 0);\n            j1 \u003d (this.nHeight / 20 | 0);\n            k5 \u003d 0;\n            do {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);\n                ++k5;\n            } while ((k5 \u003c 3));\n        }\n        else {\n            if (this.nScore \u003c 2) {\n                i2 \u003d (this.nWidth / 20 | 0);\n                l2 \u003d (this.nHeight / 20 | 0);\n                k \u003d (this.p2X * this.nWidth / 1000 | 0) - i2;\n                j1 \u003d (7 * this.nHeight / 10 | 0) - ((this.p2Y - 40) * this.nHeight / 1000 | 0);\n                k5 \u003d 0;\n                do {\n                    this.screen.setColor(ShimmedColor.black);\n                    this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);\n                    ++k5;\n                } while ((k5 \u003c 3));\n            }\n        }\n    };\n    Slime2P.prototype.paint \u003d function (g) {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        g.setColor(this.bgColor);\n        g.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));\n        g.setColor(ShimmedColor.darkGray);\n        g.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));\n        g.setColor(ShimmedColor.white);\n        g.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);\n        this.drawScores();\n        this.drawPrompt();\n        this.drawEnergyBars();\n        if (!this.fInPlay) {\n            var fm \u003d this.screen.getFontMetrics();\n            g.setFont(new ShimmedFont(\"Arial\", 1, 150));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(20, 20, 40));\n            g.drawString(\"2\", (this.nWidth / 2 | 0) - (fm.stringWidth(\"2\") / 2 | 0), (this.nHeight / 2 | 0) + 20);\n            g.setFont(new ShimmedFont(\"Courier\", 0, 18));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(255, 255, 255));\n            g.drawString(\"Slime Volleyball\", (this.nWidth / 2 | 0) - (fm.stringWidth(\"Slime Volleyball\") / 2 | 0), (this.nHeight / 2 | 0));\n            g.setFont(new ShimmedFont(\"Courier\", 3, 12));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(255, 255, 100));\n            g.drawString(\"POWER SLIME - beta\", (this.nWidth / 2 | 0) - (fm.stringWidth(\"POWER SLIME - beta\") / 2 | 0), (this.nHeight / 2 | 0) + 15);\n            g.setFont(new ShimmedFont(\"Arial\", 0, 11));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(255, 255, 255));\n            fm \u003d g.getFontMetrics();\n            g.drawString(\"Written by Quin Pendragon\", (this.nWidth / 2 | 0) - (fm.stringWidth(\"Written by Quin Pendragon\") / 2 | 0), (this.nHeight / 2 | 0) + fm.getHeight() * 2 + 20);\n            g.drawString(\"Mod by Tim Lightfoot\", (this.nWidth / 2 | 0) - (fm.stringWidth(\"Mod by Tim Lightfoot\") / 2 | 0), (this.nHeight / 2 | 0) + fm.getHeight() * 2 + 35);\n        }\n    };\n    Slime2P.prototype.destroy \u003d function () {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    };\n    /*private*/ Slime2P.prototype.ReplayFrame \u003d function (i, j, k, l, i1, flag) {\n        if (flag) {\n            this.ballX \u003d this.ballOldX \u003d -50000000;\n            this.ballY \u003d this.ballOldY \u003d 100000;\n            this.p1OldX \u003d this.p1OldY \u003d this.p2OldX \u003d this.p2OldY \u003d -10000;\n        }\n        else {\n            var _ex \u003d i !\u003d\u003d 0 ? i - 1 : 199;\n            this.p1OldX \u003d this.replayData[_ex][0];\n            this.p1OldY \u003d this.replayData[_ex][1];\n            this.p2OldX \u003d this.replayData[_ex][2];\n            this.p2OldY \u003d this.replayData[_ex][3];\n            this.ballOldX \u003d this.replayData[_ex][4];\n            this.ballOldY \u003d this.replayData[_ex][5];\n        }\n        this.p1X \u003d this.replayData[i][0];\n        this.p1Y \u003d this.replayData[i][1];\n        this.p2X \u003d this.replayData[i][2];\n        this.p2Y \u003d this.replayData[i][3];\n        this.ballX \u003d this.replayData[i][4];\n        this.ballY \u003d this.replayData[i][5];\n        this.p1Col \u003d this.replayData[i][6];\n        this.p2Col \u003d this.replayData[i][7];\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 1;\n        if ((i / 10 | 0) % 2 \u003e 0) {\n            this.screen.setColor(ShimmedColor.red);\n            this.screen.drawString(\"Replay...\", j, k);\n        }\n        else {\n            this.screen.setColor(this.bgColor);\n            this.screen.fillRect(j, k - i1, l, i1 * 2);\n        }\n        this.DrawSlimers();\n        try {\n            ShimmedThread.sleep$long(20);\n        }\n        catch (var8) {\n        }\n        ;\n    };\n    /*private*/ Slime2P.prototype.MakeTime \u003d function (l) {\n        var l1 \u003d Math.floor(l / 10) % 100;\n        var l2 \u003d Math.floor(l / 1000) % 60;\n        var l3 \u003d Math.floor(l / 60000) % 60;\n        var l4 \u003d Math.floor(l / 3600000);\n        var s \u003d \"\";\n        if (l4 \u003c 10) {\n            s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l4).toString()).toString());\n        s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(\":\");\n        if (l3 \u003c 10) {\n            s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l3).toString()).toString());\n        s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(\":\");\n        if (l2 \u003c 10) {\n            s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l2).toString()).toString());\n        s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(\":\");\n        if (l1 \u003c 10) {\n            s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d new String(/* valueOf */ new String(s).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(l1).toString()).toString());\n        return s;\n    };\n    /*private*/ Slime2P.prototype.MoveSlimers \u003d function () {\n        this.p1X +\u003d this.p1XV;\n        if (this.p1X \u003c 50) {\n            this.p1X \u003d 50;\n        }\n        if (this.p1X \u003e 445) {\n            this.p1X \u003d 445;\n        }\n        if (this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d this.scoringRun \u003c\u003d -2 ? 4 : 2;\n            if (this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        this.p2X +\u003d this.p2XV;\n        if (this.p2X \u003e 950) {\n            this.p2X \u003d 950;\n        }\n        if (this.p2X \u003c 555) {\n            this.p2X \u003d 555;\n        }\n        if (this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d this.scoringRun \u003e\u003d 2 ? 4 : 2;\n            if (this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n    };\n    /*private*/ Slime2P.prototype.MoveBall \u003d function () {\n        var k \u003d (30 * this.nHeight / 1000 | 0);\n        var i \u003d (this.ballOldX * this.nWidth / 1000 | 0);\n        var j \u003d (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.bgColor);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        if (this.fBouncyRoof) {\n        }\n        if (!this.fEndGame) {\n            var l1 \u003d (this.ballX - this.p1X) * 2;\n            var i2 \u003d this.ballY - this.p1Y;\n            var j2 \u003d l1 * l1 + i2 * i2;\n            var k2 \u003d this.ballVX - this.p1XV;\n            var l2 \u003d this.ballVY - this.p1YV;\n            var i1 \u003d void 0;\n            var k1 \u003d void 0;\n            if (i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (Math.sqrt(j2) | 0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1 | 0);\n                this.ballX \u003d this.p1X + (l1 * 63 / i1 | 0);\n                this.ballY \u003d this.p1Y + (i2 * 125 / i1 | 0);\n                if (k1 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p1XV - (2 * l1 * k1 / i1 | 0);\n                    if (this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if (this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p1YV - (2 * i2 * k1 / i1 | 0);\n                    if (this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if (this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP1Touched \u003d true;\n            }\n            l1 \u003d (this.ballX - this.p2X) * 2;\n            i2 \u003d this.ballY - this.p2Y;\n            j2 \u003d l1 * l1 + i2 * i2;\n            k2 \u003d this.ballVX - this.p2XV;\n            l2 \u003d this.ballVY - this.p2YV;\n            if (i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (Math.sqrt(j2) | 0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1 | 0);\n                this.ballX \u003d this.p2X + (l1 * 63 / i1 | 0);\n                this.ballY \u003d this.p2Y + (i2 * 125 / i1 | 0);\n                if (k1 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p2XV - (2 * l1 * k1 / i1 | 0);\n                    if (this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if (this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p2YV - (2 * i2 * k1 / i1 | 0);\n                    if (this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if (this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP2Touched \u003d true;\n            }\n            if (this.ballX \u003c 15) {\n                this.ballX \u003d 15;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if (this.ballX \u003e 985) {\n                this.ballX \u003d 985;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if (this.ballX \u003e 480 \u0026\u0026 this.ballX \u003c 520 \u0026\u0026 this.ballY \u003c 140) {\n                if (this.ballVY \u003c 0 \u0026\u0026 this.ballY \u003e 130) {\n                    this.ballVY *\u003d -1;\n                    this.ballY \u003d 130;\n                }\n                else if (this.ballX \u003c 500) {\n                    this.ballX \u003d 480;\n                    this.ballVX \u003d this.ballVX \u003e\u003d 0 ? -this.ballVX : this.ballVX;\n                }\n                else {\n                    this.ballX \u003d 520;\n                    this.ballVX \u003d this.ballVX \u003c\u003d 0 ? -this.ballVX : this.ballVX;\n                }\n            }\n        }\n        i \u003d (this.ballX * this.nWidth / 1000 | 0);\n        j \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        this.screen.setColor(ShimmedColor.yellow);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n    };\n    /*private*/ Slime2P.prototype.DrawStatus \u003d function () {\n        var g \u003d this.screen;\n        var i \u003d (this.nHeight / 20 | 0);\n        g.setColor(this.bgColor);\n        var fontmetrics \u003d this.screen.getFontMetrics();\n        var j \u003d (this.nWidth / 2 | 0) + ((this.nScore - 5) * this.nWidth / 24 | 0);\n        var s \u003d new String(/* valueOf */ new String((new ShimmedStringBuffer(\"Points: \")).append(this.nPointsScored).append(\"   Elapsed: \").append(this.MakeTime(this.gameTime))).toString()).toString();\n        var k \u003d fontmetrics.stringWidth(s);\n        g.fillRect(j - (k / 2 | 0) - 5, 0, k + 10, i + 22);\n        g.setColor(ShimmedColor.white);\n        this.screen.drawString(s, j - (k / 2 | 0), fontmetrics.getAscent() + 20);\n    };\n    Slime2P.prototype.drawPrompt$ \u003d function () {\n        this.screen.setColor(ShimmedColor.darkGray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    };\n    Slime2P.prototype.drawPrompt$java_lang_String$int \u003d function (s, i) {\n        var fontmetrics \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.lightGray);\n        this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + fontmetrics.getHeight() * (i + 1) + 10);\n    };\n    Slime2P.prototype.drawPrompt \u003d function (s, i) {\n        if (((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null) \u0026\u0026 ((typeof i \u003d\u003d\u003d \u0027number\u0027) || i \u003d\u003d\u003d null)) {\n            return this.drawPrompt$java_lang_String$int(s, i);\n        }\n        else if (s \u003d\u003d\u003d undefined \u0026\u0026 i \u003d\u003d\u003d undefined) {\n            return this.drawPrompt$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    /*private*/ Slime2P.prototype.SaveReplayData \u003d function () {\n        this.replayData[this.replayPos][0] \u003d this.p1X;\n        this.replayData[this.replayPos][1] \u003d this.p1Y;\n        this.replayData[this.replayPos][2] \u003d this.p2X;\n        this.replayData[this.replayPos][3] \u003d this.p2Y;\n        this.replayData[this.replayPos][4] \u003d this.ballX;\n        this.replayData[this.replayPos][5] \u003d this.ballY;\n        this.replayData[this.replayPos][6] \u003d this.p1Col;\n        this.replayData[this.replayPos][7] \u003d this.p2Col;\n        ++this.replayPos;\n        if (this.replayPos \u003e\u003d 200) {\n            this.replayPos \u003d 0;\n        }\n        if (this.replayStart \u003d\u003d\u003d this.replayPos) {\n            ++this.replayStart;\n        }\n        if (this.replayStart \u003e\u003d 200) {\n            this.replayStart \u003d 0;\n        }\n    };\n    /*private*/ Slime2P.prototype.drawScores \u003d function () {\n        var g \u003d this.screen;\n        var k \u003d (this.nHeight / 20 | 0);\n        var i1;\n        var j;\n        for (i1 \u003d 0; i1 \u003c this.nScore; ++i1) {\n            j \u003d ((i1 + 1) * this.nWidth / 24 | 0);\n            g.setColor(ShimmedColor.blue);\n            g.fillOval(j, 20, k, k);\n            g.setColor(ShimmedColor.white);\n            g.drawOval(j, 20, k, k);\n        }\n        ;\n        g.setColor(this.bgColor);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */ new String(/* valueOf */ new String(this.p1PowString).toString()).toString()), 20, 60);\n        switch ((this.p1Pow)) {\n            case 1:\n                this.p1PowString \u003d \"Super Hop\";\n                break;\n            case 2:\n                this.p1PowString \u003d \"Stun Ball\";\n                break;\n            case 3:\n                this.p1PowString \u003d \"Invert Ball\";\n                break;\n            case 4:\n                this.p1PowString \u003d \"Telekenetic Attract\";\n                break;\n            case 5:\n                this.p1PowString \u003d \"Telekenetic Repel\";\n        }\n        g.setColor(ShimmedColor.white);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */ new String(/* valueOf */ new String(this.p1PowString).toString()).toString()), 20, 60);\n        for (i1 \u003d 0; i1 \u003c 10 - this.nScore; ++i1) {\n            j \u003d this.nWidth - ((i1 + 1) * this.nWidth / 24 | 0) - k;\n            g.setColor(ShimmedColor.green);\n            g.fillOval(j, 20, k, k);\n            g.setColor(ShimmedColor.white);\n            g.drawOval(j, 20, k, k);\n        }\n        ;\n        g.setColor(this.bgColor);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */ new String(/* valueOf */ new String(this.p2PowString).toString()).toString()), this.nWidth - 200, 60);\n        switch ((this.p2Pow)) {\n            case 1:\n                this.p2PowString \u003d \"Super Hop\";\n                break;\n            case 2:\n                this.p2PowString \u003d \"Stun Ball\";\n                break;\n            case 3:\n                this.p2PowString \u003d \"Invert Ball\";\n                break;\n            case 4:\n                this.p2PowString \u003d \"Telekenetic Attract\";\n                break;\n            case 5:\n                this.p2PowString \u003d \"Telekenetic Repel\";\n        }\n        g.setColor(ShimmedColor.white);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */ new String(/* valueOf */ new String(this.p2PowString).toString()).toString()), this.nWidth - 200, 60);\n    };\n    Slime2P.prototype.run \u003d function () {\n        this.replayPos \u003d this.replayStart \u003d 0;\n        this.p1Col \u003d 0;\n        this.p2Col \u003d 1;\n        this.scoringRun \u003d 0;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.nPointsScored \u003d 0;\n        this.startTime \u003d ShimmedSystem.currentTimeMillis();\n        while ((this.nScore !\u003d\u003d 0 \u0026\u0026 this.nScore !\u003d\u003d 10 \u0026\u0026 this.gameThread !\u003d null)) {\n            this.gameTime \u003d ShimmedSystem.currentTimeMillis() - this.startTime;\n            this.SaveReplayData();\n            this.p1OldX \u003d this.p1X;\n            this.p1OldY \u003d this.p1Y;\n            this.p2OldX \u003d this.p2X;\n            this.p2OldY \u003d this.p2Y;\n            this.ballOldX \u003d this.ballX;\n            this.ballOldY \u003d this.ballY;\n            this.MoveSlimers();\n            this.DrawSlimers();\n            this.DrawStatus();\n            this.recoverSlimerEnergy();\n            this.drawEnergyBars();\n            this.drawScores();\n            if (this.ballY \u003c 35) {\n                var l \u003d ShimmedSystem.currentTimeMillis();\n                ++this.nPointsScored;\n                this.nScore +\u003d this.ballX \u003c\u003d 500 ? -1 : 1;\n                if (this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                    ++this.scoringRun;\n                }\n                else if (this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                    --this.scoringRun;\n                }\n                else if (this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                    this.scoringRun \u003d 1;\n                }\n                else if (this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                    this.scoringRun \u003d -1;\n                }\n                this.promptMsg \u003d this.ballX \u003c\u003d 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];\n                if (!this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                    this.promptMsg \u003d \"It\\\u0027s official, you suck!\";\n                }\n                else if ((this.scoringRun \u003c 0 ? -this.scoringRun : this.scoringRun) \u003d\u003d\u003d 2) {\n                    this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"is on fire!\");\n                }\n                else if (this.ballX \u003e 500 \u0026\u0026 this.fP1Touched \u0026\u0026 !this.fP2Touched || this.ballX \u003c\u003d 500 \u0026\u0026 !this.fP1Touched \u0026\u0026 this.fP2Touched) {\n                    this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"aces the serve!\");\n                }\n                else if (this.ballX \u003e 500 \u0026\u0026 !this.fP1Touched \u0026\u0026 this.fP2Touched || this.ballX \u003c\u003d 500 \u0026\u0026 this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                    this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"watches you make a tool of yourself!\");\n                }\n                else {\n                    switch ((this.nScore)) {\n                        case 0:\n                        case 10:\n                            if (this.nPointsScored \u003d\u003d\u003d 5) {\n                                this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"Wins with a QUICK FIVE!!!\");\n                            }\n                            else if (this.scoringRun \u003d\u003d\u003d 8) {\n                                this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"Wins with a BIG NINE!!!\");\n                            }\n                            else {\n                                this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"Wins!!!\");\n                            }\n                            break;\n                        case 1:\n                        case 2:\n                        case 3:\n                        case 7:\n                        case 8:\n                        case 9:\n                        default:\n                            this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"Scores!\");\n                            break;\n                        case 4:\n                            this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(this.ballX \u003e\u003d 500 ? \"Scores!\" : \"takes the lead!!\").toString()).toString());\n                            break;\n                        case 5:\n                            this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(\"Equalizes!\");\n                            break;\n                        case 6:\n                            this.promptMsg \u003d new String(/* valueOf */ new String(this.promptMsg).toString()).toString().concat(/* valueOf */ new String(/* valueOf */ new String(this.ballX \u003c\u003d 500 ? \"Scores!\" : \"takes the lead!!\").toString()).toString());\n                    }\n                }\n                this.fCanChangeCol \u003d false;\n                var flag \u003d this.nScore !\u003d\u003d 0 \u0026\u0026 this.nScore !\u003d\u003d 10;\n                var i \u003d this.ballX;\n                this.drawPrompt();\n                if (flag) {\n                    this.drawPrompt$java_lang_String$int(\"Click mouse or Hit space for replay...\", 1);\n                    this.mousePressed \u003d false;\n                    if (this.gameThread !\u003d null) {\n                        try {\n                            ShimmedThread.sleep$long(2500);\n                        }\n                        catch (var8) {\n                        }\n                        ;\n                    }\n                    if (this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                }\n                else if (this.gameThread !\u003d null) {\n                    try {\n                        ShimmedThread.sleep$long(2500);\n                    }\n                    catch (var7) {\n                    }\n                    ;\n                }\n                this.promptMsg \u003d \"\";\n                this.drawPrompt();\n                this.fCanChangeCol \u003d true;\n                if (flag) {\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d i \u003e\u003d 500 ? 200 : 800;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.fP1Touched \u003d this.fP2Touched \u003d false;\n                    this.repaint();\n                }\n                this.startTime +\u003d ShimmedSystem.currentTimeMillis() - l;\n            }\n            if (this.gameThread !\u003d null) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                }\n                catch (var6) {\n                }\n                ;\n            }\n        }\n        ;\n        this.fEndGame \u003d true;\n        this.SaveReplayData();\n        this.DoReplay();\n        this.fInPlay \u003d false;\n        this.promptMsg \u003d \"Click the mouse to play...\";\n        this.repaint();\n    };\n    Slime2P.prototype.init \u003d function () {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.nScore \u003d 5;\n        this.fInPlay \u003d this.fEndGame \u003d false;\n        this.fCanChangeCol \u003d true;\n        this.promptMsg \u003d \"Click the mouse to play...\";\n        this.screen \u003d this.getGraphics();\n    };\n    /*private*/ Slime2P.prototype.DoReplay \u003d function () {\n        var fontmetrics \u003d this.screen.getFontMetrics();\n        var i \u003d fontmetrics.stringWidth(\"Replay...\");\n        var j \u003d fontmetrics.getHeight();\n        var k \u003d (this.nWidth / 2 | 0) - (i / 2 | 0);\n        var l \u003d (this.nHeight / 2 | 0) - j;\n        this.promptMsg \u003d \"Click mouse or hit space to continue...\";\n        this.mousePressed \u003d false;\n        for (var i1 \u003d this.replayPos - 1; !this.mousePressed; this.ReplayFrame(i1, k, l, i, j, false)) {\n            ++i1;\n            if (i1 \u003e\u003d 200) {\n                i1 \u003d 0;\n            }\n            if (i1 \u003d\u003d\u003d this.replayPos) {\n                try {\n                    ShimmedThread.sleep$long(1000);\n                }\n                catch (var8) {\n                }\n                ;\n                i1 \u003d this.replayStart;\n                this.paint(this.getGraphics());\n            }\n        }\n        ;\n        this.promptMsg \u003d \"\";\n        this.paint(this.getGraphics());\n    };\n    /*private*/ Slime2P.prototype.DoFatality \u003d function () {\n    };\n    /*private*/ Slime2P.prototype.slimerSpecial \u003d function (playerNum) {\n        if (this.fP1Touched \u0026\u0026 this.fP2Touched) {\n            var dx \u003d void 0;\n            var dy \u003d void 0;\n            switch ((playerNum)) {\n                case 1:\n                    if (this.scoringRun \u003e -2) {\n                        this.p1Energy -\u003d this.p1PowReq;\n                    }\n                    switch ((this.p1Pow)) {\n                        case 1:\n                            if (this.p1Energy \u003e this.p1PowReq) {\n                                this.promptMsg \u003d \"Slimer 1 Hops the ball!\";\n                                this.drawPrompt();\n                                this.ballVY +\u003d 20;\n                                this.drawEnergyBars();\n                            }\n                            return;\n                        case 2:\n                            if (this.p1Energy \u003e this.p1PowReq) {\n                                this.promptMsg \u003d \"Slimer 1 stuns the ball!\";\n                                this.drawPrompt();\n                                this.ballVX \u003d 0;\n                                this.ballVY \u003d 0;\n                                this.drawEnergyBars();\n                            }\n                            return;\n                        case 3:\n                            if (this.p1Energy \u003e this.p1PowReq) {\n                                this.promptMsg \u003d \"Slimer 1 Inverts the ball!\";\n                                this.drawPrompt();\n                                this.ballVX *\u003d -1;\n                                this.ballVY *\u003d -1;\n                                this.drawEnergyBars();\n                            }\n                            return;\n                        case 4:\n                            this.promptMsg \u003d \"Slimer 1 uses telekenetic attract!\";\n                            this.drawPrompt();\n                            if (this.p1Energy \u003e this.p1PowReq) {\n                                dx \u003d (this.ballX - this.p1X);\n                                dy \u003d (this.ballY - this.p1Y);\n                                if (Math.abs(dx) \u003e Math.abs(dy)) {\n                                    dy /\u003d dx;\n                                    dx /\u003d Math.abs(dx);\n                                }\n                                else {\n                                    dx /\u003d dy;\n                                    dy /\u003d Math.abs(dy);\n                                }\n                                this.ballVX \u003d ((this.ballVX - 8 * dx) | 0);\n                                this.ballVY \u003d ((this.ballVY - 8 * dy) | 0);\n                                this.drawEnergyBars();\n                            }\n                            return;\n                        case 5:\n                            if (this.p1Energy \u003e this.p1PowReq) {\n                                this.promptMsg \u003d \"Slimer 1 uses telekenetic repel!\";\n                                this.drawPrompt();\n                                dx \u003d (this.ballX - this.p1X);\n                                dy \u003d (this.ballY - this.p1Y);\n                                if (Math.abs(dx) \u003e Math.abs(dy)) {\n                                    dy /\u003d dx;\n                                    dx /\u003d Math.abs(dx);\n                                }\n                                else {\n                                    dx /\u003d dy;\n                                    dy /\u003d Math.abs(dy);\n                                }\n                                this.ballVX \u003d ((this.ballVX + 10 * dx) | 0);\n                                this.ballVY \u003d ((this.ballVY + 10 * dy) | 0);\n                                this.drawEnergyBars();\n                            }\n                            return;\n                        default:\n                            return;\n                    }\n                case 2:\n                    if (this.scoringRun \u003c 2) {\n                        this.p2Energy -\u003d this.p2PowReq;\n                    }\n                    switch ((this.p2Pow)) {\n                        case 1:\n                            if (this.p2Energy \u003e this.p2PowReq) {\n                                this.promptMsg \u003d \"Slimer 2 Hops the ball!\";\n                                this.drawPrompt();\n                                this.ballVY +\u003d 20;\n                                this.drawEnergyBars();\n                            }\n                            break;\n                        case 2:\n                            if (this.p2Energy \u003e this.p2PowReq) {\n                                this.promptMsg \u003d \"Slimer 2 stuns the ball!\";\n                                this.drawPrompt();\n                                this.ballVX \u003d 0;\n                                this.ballVY \u003d 0;\n                                this.drawEnergyBars();\n                            }\n                            break;\n                        case 3:\n                            if (this.p2Energy \u003e this.p2PowReq) {\n                                this.promptMsg \u003d \"Slimer 2 Inverts the ball!\";\n                                this.drawPrompt();\n                                this.ballVX *\u003d -1;\n                                this.ballVY *\u003d -1;\n                                this.drawEnergyBars();\n                            }\n                            break;\n                        case 4:\n                            this.promptMsg \u003d \"Slimer 2 uses telekenetic attract!\";\n                            this.drawPrompt();\n                            if (this.p2Energy \u003e this.p2PowReq) {\n                                dx \u003d (this.ballX - this.p2X);\n                                dy \u003d (this.ballY - this.p2Y);\n                                if (Math.abs(dx) \u003e Math.abs(dy)) {\n                                    dy /\u003d dx;\n                                    dx /\u003d Math.abs(dx);\n                                }\n                                else {\n                                    dx /\u003d dy;\n                                    dy /\u003d Math.abs(dy);\n                                }\n                                this.ballVX \u003d ((this.ballVX - 8 * dx) | 0);\n                                this.ballVY \u003d ((this.ballVY - 8 * dy) | 0);\n                                this.drawEnergyBars();\n                            }\n                            break;\n                        case 5:\n                            if (this.p2Energy \u003e this.p2PowReq) {\n                                this.promptMsg \u003d \"Slimer 2 uses telekenetic repel!\";\n                                this.drawPrompt();\n                                dx \u003d (this.ballX - this.p2X);\n                                dy \u003d (this.ballY - this.p2Y);\n                                if (Math.abs(dx) \u003e Math.abs(dy)) {\n                                    dy /\u003d dx;\n                                    dx /\u003d Math.abs(dx);\n                                }\n                                else {\n                                    dx /\u003d dy;\n                                    dy /\u003d Math.abs(dy);\n                                }\n                                this.ballVX \u003d ((this.ballVX + 10 * dx) | 0);\n                                this.ballVY \u003d ((this.ballVY + 10 * dy) | 0);\n                                this.drawEnergyBars();\n                            }\n                    }\n            }\n        }\n        else {\n            this.promptMsg \u003d \"Sorry, No more cheap points!\";\n            this.drawPrompt();\n        }\n    };\n    /*private*/ Slime2P.prototype.recoverSlimerEnergy \u003d function () {\n        if (this.p1Energy \u003c 100) {\n            this.p1Energy \u003d (this.p1Energy + 0.22);\n        }\n        if (this.p2Energy \u003c 100) {\n            this.p2Energy \u003d (this.p2Energy + 0.22);\n        }\n    };\n    /*private*/ Slime2P.prototype.drawEnergyBars \u003d function () {\n        this.screen.setColor(ShimmedColor.darkGray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 30, this.nWidth, 15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.drawRect(10, (4 * this.nHeight / 5 | 0) + 30, (this.nWidth / 2 | 0) - 20, 15);\n        this.screen.drawRect(10 + (this.nWidth / 2 | 0), (4 * this.nHeight / 5 | 0) + 30, (this.nWidth / 2 | 0) - 20, 15);\n        this.screen.setColor(new ShimmedColor(50, 50, 255));\n        this.screen.fillRect(11, (4 * this.nHeight / 5 | 0) + 31, (((((this.nWidth / 2 | 0) - 22) * this.p1Energy) | 0) / 100 | 0), 14);\n        this.screen.setColor(new ShimmedColor(30, 30, 30));\n        this.screen.drawRect(10, (4 * this.nHeight / 5 | 0) + 30, (((this.nWidth / 2 | 0) - 20) * this.p1PowReq / 100 | 0), 15);\n        this.screen.setColor(new ShimmedColor(50, 255, 50));\n        this.screen.fillRect(11 + (this.nWidth / 2 | 0), (4 * this.nHeight / 5 | 0) + 31, (((((this.nWidth / 2 | 0) - 22) * this.p2Energy) | 0) / 100 | 0), 14);\n        this.screen.setColor(new ShimmedColor(30, 30, 30));\n        this.screen.drawRect(10 + (this.nWidth / 2 | 0), (4 * this.nHeight / 5 | 0) + 30, (((this.nWidth / 2 | 0) - 20) * this.p2PowReq / 100 | 0), 15);\n    };\n    return Slime2P;\n}(ShimmedApplet));\nSlime2P[\"__class\"] \u003d \"Slime2P\";\nSlime2P[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\nvar ShimmedBufferedImage \u003d (function (_super) {\n    __extends(ShimmedBufferedImage, _super);\n    function ShimmedBufferedImage(x, y, z) {\n        return _super.call(this) || this;\n    }\n    ShimmedBufferedImage.prototype.getSubimage \u003d function (a, b, c, d) {\n        return null;\n    };\n    return ShimmedBufferedImage;\n}(ShimmedImage));\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\nvar ShimmedFrame \u003d (function (_super) {\n    __extends(ShimmedFrame, _super);\n    function ShimmedFrame() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    ShimmedFrame.prototype.setTitle \u003d function (s) {\n    };\n    ShimmedFrame.prototype.pack \u003d function () {\n    };\n    ShimmedFrame.prototype.show \u003d function () {\n    };\n    ShimmedFrame.prototype.dispose \u003d function () {\n    };\n    ShimmedFrame.prototype.setLayout \u003d function (g) {\n    };\n    return ShimmedFrame;\n}(ShimmedElement));\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\nvar ShimmedTextField \u003d (function (_super) {\n    __extends(ShimmedTextField, _super);\n    function ShimmedTextField(s) {\n        return _super.call(this) || this;\n    }\n    ShimmedTextField.prototype.getText \u003d function () {\n        return null;\n    };\n    return ShimmedTextField;\n}(ShimmedElement));\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\nvar ShimmedButton \u003d (function (_super) {\n    __extends(ShimmedButton, _super);\n    function ShimmedButton(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedButton;\n}(ShimmedElement));\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\nvar ShimmedPanel \u003d (function (_super) {\n    __extends(ShimmedPanel, _super);\n    function ShimmedPanel() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    return ShimmedPanel;\n}(ShimmedElement));\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\nvar ShimmedLabel \u003d (function (_super) {\n    __extends(ShimmedLabel, _super);\n    function ShimmedLabel(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedLabel;\n}(ShimmedElement));\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n",
  "tsout": "/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nclass ShimmedSize {\n    public width : number;\n\n    public height : number;\n\n    constructor() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n}\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\n\n\nclass ShimmedApplet {\n    public size() : ShimmedSize {\n        return null;\n    }\n\n    public createImage(x : number, y : number) : ShimmedImage {\n        return null;\n    }\n\n    public showStatus(s : string) {\n    }\n\n    public repaint() {\n    }\n\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public requestFocus() {\n    }\n\n    public getWidth() : number {\n        return 0;\n    }\n\n    public getHeight() : number {\n        return 0;\n    }\n\n    public getDocumentBase() : ShimmedDocumentBase {\n        return null;\n    }\n\n    public getAppletContext() : ShimmedAppletContext {\n        return null;\n    }\n\n    public getCodeBase() : ShimmedURL {\n        return null;\n    }\n\n    public getAudioClip(u : ShimmedURL, s : string) : ShimmedAudioClip {\n        return null;\n    }\n\n    public getImage(u : ShimmedURL, s : string) : ShimmedImage {\n        return null;\n    }\n}\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\n\n\nclass ShimmedColor {\n    public static yellow : ShimmedColor \u003d null;\n\n    public static black : ShimmedColor \u003d null;\n\n    public static red : ShimmedColor \u003d null;\n\n    public static gray : ShimmedColor \u003d null;\n\n    public static white : ShimmedColor \u003d null;\n\n    public static blue : ShimmedColor \u003d null;\n\n    public static green : ShimmedColor \u003d null;\n\n    public static pink : ShimmedColor \u003d null;\n\n    public static cyan : ShimmedColor \u003d null;\n\n    public static lightGray : ShimmedColor \u003d null;\n\n    public static darkGray : ShimmedColor \u003d null;\n\n    public static orange : ShimmedColor \u003d null;\n\n    public constructor(r : number, g : number, b : number) {\n    }\n}\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\n\n\nclass ShimmedGraphics {\n    public getFont() : ShimmedFont {\n        return null;\n    }\n\n    public setFont(f : ShimmedFont) {\n    }\n\n    public setColor(c : ShimmedColor) {\n    }\n\n    public fillRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public getFontMetrics() : ShimmedFontMetrics {\n        return null;\n    }\n\n    public drawString(s : string, x : number, y : number) {\n    }\n\n    public drawImage(i : ShimmedImage, x : number, y : number, o : any) {\n    }\n\n    public drawOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n\n    public drawLine(x : number, y : number, w : number, h : number) {\n    }\n\n    public drawRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillPolygon$int_A$int_A$int(xs : number[], ys : number[], n : number) {\n    }\n\n    public fillPolygon(xs? : any, ys? : any, n? : any) : any {\n        if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eArray \u0026\u0026 (xs.length\u003d\u003d0 || xs[0] \u003d\u003d null ||(typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof \u003cany\u003eArray \u0026\u0026 (ys.length\u003d\u003d0 || ys[0] \u003d\u003d null ||(typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.fillPolygon$int_A$int_A$int(xs, ys, n);\n        } else if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.fillPolygon$ShimmedPolygon(xs);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public fillPolygon$ShimmedPolygon(p : ShimmedPolygon) {\n    }\n\n    public drawArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n}\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\n\n\nclass ShimmedImage {\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public getHeight(a : ShimmedApplet) : number {\n        return 0;\n    }\n}\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\n\n\nclass ShimmedEvent {\n    public id : number;\n\n    public x : number;\n\n    public y : number;\n\n    public key : number;\n\n    public target : ShimmedButton;\n\n    public static KEY_ACTION : number \u003d 0;\n\n    public static LEFT : number \u003d 1;\n\n    public static RIGHT : number \u003d 2;\n\n    public static UP : number \u003d 3;\n\n    public static DOWN : number \u003d 4;\n\n    public static KEY_ACTION_RELEASE : number \u003d 5;\n\n    constructor() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n}\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\n\n\nclass ShimmedFont {\n    public getName() : string {\n        return null;\n    }\n\n    public constructor(name : string, w : number, h : number) {\n    }\n}\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\n\n\nclass ShimmedFontMetrics {\n    public getHeight() : number {\n        return 0;\n    }\n\n    public stringWidth(s : string) : number {\n        return 0;\n    }\n\n    public getAscent() : number {\n        return 0;\n    }\n}\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\n\n\nclass ShimmedThread {\n    public static sleep$long(ms : number) {\n    }\n\n    public static sleep$long$boolean(ms : number, b : boolean) {\n    }\n\n    public static sleep(ms? : any, b? : any) : any {\n        if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return \u003cany\u003eShimmedThread.sleep$long$boolean(ms, b);\n        } else if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return \u003cany\u003eShimmedThread.sleep$long(ms);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public constructor(r : ShimmedRunnable) {\n    }\n\n    public start() {\n    }\n\n    public stop() {\n    }\n}\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\n\n\ninterface ShimmedRunnable {}\n\nclass ShimmedAppletContext {\n    public showDocument$ShimmedURL(u : ShimmedURL) {\n    }\n\n    public showDocument$ShimmedURL$java_lang_String(u : ShimmedURL, s : string) {\n    }\n\n    public showDocument(u? : any, s? : any) : any {\n        if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL$java_lang_String(u, s);\n        } else if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL(u);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\n\n\nclass ShimmedDocumentBase {\n    public getHost() : string {\n        return null;\n    }\n}\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\n\n\nclass ShimmedURL {\n    public constructor(s : string) {\n    }\n\n    public openStream() : ShimmedInputStream {\n        return null;\n    }\n}\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\n\n\nclass ShimmedPrintStream {\n    public print(s : any) : any {\n        return null;\n    }\n\n    public println$() : any {\n        return null;\n    }\n\n    public println$java_lang_Object(s : any) : any {\n        return null;\n    }\n\n    public println(s? : any) : any {\n        if(((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.println$java_lang_Object(s);\n        } else if(s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.println$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\n\n\nclass ShimmedSystem {\n    public static out : ShimmedPrintStream \u003d null;\n\n    public static currentTimeMillis() : number {\n        return 0;\n    }\n}\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\n\n\nclass ShimmedVector {\n    public constructor(n : number) {\n    }\n\n    public removeAllElements() {\n    }\n\n    public get(i : number) : any {\n        return null;\n    }\n\n    public size() : number {\n        return 0;\n    }\n\n    public add(x : number[]) {\n    }\n}\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\n\n\nclass ShimmedElement {\n    public add(e : ShimmedElement) {\n    }\n}\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\n\n\nclass ShimmedPolygon {\n    public constructor(xs : number[], ys : number[], n : number) {\n    }\n}\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\n\n\nclass ShimmedInputStream {\n    public close() {\n    }\n}\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\n\n\nclass ShimmedBufferedReader {\n    public constructor(i : ShimmedInputStreamReader) {\n    }\n\n    public readLine() : string {\n        return null;\n    }\n\n    public close() {\n    }\n}\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\n\n\nclass ShimmedInputStreamReader {\n    public constructor(is : ShimmedInputStream) {\n    }\n}\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\n\n\nclass ShimmedGridLayout {\n    public constructor(x : number, y : number) {\n    }\n}\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\n\n\nclass ShimmedLong {\n    public static parseLong(s : string) : number {\n        return 0;\n    }\n}\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\n\n\nclass ShimmedChars {\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    public static charCodeArray(s : string) : string[] {\n        return null;\n    }\n}\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\n\n\nclass ShimmedImageObserver {}\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\n\n\nclass ShimmedRandom {\n    public nextInt(m : number) : number {\n        return 0;\n    }\n}\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\n\n\nclass ShimmedAudioClip {\n    public play() {\n    }\n}\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\n\n\nclass ShimmedStringBuffer {\n    public constructor(i? : any) {\n        if(((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else if(i \u003d\u003d\u003d undefined) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public append(s : any) : ShimmedStringBuffer {\n        return null;\n    }\n}\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\n\n\nclass EndOfShimDeclarations {}\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\n\n\nclass Slime2P extends ShimmedApplet implements ShimmedRunnable {\n    /*private*/ nWidth : number;\n\n    /*private*/ nHeight : number;\n\n    /*private*/ topScore : number \u003d 10;\n\n    /*private*/ nScore : number;\n\n    /*private*/ nPointsScored : number;\n\n    /*private*/ p1X : number;\n\n    /*private*/ p2X : number;\n\n    /*private*/ p1Y : number;\n\n    /*private*/ p2Y : number;\n\n    /*private*/ p1Col : number;\n\n    /*private*/ p2Col : number \u003d 1;\n\n    /*private*/ slimeColours : ShimmedColor[];\n\n    /*private*/ slimeColText : string[] \u003d [\"Super Blue Slime \", \"Power Green Slime \"];\n\n    /*private*/ p1OldX : number;\n\n    /*private*/ p2OldX : number;\n\n    /*private*/ p1OldY : number;\n\n    /*private*/ p2OldY : number;\n\n    /*private*/ p1XV : number;\n\n    /*private*/ p2XV : number;\n\n    /*private*/ p1YV : number;\n\n    /*private*/ p2YV : number;\n\n    /*private*/ ballX : number;\n\n    /*private*/ ballY : number;\n\n    /*private*/ ballVX : number;\n\n    /*private*/ ballVY : number;\n\n    /*private*/ ballOldX : number;\n\n    /*private*/ ballOldY : number;\n\n    /*private*/ screen : ShimmedGraphics;\n\n    /*private*/ promptMsg : string;\n\n    /*private*/ replayData : number[][];\n\n    /*private*/ replayPos : number;\n\n    /*private*/ replayStart : number;\n\n    /*private*/ mousePressed : boolean;\n\n    /*private*/ fCanChangeCol : boolean;\n\n    /*private*/ fInPlay : boolean;\n\n    /*private*/ p1Blink : number;\n\n    /*private*/ p2Blink : number;\n\n    /*private*/ fP1Touched : boolean;\n\n    /*private*/ fP2Touched : boolean;\n\n    /*private*/ gameThread : ShimmedThread;\n\n    /*private*/ fEndGame : boolean;\n\n    /*private*/ startTime : number;\n\n    /*private*/ gameTime : number;\n\n    /*private*/ scoringRun : number;\n\n    /*private*/ frenzyCol : number \u003d 0;\n\n    /*private*/ scoringRunForSuper : number \u003d 2;\n\n    /*private*/ pow_HOPBALL : number \u003d 1;\n\n    /*private*/ pow_KILLBALL : number \u003d 2;\n\n    /*private*/ pow_INVERTBALL : number \u003d 3;\n\n    /*private*/ pow_ATTRACTBALL : number \u003d 4;\n\n    /*private*/ pow_REPELBALL : number \u003d 5;\n\n    /*private*/ pow_HOPBALL_ENERGY : number \u003d 10;\n\n    /*private*/ pow_KILLBALL_ENERGY : number \u003d 35;\n\n    /*private*/ pow_INVERTBALL_ENERGY : number \u003d 15;\n\n    /*private*/ pow_ATTRACTBALL_ENERGY : number \u003d 5;\n\n    /*private*/ pow_REPELBALL_ENERGY : number \u003d 5;\n\n    /*private*/ p1Pow : number \u003d 1;\n\n    /*private*/ p2Pow : number \u003d 1;\n\n    /*private*/ p1PowReq : number \u003d 10;\n\n    /*private*/ p2PowReq : number \u003d 10;\n\n    /*private*/ bgColor : ShimmedColor \u003d new ShimmedColor(0, 0, 50);\n\n    /*private*/ p1Energy : number \u003d 100.0;\n\n    /*private*/ p2Energy : number \u003d 100.0;\n\n    p1PowString : string \u003d \"undefined\";\n\n    p2PowString : string \u003d \"undefined\";\n\n    fBouncyRoof : boolean \u003d true;\n\n    public handleEvent(event : ShimmedEvent) : boolean {\n        switch((event.id)) {\n        case 401:\n        case 403:\n            if(!this.fEndGame) {\n                switch((event.key)) {\n                case 9:\n                case 81:\n                case 113:\n                    this.slimerSpecial(1);\n                    break;\n                case 10:\n                case 72:\n                case 104:\n                    this.slimerSpecial(2);\n                    break;\n                case 65:\n                case 97:\n                    this.p1XV \u003d this.scoringRun \u003c\u003d -2?-16:-8;\n                    break;\n                case 68:\n                case 100:\n                    this.p1XV \u003d this.scoringRun \u003c\u003d -2?16:8;\n                    break;\n                case 73:\n                case 105:\n                case 1004:\n                    if(this.p2Y \u003d\u003d\u003d 0) {\n                        this.p2YV \u003d this.scoringRun \u003e\u003d 2?45:31;\n                    }\n                    break;\n                case 74:\n                case 106:\n                case 1006:\n                    this.p2XV \u003d this.scoringRun \u003e\u003d 2?-16:-8;\n                    break;\n                case 75:\n                case 107:\n                case 1005:\n                    if(this.fCanChangeCol) {\n                        this.p2Pow \u003d this.p2Pow !\u003d\u003d 5?this.p2Pow + 1:1;\n                        switch((this.p2Pow)) {\n                        case 1:\n                            this.p2PowReq \u003d 10;\n                            break;\n                        case 2:\n                            this.p2PowReq \u003d 35;\n                            break;\n                        case 3:\n                            this.p2PowReq \u003d 15;\n                            break;\n                        case 4:\n                            this.p2PowReq \u003d 5;\n                            break;\n                        case 5:\n                            this.p2PowReq \u003d 5;\n                        }\n                        this.drawScores();\n                        this.drawEnergyBars();\n                        break;\n                    }\n                case 32:\n                    this.mousePressed \u003d true;\n                    break;\n                case 76:\n                case 108:\n                case 1007:\n                    this.p2XV \u003d this.scoringRun \u003e\u003d 2?16:8;\n                    break;\n                case 83:\n                case 115:\n                    this.p1Pow \u003d this.p1Pow !\u003d\u003d 5?this.p1Pow + 1:1;\n                    switch((this.p1Pow)) {\n                    case 1:\n                        this.p1PowReq \u003d 10;\n                        break;\n                    case 2:\n                        this.p1PowReq \u003d 35;\n                        break;\n                    case 3:\n                        this.p1PowReq \u003d 15;\n                        break;\n                    case 4:\n                        this.p1PowReq \u003d 5;\n                        break;\n                    case 5:\n                        this.p1PowReq \u003d 5;\n                    }\n                    this.drawScores();\n                    this.drawEnergyBars();\n                    break;\n                case 87:\n                case 119:\n                    if(this.p1Y \u003d\u003d\u003d 0) {\n                        this.p1YV \u003d this.scoringRun \u003c\u003d -2?45:31;\n                    }\n                }\n            }\n            break;\n        case 402:\n        case 404:\n            switch((event.key)) {\n            case 65:\n            case 97:\n                if(this.p1XV \u003c 0) {\n                    this.p1XV \u003d 0;\n                }\n                return false;\n            case 68:\n            case 100:\n                if(this.p1XV \u003e 0) {\n                    this.p1XV \u003d 0;\n                }\n                return false;\n            case 74:\n            case 106:\n            case 1006:\n                if(this.p2XV \u003c 0) {\n                    this.p2XV \u003d 0;\n                }\n                return false;\n            case 76:\n            case 108:\n            case 1007:\n                if(this.p2XV \u003e 0) {\n                    this.p2XV \u003d 0;\n                }\n                return false;\n            default:\n                return false;\n            }\n        case 501:\n            this.mousePressed \u003d true;\n            if(!this.fInPlay) {\n                this.fEndGame \u003d false;\n                this.fInPlay \u003d true;\n                this.nScore \u003d 5;\n                this.nPointsScored \u003d 0;\n                this.p1X \u003d 200;\n                this.p1Y \u003d 0;\n                this.p2X \u003d 800;\n                this.p2Y \u003d 0;\n                this.p1XV \u003d 0;\n                this.p1YV \u003d 0;\n                this.p2XV \u003d 0;\n                this.p2YV \u003d 0;\n                this.ballX \u003d 200;\n                this.ballY \u003d 400;\n                this.ballVX \u003d 0;\n                this.ballVY \u003d 0;\n                this.promptMsg \u003d \"\";\n                this.repaint();\n                this.gameThread \u003d new ShimmedThread(this);\n                this.gameThread.start();\n            }\n            break;\n        case 503:\n            this.showStatus(\"Slime Volleyball 2-Player, by Quin Pendragon: tartarus.uwa.edu.au/~fractoid\");\n        }\n        return false;\n    }\n\n    /*private*/ DrawSlimers() {\n        let k1 : number \u003d (this.nWidth / 10|0);\n        let j2 : number \u003d (this.nHeight / 10|0);\n        let i3 : number \u003d (this.nWidth / 50|0);\n        let j3 : number \u003d (this.nHeight / 25|0);\n        let k3 : number \u003d (this.ballX * this.nWidth / 1000|0);\n        let l3 : number \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        let i : number \u003d (this.p1OldX * this.nWidth / 1000|0) - (k1 / 2|0);\n        let l : number \u003d (7 * this.nHeight / 10|0) - (this.p1OldY * this.nHeight / 1000|0);\n        this.screen.setColor(this.bgColor);\n        this.screen.fillRect(i, l, k1, j2);\n        i \u003d (this.p2OldX * this.nWidth / 1000|0) - (k1 / 2|0);\n        l \u003d (7 * this.nHeight / 10|0) - (this.p2OldY * this.nHeight / 1000|0);\n        this.screen.setColor(this.bgColor);\n        this.screen.fillRect(i, l, k1, j2);\n        this.MoveBall();\n        i \u003d (this.p1X * this.nWidth / 1000|0) - (k1 / 2|0);\n        l \u003d (7 * this.nHeight / 10|0) - (this.p1Y * this.nHeight / 1000|0);\n        this.screen.setColor(this.scoringRun \u003c\u003d -2?this.slimeColours[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimeColours.length]:ShimmedColor.blue);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        let l4 : number \u003d this.p1X + 38;\n        let i5 : number \u003d this.p1Y - 60;\n        i \u003d (l4 * this.nWidth / 1000|0);\n        l \u003d (7 * this.nHeight / 10|0) - (i5 * this.nHeight / 1000|0);\n        let i4 : number \u003d i - k3;\n        let j4 : number \u003d l - l3;\n        let k4 : number \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(i4 * i4 + j4 * j4))|0);\n        let flag : boolean \u003d Math.random() \u003c 0.01;\n        if(flag) {\n            this.p1Blink \u003d 5;\n        }\n        if(this.p1Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if(k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4|0) - (3 * i3 / 4|0), l - (4 * j4 / k4|0) - (3 * j3 / 4|0), (i3 / 2|0), (j3 / 2|0));\n            }\n        } else {\n            --this.p1Blink;\n        }\n        i \u003d (this.p2X * this.nWidth / 1000|0) - (k1 / 2|0);\n        l \u003d (7 * this.nHeight / 10|0) - (this.p2Y * this.nHeight / 1000|0);\n        this.screen.setColor(this.scoringRun \u003e\u003d 2?this.slimeColours[this.frenzyCol \u003d (this.frenzyCol + 1) % this.slimeColours.length]:ShimmedColor.green);\n        this.screen.fillArc(i, l, k1, 2 * j2, 0, 180);\n        l4 \u003d this.p2X - 18;\n        i5 \u003d this.p2Y - 60;\n        i \u003d (l4 * this.nWidth / 1000|0);\n        l \u003d (7 * this.nHeight / 10|0) - (i5 * this.nHeight / 1000|0);\n        i4 \u003d i - k3;\n        j4 \u003d l - l3;\n        k4 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(i4 * i4 + j4 * j4))|0);\n        flag \u003d Math.random() \u003c 0.01;\n        if(flag) {\n            this.p2Blink \u003d 5;\n        }\n        if(this.p2Blink \u003d\u003d\u003d 0) {\n            this.screen.setColor(flag?ShimmedColor.gray:ShimmedColor.white);\n            this.screen.fillOval(i - i3, l - j3, i3, j3);\n            if(k4 \u003e 0 \u0026\u0026 !flag) {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.fillOval(i - (4 * i4 / k4|0) - (3 * i3 / 4|0), l - (4 * j4 / k4|0) - (3 * j3 / 4|0), (i3 / 2|0), (j3 / 2|0));\n            }\n        } else {\n            --this.p2Blink;\n        }\n        let i2 : number;\n        let l2 : number;\n        let k : number;\n        let j1 : number;\n        let k5 : number;\n        if(this.nScore \u003e 8) {\n            i2 \u003d (this.p1X * this.nWidth / 1000|0);\n            l2 \u003d (7 * this.nHeight / 10|0) - ((this.p1Y - 40) * this.nHeight / 1000|0);\n            k \u003d (this.nWidth / 20|0);\n            j1 \u003d (this.nHeight / 20|0);\n            k5 \u003d 0;\n            do {\n                this.screen.setColor(ShimmedColor.black);\n                this.screen.drawArc(i2, l2 + k5, k, j1, -30, -150);\n                ++k5;\n            } while((k5 \u003c 3));\n        } else {\n            if(this.nScore \u003c 2) {\n                i2 \u003d (this.nWidth / 20|0);\n                l2 \u003d (this.nHeight / 20|0);\n                k \u003d (this.p2X * this.nWidth / 1000|0) - i2;\n                j1 \u003d (7 * this.nHeight / 10|0) - ((this.p2Y - 40) * this.nHeight / 1000|0);\n                k5 \u003d 0;\n                do {\n                    this.screen.setColor(ShimmedColor.black);\n                    this.screen.drawArc(k, j1 + k5, i2, l2, -10, -150);\n                    ++k5;\n                } while((k5 \u003c 3));\n            }\n        }\n    }\n\n    public paint(g : ShimmedGraphics) {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        g.setColor(this.bgColor);\n        g.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5|0));\n        g.setColor(ShimmedColor.darkGray);\n        g.fillRect(0, (4 * this.nHeight / 5|0), this.nWidth, (this.nHeight / 5|0));\n        g.setColor(ShimmedColor.white);\n        g.fillRect((this.nWidth / 2|0) - 2, (7 * this.nHeight / 10|0), 4, (this.nHeight / 10|0) + 5);\n        this.drawScores();\n        this.drawPrompt();\n        this.drawEnergyBars();\n        if(!this.fInPlay) {\n            let fm : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n            g.setFont(new ShimmedFont(\"Arial\", 1, 150));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(20, 20, 40));\n            g.drawString(\"2\", (this.nWidth / 2|0) - (fm.stringWidth(\"2\") / 2|0), (this.nHeight / 2|0) + 20);\n            g.setFont(new ShimmedFont(\"Courier\", 0, 18));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(255, 255, 255));\n            g.drawString(\"Slime Volleyball\", (this.nWidth / 2|0) - (fm.stringWidth(\"Slime Volleyball\") / 2|0), (this.nHeight / 2|0));\n            g.setFont(new ShimmedFont(\"Courier\", 3, 12));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(255, 255, 100));\n            g.drawString(\"POWER SLIME - beta\", (this.nWidth / 2|0) - (fm.stringWidth(\"POWER SLIME - beta\") / 2|0), (this.nHeight / 2|0) + 15);\n            g.setFont(new ShimmedFont(\"Arial\", 0, 11));\n            fm \u003d g.getFontMetrics();\n            g.setColor(new ShimmedColor(255, 255, 255));\n            fm \u003d g.getFontMetrics();\n            g.drawString(\"Written by Quin Pendragon\", (this.nWidth / 2|0) - (fm.stringWidth(\"Written by Quin Pendragon\") / 2|0), (this.nHeight / 2|0) + fm.getHeight() * 2 + 20);\n            g.drawString(\"Mod by Tim Lightfoot\", (this.nWidth / 2|0) - (fm.stringWidth(\"Mod by Tim Lightfoot\") / 2|0), (this.nHeight / 2|0) + fm.getHeight() * 2 + 35);\n        }\n    }\n\n    public destroy() {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    }\n\n    /*private*/ ReplayFrame(i : number, j : number, k : number, l : number, i1 : number, flag : boolean) {\n        if(flag) {\n            this.ballX \u003d this.ballOldX \u003d -50000000;\n            this.ballY \u003d this.ballOldY \u003d 100000;\n            this.p1OldX \u003d this.p1OldY \u003d this.p2OldX \u003d this.p2OldY \u003d -10000;\n        } else {\n            let _ex : number \u003d i !\u003d\u003d 0?i - 1:199;\n            this.p1OldX \u003d this.replayData[_ex][0];\n            this.p1OldY \u003d this.replayData[_ex][1];\n            this.p2OldX \u003d this.replayData[_ex][2];\n            this.p2OldY \u003d this.replayData[_ex][3];\n            this.ballOldX \u003d this.replayData[_ex][4];\n            this.ballOldY \u003d this.replayData[_ex][5];\n        }\n        this.p1X \u003d this.replayData[i][0];\n        this.p1Y \u003d this.replayData[i][1];\n        this.p2X \u003d this.replayData[i][2];\n        this.p2Y \u003d this.replayData[i][3];\n        this.ballX \u003d this.replayData[i][4];\n        this.ballY \u003d this.replayData[i][5];\n        this.p1Col \u003d this.replayData[i][6];\n        this.p2Col \u003d this.replayData[i][7];\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 1;\n        if((i / 10|0) % 2 \u003e 0) {\n            this.screen.setColor(ShimmedColor.red);\n            this.screen.drawString(\"Replay...\", j, k);\n        } else {\n            this.screen.setColor(this.bgColor);\n            this.screen.fillRect(j, k - i1, l, i1 * 2);\n        }\n        this.DrawSlimers();\n        try {\n            ShimmedThread.sleep$long(20);\n        } catch(var8) {\n        };\n    }\n\n    /*private*/ MakeTime(l : number) : string {\n        let l1 : number \u003d Math.floor(l / 10) % 100;\n        let l2 : number \u003d Math.floor(l / 1000) % 60;\n        let l3 : number \u003d Math.floor(l / 60000) % 60;\n        let l4 : number \u003d Math.floor(l / 3600000);\n        let s : string \u003d \"\";\n        if(l4 \u003c 10) {\n            s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(/* valueOf */new String(/* valueOf */new String(l4).toString()).toString());\n        s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(\":\");\n        if(l3 \u003c 10) {\n            s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(/* valueOf */new String(/* valueOf */new String(l3).toString()).toString());\n        s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(\":\");\n        if(l2 \u003c 10) {\n            s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(/* valueOf */new String(/* valueOf */new String(l2).toString()).toString());\n        s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(\":\");\n        if(l1 \u003c 10) {\n            s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(\"0\");\n        }\n        s \u003d /* valueOf */new String(/* valueOf */new String(s).toString()).toString().concat(/* valueOf */new String(/* valueOf */new String(l1).toString()).toString());\n        return s;\n    }\n\n    /*private*/ MoveSlimers() {\n        this.p1X +\u003d this.p1XV;\n        if(this.p1X \u003c 50) {\n            this.p1X \u003d 50;\n        }\n        if(this.p1X \u003e 445) {\n            this.p1X \u003d 445;\n        }\n        if(this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d this.scoringRun \u003c\u003d -2?4:2;\n            if(this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        this.p2X +\u003d this.p2XV;\n        if(this.p2X \u003e 950) {\n            this.p2X \u003d 950;\n        }\n        if(this.p2X \u003c 555) {\n            this.p2X \u003d 555;\n        }\n        if(this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d this.scoringRun \u003e\u003d 2?4:2;\n            if(this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n    }\n\n    public constructor() {\n        super();\n        this.nWidth \u003d 0;\n        this.nHeight \u003d 0;\n        this.nScore \u003d 0;\n        this.nPointsScored \u003d 0;\n        this.p1X \u003d 0;\n        this.p2X \u003d 0;\n        this.p1Y \u003d 0;\n        this.p2Y \u003d 0;\n        this.p1Col \u003d 0;\n        this.slimeColours \u003d null;\n        this.p1OldX \u003d 0;\n        this.p2OldX \u003d 0;\n        this.p1OldY \u003d 0;\n        this.p2OldY \u003d 0;\n        this.p1XV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2YV \u003d 0;\n        this.ballX \u003d 0;\n        this.ballY \u003d 0;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.ballOldX \u003d 0;\n        this.ballOldY \u003d 0;\n        this.screen \u003d null;\n        this.promptMsg \u003d null;\n        this.replayData \u003d null;\n        this.replayPos \u003d 0;\n        this.replayStart \u003d 0;\n        this.mousePressed \u003d false;\n        this.fCanChangeCol \u003d false;\n        this.fInPlay \u003d false;\n        this.p1Blink \u003d 0;\n        this.p2Blink \u003d 0;\n        this.fP1Touched \u003d false;\n        this.fP2Touched \u003d false;\n        this.gameThread \u003d null;\n        this.fEndGame \u003d false;\n        this.startTime \u003d 0;\n        this.gameTime \u003d 0;\n        this.scoringRun \u003d 0;\n        this.slimeColours \u003d [ShimmedColor.red, ShimmedColor.green, ShimmedColor.yellow, ShimmedColor.white, ShimmedColor.black];\n        this.replayData \u003d \u003cany\u003e (function(dims) { let allocate \u003d function(dims) { if(dims.length\u003d\u003d0) { return 0; } else { let array \u003d []; for(let i \u003d 0; i \u003c dims[0]; i++) { array.push(allocate(dims.slice(1))); } return array; }}; return allocate(dims);})([200, 8]);\n    }\n\n    /*private*/ MoveBall() {\n        let k : number \u003d (30 * this.nHeight / 1000|0);\n        let i : number \u003d (this.ballOldX * this.nWidth / 1000|0);\n        let j : number \u003d (4 * this.nHeight / 5|0) - (this.ballOldY * this.nHeight / 1000|0);\n        this.screen.setColor(this.bgColor);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        if(this.fBouncyRoof) {\n        }\n        if(!this.fEndGame) {\n            let l1 : number \u003d (this.ballX - this.p1X) * 2;\n            let i2 : number \u003d this.ballY - this.p1Y;\n            let j2 : number \u003d l1 * l1 + i2 * i2;\n            let k2 : number \u003d this.ballVX - this.p1XV;\n            let l2 : number \u003d this.ballVY - this.p1YV;\n            let i1 : number;\n            let k1 : number;\n            if(i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003ej2)|0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1|0);\n                this.ballX \u003d this.p1X + (l1 * 63 / i1|0);\n                this.ballY \u003d this.p1Y + (i2 * 125 / i1|0);\n                if(k1 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p1XV - (2 * l1 * k1 / i1|0);\n                    if(this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if(this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p1YV - (2 * i2 * k1 / i1|0);\n                    if(this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if(this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP1Touched \u003d true;\n            }\n            l1 \u003d (this.ballX - this.p2X) * 2;\n            i2 \u003d this.ballY - this.p2Y;\n            j2 \u003d l1 * l1 + i2 * i2;\n            k2 \u003d this.ballVX - this.p2XV;\n            l2 \u003d this.ballVY - this.p2YV;\n            if(i2 \u003e 0 \u0026\u0026 j2 \u003c 15625 \u0026\u0026 j2 \u003e 25) {\n                i1 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003ej2)|0);\n                k1 \u003d ((l1 * k2 + i2 * l2) / i1|0);\n                this.ballX \u003d this.p2X + (l1 * 63 / i1|0);\n                this.ballY \u003d this.p2Y + (i2 * 125 / i1|0);\n                if(k1 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p2XV - (2 * l1 * k1 / i1|0);\n                    if(this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if(this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p2YV - (2 * i2 * k1 / i1|0);\n                    if(this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if(this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                this.fP2Touched \u003d true;\n            }\n            if(this.ballX \u003c 15) {\n                this.ballX \u003d 15;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if(this.ballX \u003e 985) {\n                this.ballX \u003d 985;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if(this.ballX \u003e 480 \u0026\u0026 this.ballX \u003c 520 \u0026\u0026 this.ballY \u003c 140) {\n                if(this.ballVY \u003c 0 \u0026\u0026 this.ballY \u003e 130) {\n                    this.ballVY *\u003d -1;\n                    this.ballY \u003d 130;\n                } else if(this.ballX \u003c 500) {\n                    this.ballX \u003d 480;\n                    this.ballVX \u003d this.ballVX \u003e\u003d 0?-this.ballVX:this.ballVX;\n                } else {\n                    this.ballX \u003d 520;\n                    this.ballVX \u003d this.ballVX \u003c\u003d 0?-this.ballVX:this.ballVX;\n                }\n            }\n        }\n        i \u003d (this.ballX * this.nWidth / 1000|0);\n        j \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        this.screen.setColor(ShimmedColor.yellow);\n        this.screen.fillOval(i - k, j - k, k * 2, k * 2);\n    }\n\n    /*private*/ DrawStatus() {\n        let g : ShimmedGraphics \u003d this.screen;\n        let i : number \u003d (this.nHeight / 20|0);\n        g.setColor(this.bgColor);\n        let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let j : number \u003d (this.nWidth / 2|0) + ((this.nScore - 5) * this.nWidth / 24|0);\n        let s : string \u003d /* valueOf */new String(/* valueOf */new String((new ShimmedStringBuffer(\"Points: \")).append(this.nPointsScored).append(\"   Elapsed: \").append(this.MakeTime(this.gameTime))).toString()).toString();\n        let k : number \u003d fontmetrics.stringWidth(s);\n        g.fillRect(j - (k / 2|0) - 5, 0, k + 10, i + 22);\n        g.setColor(ShimmedColor.white);\n        this.screen.drawString(s, j - (k / 2|0), fontmetrics.getAscent() + 20);\n    }\n\n    public drawPrompt$() {\n        this.screen.setColor(ShimmedColor.darkGray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5|0) + 6, this.nWidth, (this.nHeight / 5|0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    }\n\n    public drawPrompt$java_lang_String$int(s : string, i : number) {\n        let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.lightGray);\n        this.screen.drawString(s, ((this.nWidth - fontmetrics.stringWidth(s)) / 2|0), (this.nHeight * 4 / 5|0) + fontmetrics.getHeight() * (i + 1) + 10);\n    }\n\n    public drawPrompt(s? : any, i? : any) : any {\n        if(((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null) \u0026\u0026 ((typeof i \u003d\u003d\u003d \u0027number\u0027) || i \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.drawPrompt$java_lang_String$int(s, i);\n        } else if(s \u003d\u003d\u003d undefined \u0026\u0026 i \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.drawPrompt$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    /*private*/ SaveReplayData() {\n        this.replayData[this.replayPos][0] \u003d this.p1X;\n        this.replayData[this.replayPos][1] \u003d this.p1Y;\n        this.replayData[this.replayPos][2] \u003d this.p2X;\n        this.replayData[this.replayPos][3] \u003d this.p2Y;\n        this.replayData[this.replayPos][4] \u003d this.ballX;\n        this.replayData[this.replayPos][5] \u003d this.ballY;\n        this.replayData[this.replayPos][6] \u003d this.p1Col;\n        this.replayData[this.replayPos][7] \u003d this.p2Col;\n        ++this.replayPos;\n        if(this.replayPos \u003e\u003d 200) {\n            this.replayPos \u003d 0;\n        }\n        if(this.replayStart \u003d\u003d\u003d this.replayPos) {\n            ++this.replayStart;\n        }\n        if(this.replayStart \u003e\u003d 200) {\n            this.replayStart \u003d 0;\n        }\n    }\n\n    /*private*/ drawScores() {\n        let g : ShimmedGraphics \u003d this.screen;\n        let k : number \u003d (this.nHeight / 20|0);\n        let i1 : number;\n        let j : number;\n        for(i1 \u003d 0; i1 \u003c this.nScore; ++i1) {\n            j \u003d ((i1 + 1) * this.nWidth / 24|0);\n            g.setColor(ShimmedColor.blue);\n            g.fillOval(j, 20, k, k);\n            g.setColor(ShimmedColor.white);\n            g.drawOval(j, 20, k, k);\n        };\n        g.setColor(this.bgColor);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */new String(/* valueOf */new String(this.p1PowString).toString()).toString()), 20, 60);\n        switch((this.p1Pow)) {\n        case 1:\n            this.p1PowString \u003d \"Super Hop\";\n            break;\n        case 2:\n            this.p1PowString \u003d \"Stun Ball\";\n            break;\n        case 3:\n            this.p1PowString \u003d \"Invert Ball\";\n            break;\n        case 4:\n            this.p1PowString \u003d \"Telekenetic Attract\";\n            break;\n        case 5:\n            this.p1PowString \u003d \"Telekenetic Repel\";\n        }\n        g.setColor(ShimmedColor.white);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */new String(/* valueOf */new String(this.p1PowString).toString()).toString()), 20, 60);\n        for(i1 \u003d 0; i1 \u003c 10 - this.nScore; ++i1) {\n            j \u003d this.nWidth - ((i1 + 1) * this.nWidth / 24|0) - k;\n            g.setColor(ShimmedColor.green);\n            g.fillOval(j, 20, k, k);\n            g.setColor(ShimmedColor.white);\n            g.drawOval(j, 20, k, k);\n        };\n        g.setColor(this.bgColor);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */new String(/* valueOf */new String(this.p2PowString).toString()).toString()), this.nWidth - 200, 60);\n        switch((this.p2Pow)) {\n        case 1:\n            this.p2PowString \u003d \"Super Hop\";\n            break;\n        case 2:\n            this.p2PowString \u003d \"Stun Ball\";\n            break;\n        case 3:\n            this.p2PowString \u003d \"Invert Ball\";\n            break;\n        case 4:\n            this.p2PowString \u003d \"Telekenetic Attract\";\n            break;\n        case 5:\n            this.p2PowString \u003d \"Telekenetic Repel\";\n        }\n        g.setColor(ShimmedColor.white);\n        g.drawString(\"Special Ability: \".concat(/* valueOf */new String(/* valueOf */new String(this.p2PowString).toString()).toString()), this.nWidth - 200, 60);\n    }\n\n    public run() {\n        this.replayPos \u003d this.replayStart \u003d 0;\n        this.p1Col \u003d 0;\n        this.p2Col \u003d 1;\n        this.scoringRun \u003d 0;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.nPointsScored \u003d 0;\n        this.startTime \u003d ShimmedSystem.currentTimeMillis();\n        while((this.nScore !\u003d\u003d 0 \u0026\u0026 this.nScore !\u003d\u003d 10 \u0026\u0026 this.gameThread !\u003d null)) {\n            this.gameTime \u003d ShimmedSystem.currentTimeMillis() - this.startTime;\n            this.SaveReplayData();\n            this.p1OldX \u003d this.p1X;\n            this.p1OldY \u003d this.p1Y;\n            this.p2OldX \u003d this.p2X;\n            this.p2OldY \u003d this.p2Y;\n            this.ballOldX \u003d this.ballX;\n            this.ballOldY \u003d this.ballY;\n            this.MoveSlimers();\n            this.DrawSlimers();\n            this.DrawStatus();\n            this.recoverSlimerEnergy();\n            this.drawEnergyBars();\n            this.drawScores();\n            if(this.ballY \u003c 35) {\n                let l : number \u003d ShimmedSystem.currentTimeMillis();\n                ++this.nPointsScored;\n                this.nScore +\u003d this.ballX \u003c\u003d 500?-1:1;\n                if(this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                    ++this.scoringRun;\n                } else if(this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                    --this.scoringRun;\n                } else if(this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                    this.scoringRun \u003d 1;\n                } else if(this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                    this.scoringRun \u003d -1;\n                }\n                this.promptMsg \u003d this.ballX \u003c\u003d 500?this.slimeColText[this.p2Col]:this.slimeColText[this.p1Col];\n                if(!this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                    this.promptMsg \u003d \"It\\\u0027s official, you suck!\";\n                } else if((this.scoringRun \u003c 0?-this.scoringRun:this.scoringRun) \u003d\u003d\u003d 2) {\n                    this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"is on fire!\");\n                } else if(this.ballX \u003e 500 \u0026\u0026 this.fP1Touched \u0026\u0026 !this.fP2Touched || this.ballX \u003c\u003d 500 \u0026\u0026 !this.fP1Touched \u0026\u0026 this.fP2Touched) {\n                    this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"aces the serve!\");\n                } else if(this.ballX \u003e 500 \u0026\u0026 !this.fP1Touched \u0026\u0026 this.fP2Touched || this.ballX \u003c\u003d 500 \u0026\u0026 this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                    this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"watches you make a tool of yourself!\");\n                } else {\n                    switch((this.nScore)) {\n                    case 0:\n                    case 10:\n                        if(this.nPointsScored \u003d\u003d\u003d 5) {\n                            this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"Wins with a QUICK FIVE!!!\");\n                        } else if(this.scoringRun \u003d\u003d\u003d 8) {\n                            this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"Wins with a BIG NINE!!!\");\n                        } else {\n                            this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"Wins!!!\");\n                        }\n                        break;\n                    case 1:\n                    case 2:\n                    case 3:\n                    case 7:\n                    case 8:\n                    case 9:\n                    default:\n                        this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"Scores!\");\n                        break;\n                    case 4:\n                        this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(/* valueOf */new String(/* valueOf */new String(this.ballX \u003e\u003d 500?\"Scores!\":\"takes the lead!!\").toString()).toString());\n                        break;\n                    case 5:\n                        this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(\"Equalizes!\");\n                        break;\n                    case 6:\n                        this.promptMsg \u003d /* valueOf */new String(/* valueOf */new String(this.promptMsg).toString()).toString().concat(/* valueOf */new String(/* valueOf */new String(this.ballX \u003c\u003d 500?\"Scores!\":\"takes the lead!!\").toString()).toString());\n                    }\n                }\n                this.fCanChangeCol \u003d false;\n                let flag : boolean \u003d this.nScore !\u003d\u003d 0 \u0026\u0026 this.nScore !\u003d\u003d 10;\n                let i : number \u003d this.ballX;\n                this.drawPrompt();\n                if(flag) {\n                    this.drawPrompt$java_lang_String$int(\"Click mouse or Hit space for replay...\", 1);\n                    this.mousePressed \u003d false;\n                    if(this.gameThread !\u003d null) {\n                        try {\n                            ShimmedThread.sleep$long(2500);\n                        } catch(var8) {\n                        };\n                    }\n                    if(this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                } else if(this.gameThread !\u003d null) {\n                    try {\n                        ShimmedThread.sleep$long(2500);\n                    } catch(var7) {\n                    };\n                }\n                this.promptMsg \u003d \"\";\n                this.drawPrompt();\n                this.fCanChangeCol \u003d true;\n                if(flag) {\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d i \u003e\u003d 500?200:800;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.fP1Touched \u003d this.fP2Touched \u003d false;\n                    this.repaint();\n                }\n                this.startTime +\u003d ShimmedSystem.currentTimeMillis() - l;\n            }\n            if(this.gameThread !\u003d null) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                } catch(var6) {\n                };\n            }\n        };\n        this.fEndGame \u003d true;\n        this.SaveReplayData();\n        this.DoReplay();\n        this.fInPlay \u003d false;\n        this.promptMsg \u003d \"Click the mouse to play...\";\n        this.repaint();\n    }\n\n    public init() {\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.nScore \u003d 5;\n        this.fInPlay \u003d this.fEndGame \u003d false;\n        this.fCanChangeCol \u003d true;\n        this.promptMsg \u003d \"Click the mouse to play...\";\n        this.screen \u003d this.getGraphics();\n    }\n\n    /*private*/ DoReplay() {\n        let fontmetrics : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let i : number \u003d fontmetrics.stringWidth(\"Replay...\");\n        let j : number \u003d fontmetrics.getHeight();\n        let k : number \u003d (this.nWidth / 2|0) - (i / 2|0);\n        let l : number \u003d (this.nHeight / 2|0) - j;\n        this.promptMsg \u003d \"Click mouse or hit space to continue...\";\n        this.mousePressed \u003d false;\n        for(let i1 : number \u003d this.replayPos - 1; !this.mousePressed; this.ReplayFrame(i1, k, l, i, j, false)) {\n            ++i1;\n            if(i1 \u003e\u003d 200) {\n                i1 \u003d 0;\n            }\n            if(i1 \u003d\u003d\u003d this.replayPos) {\n                try {\n                    ShimmedThread.sleep$long(1000);\n                } catch(var8) {\n                };\n                i1 \u003d this.replayStart;\n                this.paint(this.getGraphics());\n            }\n        };\n        this.promptMsg \u003d \"\";\n        this.paint(this.getGraphics());\n    }\n\n    /*private*/ DoFatality() {\n    }\n\n    /*private*/ slimerSpecial(playerNum : number) {\n        if(this.fP1Touched \u0026\u0026 this.fP2Touched) {\n            let dx : number;\n            let dy : number;\n            switch((playerNum)) {\n            case 1:\n                if(this.scoringRun \u003e -2) {\n                    this.p1Energy -\u003d \u003cnumber\u003ethis.p1PowReq;\n                }\n                switch((this.p1Pow)) {\n                case 1:\n                    if(this.p1Energy \u003e \u003cnumber\u003ethis.p1PowReq) {\n                        this.promptMsg \u003d \"Slimer 1 Hops the ball!\";\n                        this.drawPrompt();\n                        this.ballVY +\u003d 20;\n                        this.drawEnergyBars();\n                    }\n                    return;\n                case 2:\n                    if(this.p1Energy \u003e \u003cnumber\u003ethis.p1PowReq) {\n                        this.promptMsg \u003d \"Slimer 1 stuns the ball!\";\n                        this.drawPrompt();\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                        this.drawEnergyBars();\n                    }\n                    return;\n                case 3:\n                    if(this.p1Energy \u003e \u003cnumber\u003ethis.p1PowReq) {\n                        this.promptMsg \u003d \"Slimer 1 Inverts the ball!\";\n                        this.drawPrompt();\n                        this.ballVX *\u003d -1;\n                        this.ballVY *\u003d -1;\n                        this.drawEnergyBars();\n                    }\n                    return;\n                case 4:\n                    this.promptMsg \u003d \"Slimer 1 uses telekenetic attract!\";\n                    this.drawPrompt();\n                    if(this.p1Energy \u003e \u003cnumber\u003ethis.p1PowReq) {\n                        dx \u003d \u003cnumber\u003e(this.ballX - this.p1X);\n                        dy \u003d \u003cnumber\u003e(this.ballY - this.p1Y);\n                        if(Math.abs(dx) \u003e Math.abs(dy)) {\n                            dy /\u003d dx;\n                            dx /\u003d Math.abs(dx);\n                        } else {\n                            dx /\u003d dy;\n                            dy /\u003d Math.abs(dy);\n                        }\n                        this.ballVX \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVX - \u003cnumber\u003e8 * dx)|0);\n                        this.ballVY \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVY - \u003cnumber\u003e8 * dy)|0);\n                        this.drawEnergyBars();\n                    }\n                    return;\n                case 5:\n                    if(this.p1Energy \u003e \u003cnumber\u003ethis.p1PowReq) {\n                        this.promptMsg \u003d \"Slimer 1 uses telekenetic repel!\";\n                        this.drawPrompt();\n                        dx \u003d \u003cnumber\u003e(this.ballX - this.p1X);\n                        dy \u003d \u003cnumber\u003e(this.ballY - this.p1Y);\n                        if(Math.abs(dx) \u003e Math.abs(dy)) {\n                            dy /\u003d dx;\n                            dx /\u003d Math.abs(dx);\n                        } else {\n                            dx /\u003d dy;\n                            dy /\u003d Math.abs(dy);\n                        }\n                        this.ballVX \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVX + \u003cnumber\u003e10 * dx)|0);\n                        this.ballVY \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVY + \u003cnumber\u003e10 * dy)|0);\n                        this.drawEnergyBars();\n                    }\n                    return;\n                default:\n                    return;\n                }\n            case 2:\n                if(this.scoringRun \u003c 2) {\n                    this.p2Energy -\u003d \u003cnumber\u003ethis.p2PowReq;\n                }\n                switch((this.p2Pow)) {\n                case 1:\n                    if(this.p2Energy \u003e \u003cnumber\u003ethis.p2PowReq) {\n                        this.promptMsg \u003d \"Slimer 2 Hops the ball!\";\n                        this.drawPrompt();\n                        this.ballVY +\u003d 20;\n                        this.drawEnergyBars();\n                    }\n                    break;\n                case 2:\n                    if(this.p2Energy \u003e \u003cnumber\u003ethis.p2PowReq) {\n                        this.promptMsg \u003d \"Slimer 2 stuns the ball!\";\n                        this.drawPrompt();\n                        this.ballVX \u003d 0;\n                        this.ballVY \u003d 0;\n                        this.drawEnergyBars();\n                    }\n                    break;\n                case 3:\n                    if(this.p2Energy \u003e \u003cnumber\u003ethis.p2PowReq) {\n                        this.promptMsg \u003d \"Slimer 2 Inverts the ball!\";\n                        this.drawPrompt();\n                        this.ballVX *\u003d -1;\n                        this.ballVY *\u003d -1;\n                        this.drawEnergyBars();\n                    }\n                    break;\n                case 4:\n                    this.promptMsg \u003d \"Slimer 2 uses telekenetic attract!\";\n                    this.drawPrompt();\n                    if(this.p2Energy \u003e \u003cnumber\u003ethis.p2PowReq) {\n                        dx \u003d \u003cnumber\u003e(this.ballX - this.p2X);\n                        dy \u003d \u003cnumber\u003e(this.ballY - this.p2Y);\n                        if(Math.abs(dx) \u003e Math.abs(dy)) {\n                            dy /\u003d dx;\n                            dx /\u003d Math.abs(dx);\n                        } else {\n                            dx /\u003d dy;\n                            dy /\u003d Math.abs(dy);\n                        }\n                        this.ballVX \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVX - \u003cnumber\u003e8 * dx)|0);\n                        this.ballVY \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVY - \u003cnumber\u003e8 * dy)|0);\n                        this.drawEnergyBars();\n                    }\n                    break;\n                case 5:\n                    if(this.p2Energy \u003e \u003cnumber\u003ethis.p2PowReq) {\n                        this.promptMsg \u003d \"Slimer 2 uses telekenetic repel!\";\n                        this.drawPrompt();\n                        dx \u003d \u003cnumber\u003e(this.ballX - this.p2X);\n                        dy \u003d \u003cnumber\u003e(this.ballY - this.p2Y);\n                        if(Math.abs(dx) \u003e Math.abs(dy)) {\n                            dy /\u003d dx;\n                            dx /\u003d Math.abs(dx);\n                        } else {\n                            dx /\u003d dy;\n                            dy /\u003d Math.abs(dy);\n                        }\n                        this.ballVX \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVX + \u003cnumber\u003e10 * dx)|0);\n                        this.ballVY \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.ballVY + \u003cnumber\u003e10 * dy)|0);\n                        this.drawEnergyBars();\n                    }\n                }\n            }\n        } else {\n            this.promptMsg \u003d \"Sorry, No more cheap points!\";\n            this.drawPrompt();\n        }\n    }\n\n    /*private*/ recoverSlimerEnergy() {\n        if(this.p1Energy \u003c \u003cnumber\u003e100) {\n            this.p1Energy \u003d \u003cnumber\u003e(\u003cnumber\u003ethis.p1Energy + 0.22);\n        }\n        if(this.p2Energy \u003c \u003cnumber\u003e100) {\n            this.p2Energy \u003d \u003cnumber\u003e(\u003cnumber\u003ethis.p2Energy + 0.22);\n        }\n    }\n\n    /*private*/ drawEnergyBars() {\n        this.screen.setColor(ShimmedColor.darkGray);\n        this.screen.fillRect(0, (4 * this.nHeight / 5|0) + 30, this.nWidth, 15);\n        this.screen.setColor(ShimmedColor.black);\n        this.screen.drawRect(10, (4 * this.nHeight / 5|0) + 30, (this.nWidth / 2|0) - 20, 15);\n        this.screen.drawRect(10 + (this.nWidth / 2|0), (4 * this.nHeight / 5|0) + 30, (this.nWidth / 2|0) - 20, 15);\n        this.screen.setColor(new ShimmedColor(50, 50, 255));\n        this.screen.fillRect(11, (4 * this.nHeight / 5|0) + 31, ((\u003cnumber\u003e(\u003cnumber\u003e((this.nWidth / 2|0) - 22) * this.p1Energy)|0) / 100|0), 14);\n        this.screen.setColor(new ShimmedColor(30, 30, 30));\n        this.screen.drawRect(10, (4 * this.nHeight / 5|0) + 30, (((this.nWidth / 2|0) - 20) * this.p1PowReq / 100|0), 15);\n        this.screen.setColor(new ShimmedColor(50, 255, 50));\n        this.screen.fillRect(11 + (this.nWidth / 2|0), (4 * this.nHeight / 5|0) + 31, ((\u003cnumber\u003e(\u003cnumber\u003e((this.nWidth / 2|0) - 22) * this.p2Energy)|0) / 100|0), 14);\n        this.screen.setColor(new ShimmedColor(30, 30, 30));\n        this.screen.drawRect(10 + (this.nWidth / 2|0), (4 * this.nHeight / 5|0) + 30, (((this.nWidth / 2|0) - 20) * this.p2PowReq / 100|0), 15);\n    }\n}\nSlime2P[\"__class\"] \u003d \"Slime2P\";\nSlime2P[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\n\n\n\nclass ShimmedBufferedImage extends ShimmedImage {\n    public constructor(x : number, y : number, z : number) {\n        super();\n    }\n\n    public getSubimage(a : number, b : number, c : number, d : number) : ShimmedBufferedImage {\n        return null;\n    }\n}\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\n\n\nclass ShimmedFrame extends ShimmedElement {\n    public setTitle(s : string) {\n    }\n\n    public pack() {\n    }\n\n    public show() {\n    }\n\n    public dispose() {\n    }\n\n    public setLayout(g : ShimmedGridLayout) {\n    }\n}\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\n\n\nclass ShimmedTextField extends ShimmedElement {\n    public constructor(s : number) {\n        super();\n    }\n\n    public getText() : string {\n        return null;\n    }\n}\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\n\n\nclass ShimmedButton extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\n\n\nclass ShimmedPanel extends ShimmedElement {}\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\n\n\nclass ShimmedLabel extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n\n\n\n",
  "packageName": "_"
}