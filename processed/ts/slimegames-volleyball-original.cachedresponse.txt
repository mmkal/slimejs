public class ShimmedSize {
	public int width;
	public int height;
}
public class ShimmedApplet {
	public ShimmedSize size() { return null; }
	public ShimmedImage createImage(int x, int y) { return null; }
	public void showStatus(String s) {}
	public void repaint() {}
	public ShimmedGraphics getGraphics() { return null; }
	public void requestFocus() {}
	public int getWidth() { return 0; }
	public int getHeight() { return 0; }
	public ShimmedDocumentBase getDocumentBase() { return null; }
	public ShimmedAppletContext getAppletContext() { return null; }
	public ShimmedURL getCodeBase() { return null; }
	public ShimmedAudioClip getAudioClip(ShimmedURL u, String s) { return null; }
	public ShimmedImage getImage(ShimmedURL u, String s) { return null; }
}
public class ShimmedColor {
	public static ShimmedColor yellow = null;
	public static ShimmedColor black = null;
	public static ShimmedColor red = null;
	public static ShimmedColor gray = null;
	public static ShimmedColor white = null;
	public static ShimmedColor blue = null;
	public static ShimmedColor green = null;
	public static ShimmedColor pink = null;
	public static ShimmedColor cyan = null;
	public static ShimmedColor lightGray = null;
	public static ShimmedColor darkGray = null;
	public static ShimmedColor orange = null;
	public ShimmedColor(int r, int g, int b) {}
}
public class ShimmedGraphics {
	public ShimmedFont getFont() { return null; }
	public void setFont(ShimmedFont f) {}
	public void setColor(ShimmedColor c) {}
	public void fillRect(int x, int y, int w, int h) {}
	public ShimmedFontMetrics getFontMetrics() { return null; }
	public void drawString(String s, int x, int y) {}
	public void drawImage(ShimmedImage i, int x, int y, Object o) {}
	public void drawOval(int x, int y, int w, int h) {}
	public void fillOval(int x, int y, int w, int h) {}
	public void fillArc(int x, int y, int w, int h, int s, int e) {}
	public void drawLine(int x, int y, int w, int h) {}
	public void drawRect(int x, int y, int w, int h) {}
	public void fillPolygon(int[] xs, int[] ys, int n) {}
	public void fillPolygon(ShimmedPolygon p) {}
	public void drawArc(int x, int y, int w, int h, int s, int e) {}
}
public class ShimmedImage {
	public ShimmedGraphics getGraphics() { return null; }
	public int getHeight(ShimmedApplet a) { return 0; }
}
public class ShimmedEvent {
	public int id;
	public int x;
	public int y;
	public int key;
	public ShimmedButton target;
	public static final int KEY_ACTION = 0;
	public static final int LEFT = 1;
	public static final int RIGHT = 2;
	public static final int UP = 3;
	public static final int DOWN = 4;
	public static final int KEY_ACTION_RELEASE = 5;
}
public class ShimmedFont {
	public String getName() { return null; }
	public ShimmedFont(String name, int w, int h) {}
}
public class ShimmedFontMetrics {
	public int getHeight() { return 0; }
	public int stringWidth(String s) { return 0; }
	public int getAscent() { return 0; }
}
public class ShimmedThread {
    public static void sleep(long ms) {}
    public static void sleep(long ms, boolean b) {}
    public ShimmedThread(ShimmedRunnable r) {}
    public void start() {}
    public void stop() {}
}
public interface ShimmedRunnable {}

public class ShimmedAppletContext {
	public void showDocument(ShimmedURL u) {}
	public void showDocument(ShimmedURL u, String s) {}
}
public class ShimmedDocumentBase {
	public String getHost() { return null; }
}
public class ShimmedURL { 
	public ShimmedURL(String s) {}
	public ShimmedInputStream openStream() { return null; }
}
public class ShimmedPrintStream {
	public Object print(Object s) { return null; }
	public Object println() { return null; }
	public Object println(Object s) { return null; }
}
public class ShimmedSystem {
	public static ShimmedPrintStream out = null;
	public static long currentTimeMillis() { return 0L; }
}
public class ShimmedBufferedImage extends ShimmedImage {
	public ShimmedBufferedImage(int x, int y, int z) {}
	public ShimmedBufferedImage getSubimage(int a, int b, int c, int d) { return null; }
}
public class ShimmedVector {
	public ShimmedVector(int n) {}
	public void removeAllElements() {}
	public Object get(int i) { return null; }
	public int size() { return 0; }
	public void add(int[] x) {}
}
public class ShimmedElement {
	public void add(ShimmedElement e) {}
}
public class ShimmedFrame extends ShimmedElement {
	public void setTitle(String s) {}
	public void pack() {}
	public void show() {}
	public void dispose() {}
	public void setLayout(ShimmedGridLayout g) {}
}
public class ShimmedTextField extends ShimmedElement {
	public ShimmedTextField(int s) {}
	public String getText() { return null; }
}
public class ShimmedButton extends ShimmedElement {
	public ShimmedButton(String s) {}
}
public class ShimmedPolygon {
	public ShimmedPolygon(int[] xs, int[] ys, int n) {}
}
public class ShimmedInputStream {
	public void close() {}
}
public class ShimmedBufferedReader {
	public ShimmedBufferedReader(ShimmedInputStreamReader i) {}
	public String readLine() { return null; }
	public void close() {}
}
public class ShimmedInputStreamReader {
	public ShimmedInputStreamReader(ShimmedInputStream is) {}
}
public class ShimmedPanel extends ShimmedElement {
}
public class ShimmedLabel extends ShimmedElement {
	public ShimmedLabel(String s) {}
}
public class ShimmedGridLayout {
	public ShimmedGridLayout(int x, int y) {}
}
public class ShimmedLong {
	public static long parseLong(String s) { return 0L; }
}
public class ShimmedChars {
	/** Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints. */
	public static char[] charCodeArray(String s) { return null; }
}
public class ShimmedImageObserver {

}
public class ShimmedRandom {
	public int nextInt(int m) { return 0; }
}
public class ShimmedAudioClip {
	public void play() {}
}
public class ShimmedStringBuffer {
	public ShimmedStringBuffer() {}
	public ShimmedStringBuffer(Object i) {}
	public ShimmedStringBuffer append(Object s) { return null; }
}

public class EndOfShimDeclarations{}

public class slime extends ShimmedApplet implements ShimmedRunnable {
   // $FF: renamed from: th java.lang.ShimmedThread
   ShimmedThread field_rn_slime_th_1;
   ShimmedGraphics gra;
   int XSIZE;
   int YSIZE;
   int SLIMESIZE;
   int BALLSIZE;
   int NETSIZEX;
   int NETSIZEY;
   int GROUNDSIZE;
   int EYESIZE;
   int BLACKEYESIZE;
   int WINSCORE;
   // $FF: renamed from: G double
   double field_rn_slime_G_2;
   int comLevel;
   int paintFlag;
   int comserv;
   // $FF: renamed from: px double[]
   double[] field_rn_slime_px_3 = new double[3];
   // $FF: renamed from: py double[]
   double[] field_rn_slime_py_4 = new double[3];
   double[] pvx = new double[3];
   double[] pvy = new double[3];
   // $FF: renamed from: bx double
   double field_rn_slime_bx_5;
   // $FF: renamed from: by double
   double field_rn_slime_by_6;
   double bvx;
   double bvy;
   int[] score = new int[0];
   int[] jumpFlag = new int[0];
   int service;
   int moveX;
   int jump;
   int comjump;
   int mDown;

   public void init() {
      this.XSIZE = 600;
      this.YSIZE = 400;
      this.SLIMESIZE = 35;
      this.BALLSIZE = 10;
      this.NETSIZEX = 6;
      this.NETSIZEY = 50;
      this.GROUNDSIZE = 50;
      this.EYESIZE = 8;
      this.BLACKEYESIZE = 4;
      this.WINSCORE = 6;
      this.field_rn_slime_G_2 = 0.05D;
      this.mDown = 0;
      this.paintFlag = 0;
      this.comserv = 0;
      this.gra = this.getGraphics();
   }

   public void paint(ShimmedGraphics var1) {
      switch(this.paintFlag) {
      case 1:
         this.ShowTitle();
         return;
      case 2:
         this.DrawAll();
         this.DrawScore();
         return;
      default:
      }
   }

   public void start() {
      if(this.field_rn_slime_th_1 == null) {
         this.field_rn_slime_th_1 = new ShimmedThread(this);
         this.field_rn_slime_th_1.start();
      }

   }

   public void stop() {
      if(this.field_rn_slime_th_1 != null) {
         this.field_rn_slime_th_1.stop();
         this.field_rn_slime_th_1 = null;
      }

   }

   public boolean keyDown(ShimmedEvent var1, int var2) {
      if(var2 != 1006 && var2 != 52) {
         if(var2 == 1007 || var2 == 54) {
            this.moveX = 1;
         }
      } else {
         this.moveX = -1;
      }

      if(var2 == 32) {
         this.jump = 1;
      }

      return true;
   }

   public boolean keyUp(ShimmedEvent var1, int var2) {
      if(var2 == 1006 || var2 == 1007 || var2 == 52 || var2 == 54) {
         this.moveX = 0;
      }

      if(var2 == 32) {
         this.jump = 0;
      }

      return true;
   }

   public boolean mouseUp(ShimmedEvent var1, int var2, int var3) {
      this.mDown = 1;
      return true;
   }

   public void run() {
      this.Setup();
   }

   void Setup() {
      boolean var2 = false;

      int var3;
      do {
         this.paintFlag = 1;
         this.ShowTitle();
         this.WaitClickMouse();
         this.paintFlag = 0;
         this.comLevel = this.SelectComLevel();
         int var1 = this.Main();
         var3 = this.ShowWinner(var1);
      } while(var3 == 0);

   }

   void ShowTitle() {
      this.DrawBG();
      this.gra.setColor(ShimmedColor.white);
      this.gra.setFont(new ShimmedFont("TimesRoman", 1, 64));
      this.gra.drawString("Slime Volley Ball", 20, 150);
      this.gra.setFont(new ShimmedFont("TimesRoman", 1, 32));
      this.gra.drawString("CLICK MOUSE", 350, 250);
   }

   void WaitClickMouse() {
      this.mDown = 0;

      try {
         do {
            ShimmedThread.sleep(1L);
         } while(this.mDown == 0);
      } catch (InterruptedException var1) {
         ;
      }

      this.mDown = 0;
   }

   int SelectComLevel() {
      return 1;
   }

   int ShowWinner(int var1) {
      this.gra.setFont(new ShimmedFont("TimesRoman", 1, 50));
      this.gra.setColor(ShimmedColor.white);
      byte var2;
      if(var1 == 1) {
         var2 = 2;
         this.gra.drawString("You Win!", 200, 100);
      } else {
         var2 = 1;
         this.gra.drawString("You lose.", 200, 100);
      }

      for(int var3 = 0; var3 < 3; ++var3) {
         this.pvy[var1] = -80.0D * this.field_rn_slime_G_2;
         this.field_rn_slime_py_4[var1] = (double)(this.YSIZE - this.GROUNDSIZE);

         do {
            this.gra.setColor(new ShimmedColor(100, 100, 255));
            this.gra.fillRect((int)this.field_rn_slime_px_3[var1] - this.SLIMESIZE, (int)this.field_rn_slime_py_4[var1] - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);
            this.field_rn_slime_py_4[var1] += this.pvy[var1];
            this.pvy[var1] += this.field_rn_slime_G_2 * 2.0D;
            this.DrawSlime(var2);

            try {
               ShimmedThread.sleep(5L);
            } catch (InterruptedException var4) {
               ;
            }
         } while(this.pvy[var1] < 80.0D * this.field_rn_slime_G_2);
      }

      this.gra.setColor(new ShimmedColor(100, 100, 255));
      this.gra.fillRect((int)this.field_rn_slime_px_3[var1] - this.SLIMESIZE, (int)this.field_rn_slime_py_4[var1] - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);
      this.field_rn_slime_py_4[var1] = (double)(this.YSIZE - this.GROUNDSIZE);
      this.DrawSlime(var2);
      return 1;
   }

   int Main() {
      this.score[1] = 0;
      this.score[2] = 0;
      this.service = 1;
      this.DrawBG();
      this.DrawScore();

      int var1;
      do {
         if(this.service == 2) {
            this.comserv = (int)(Math.random() * 4.0D + 1.0D);
         }

         var1 = this.Game(this.service);
         ++this.score[var1];
         this.DrawScore();
         if(var1 == 1) {
            this.DrawSlime(2);
         } else if(var1 == 2) {
            this.DrawSlime(1);
         }

         try {
            ShimmedThread.sleep(2000L);
         } catch (InterruptedException var2) {
            ;
         }

         this.service = var1;
      } while(this.score[1] != this.WINSCORE && this.score[2] != this.WINSCORE);

      return var1;
   }

   int Game(int var1) {
      this.field_rn_slime_px_3[1] = (double)(this.SLIMESIZE + this.SLIMESIZE);
      this.field_rn_slime_px_3[2] = (double)(this.XSIZE - this.SLIMESIZE - this.SLIMESIZE);
      this.field_rn_slime_py_4[1] = (double)(this.YSIZE - this.GROUNDSIZE);
      this.field_rn_slime_py_4[2] = (double)(this.YSIZE - this.GROUNDSIZE);
      this.pvx[1] = 0.0D;
      this.pvx[2] = 0.0D;
      this.pvy[1] = 0.0D;
      this.pvy[2] = 0.0D;
      this.jumpFlag[1] = 0;
      this.jumpFlag[2] = 0;
      this.field_rn_slime_bx_5 = this.field_rn_slime_px_3[var1];
      this.field_rn_slime_by_6 = this.field_rn_slime_py_4[var1] - (double)this.SLIMESIZE - (double)this.SLIMESIZE;
      this.bvx = 0.0D;
      this.bvy = -50.0D * this.field_rn_slime_G_2;
      int var2 = 0;
      this.DrawAll();
      this.paintFlag = 2;

      try {
         ShimmedThread.sleep(100L);
      } catch (InterruptedException var4) {
         ;
      }

      do {
         try {
            ShimmedThread.sleep(8L);
            this.MoveBall();
            this.MoveSlime(1);
            this.MoveSlime(2);
            this.CheckHit();
            var2 = this.CheckPoint();
            this.DrawAll();
         } catch (InterruptedException var3) {
            ;
         }
      } while(var2 == 0);

      this.paintFlag = 0;
      return var2;
   }

   void MoveBall() {
      this.field_rn_slime_bx_5 += this.bvx;
      this.field_rn_slime_by_6 += this.bvy;
      this.bvy += this.field_rn_slime_G_2;
      if(this.field_rn_slime_bx_5 < (double)this.BALLSIZE) {
         this.field_rn_slime_bx_5 = (double)this.BALLSIZE;
         this.bvx = -this.bvx;
      } else if(this.field_rn_slime_bx_5 > (double)(this.XSIZE - this.BALLSIZE)) {
         this.field_rn_slime_bx_5 = (double)(this.XSIZE - this.BALLSIZE);
         this.bvx = -this.bvx;
      }

      if(this.field_rn_slime_bx_5 > (double)(this.XSIZE / 2 - this.NETSIZEX / 2 - this.BALLSIZE) && this.field_rn_slime_bx_5 < (double)(this.XSIZE / 2 + this.NETSIZEX / 2 + this.BALLSIZE)) {
         if(this.field_rn_slime_by_6 > (double)(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY)) {
            if(this.bvx < 0.0D) {
               this.field_rn_slime_bx_5 = (double)(this.XSIZE / 2 + this.NETSIZEX / 2 + this.BALLSIZE + 1);
               this.bvx = -this.bvx;
               return;
            }

            if(this.bvx > 0.0D) {
               this.field_rn_slime_bx_5 = (double)(this.XSIZE / 2 - this.NETSIZEX / 2 - this.BALLSIZE - 1);
               this.bvx = -this.bvx;
               return;
            }
         } else if(this.field_rn_slime_by_6 <= (double)(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY) && this.field_rn_slime_by_6 > (double)(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE)) {
            this.field_rn_slime_by_6 = (double)(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE);
            this.bvy = -Math.abs(this.bvy);
         }
      }

   }

   void CheckHit() {
      for(int var3 = 1; var3 <= 2; ++var3) {
         if(this.field_rn_slime_by_6 <= this.field_rn_slime_py_4[var3]) {
            double var1 = (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) * (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) + (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) * (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6);
            var1 = Math.sqrt(var1);
            if(var1 <= (double)(this.SLIMESIZE + this.BALLSIZE)) {
               this.HitBall(var3);
            }
         } else if(Math.abs(this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) < (double)this.BALLSIZE && Math.abs(this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) < (double)(this.SLIMESIZE + this.BALLSIZE)) {
            this.HitBall2();
         }
      }

   }

   void HitBall(int var1) {
      if(this.comserv != 0) {
         this.comserv = 0;
      }

      double var6 = Math.sqrt(this.bvx * this.bvx + this.bvy * this.bvy);
      double var2 = (this.field_rn_slime_bx_5 - this.field_rn_slime_px_3[var1]) / (double)(this.SLIMESIZE + this.BALLSIZE);
      double var4 = (this.field_rn_slime_by_6 - this.field_rn_slime_py_4[var1]) / (double)(this.SLIMESIZE + this.BALLSIZE);
      this.bvx += var2 * (var6 + 80.0D * this.field_rn_slime_G_2);
      if(this.bvx < -100.0D * this.field_rn_slime_G_2) {
         this.bvx = -100.0D * this.field_rn_slime_G_2;
      } else if(this.bvx > 100.0D * this.field_rn_slime_G_2) {
         this.bvx = 100.0D * this.field_rn_slime_G_2;
      }

      if(this.jumpFlag[var1] == 0) {
         this.bvy = var4 * 80.0D * this.field_rn_slime_G_2;
      } else {
         this.bvy = var4 * 10.0D * this.field_rn_slime_G_2;
      }

      this.field_rn_slime_bx_5 += this.bvx * 2.0D;
      this.field_rn_slime_by_6 += this.bvy * 2.0D;
   }

   void HitBall2() {
      this.bvy = Math.abs(this.bvy);
   }

   int CheckPoint() {
      byte var1 = 0;
      if(this.field_rn_slime_by_6 > (double)(this.YSIZE - this.GROUNDSIZE - this.BALLSIZE)) {
         if(this.field_rn_slime_bx_5 < (double)(this.XSIZE / 2 - this.NETSIZEX / 2)) {
            var1 = 2;
         } else {
            var1 = 1;
         }
      }

      return var1;
   }

   void MoveSlime(int var1) {
      int var2 = 0;
      int var3 = 0;
      if(this.jumpFlag[var1] == 0) {
         if(var1 == 1) {
            var2 = this.GetKey();
            var3 = this.GetJump();
         } else if(var1 == 2) {
            var2 = this.MoveCom2();
            var3 = this.ComJump();
         }

         this.pvx[var1] = (double)var2 * 1.5D;
         this.jumpFlag[var1] = var3;
         if(var3 == 1) {
            this.pvy[var1] = -80.0D * this.field_rn_slime_G_2;
         }
      }

      this.field_rn_slime_px_3[var1] += this.pvx[var1];
      if(var1 == 1) {
         if(this.field_rn_slime_px_3[var1] < (double)this.SLIMESIZE) {
            this.field_rn_slime_px_3[var1] = (double)this.SLIMESIZE;
         } else if(this.field_rn_slime_px_3[var1] > (double)(this.XSIZE / 2 - this.NETSIZEX / 2 - this.SLIMESIZE)) {
            this.field_rn_slime_px_3[var1] = (double)(this.XSIZE / 2 - this.NETSIZEX / 2 - this.SLIMESIZE);
         }
      } else if(var1 == 2) {
         if(this.field_rn_slime_px_3[var1] < (double)(this.XSIZE / 2 + this.NETSIZEX / 2 + this.SLIMESIZE)) {
            this.field_rn_slime_px_3[var1] = (double)(this.XSIZE / 2 + this.NETSIZEX / 2 + this.SLIMESIZE);
         } else if(this.field_rn_slime_px_3[var1] > (double)(this.XSIZE - this.SLIMESIZE)) {
            this.field_rn_slime_px_3[var1] = (double)(this.XSIZE - this.SLIMESIZE);
         }
      }

      if(this.jumpFlag[var1] == 1) {
         this.field_rn_slime_py_4[var1] += this.pvy[var1];
         this.pvy[var1] += this.field_rn_slime_G_2 * 2.0D;
         if(this.field_rn_slime_py_4[var1] >= (double)(this.YSIZE - this.GROUNDSIZE)) {
            this.field_rn_slime_py_4[var1] = (double)(this.YSIZE - this.GROUNDSIZE);
            this.jumpFlag[var1] = 0;
         }
      }

   }

   int GetKey() {
      return this.moveX;
   }

   int GetJump() {
      return this.jump;
   }

   int MoveCom() {
      byte var1 = 0;
      this.comjump = 0;
      if(this.field_rn_slime_bx_5 < (double)(this.XSIZE / 2)) {
         if(this.field_rn_slime_px_3[2] < (double)(this.XSIZE / 2 + this.XSIZE / 5)) {
            var1 = 1;
         } else if(this.field_rn_slime_px_3[2] > (double)(this.XSIZE / 2 + this.XSIZE / 5)) {
            var1 = -1;
         }
      }

      if(this.field_rn_slime_bx_5 > (double)(this.XSIZE / 2 - this.SLIMESIZE * 3)) {
         double var4 = (double)this.YSIZE - (double)this.GROUNDSIZE - this.field_rn_slime_by_6 - (double)this.SLIMESIZE / 1.5D;
         double var6 = (Math.sqrt(this.bvy * this.bvy + 2.0D * this.field_rn_slime_G_2 * var4) - this.bvy) / this.field_rn_slime_G_2;
         double var2 = this.field_rn_slime_bx_5 + this.bvx * var6;
         if(var2 > (double)this.XSIZE) {
            var2 = 2.0D * (double)this.XSIZE - var2;
         }

         if(var2 < (double)(this.XSIZE / 2 + this.XSIZE / 4)) {
            if(Math.abs(this.bvx) < 30.0D * this.field_rn_slime_G_2 && this.bvy > (8.0D + (this.field_rn_slime_py_4[2] - this.field_rn_slime_by_6) * 2.0D * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 && Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) > (double)this.SLIMESIZE * 2.5D) {
               this.comjump = 1;
               if(this.bvx > 20.0D * this.field_rn_slime_G_2 && this.field_rn_slime_px_3[2] < this.field_rn_slime_bx_5 - (double)this.BALLSIZE) {
                  var1 = 1;
               } else if(this.bvx < -20.0D * this.field_rn_slime_G_2 && this.field_rn_slime_px_3[2] > this.field_rn_slime_bx_5 + (double)this.BALLSIZE) {
                  var1 = -1;
               } else {
                  var1 = 0;
               }

               if(var2 < (double)(this.XSIZE / 2) && this.jumpFlag[1] == 0) {
                  this.comjump = 0;
               }
            } else if(Math.abs(this.bvx) < 20.0D * this.field_rn_slime_G_2 && Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) > (double)this.SLIMESIZE * 2.5D) {
               if(this.field_rn_slime_px_3[2] - (double)this.BALLSIZE < this.field_rn_slime_bx_5) {
                  var1 = 1;
               } else if(this.field_rn_slime_px_3[2] - (double)this.BALLSIZE > this.field_rn_slime_bx_5) {
                  var1 = -1;
               }
            } else if(this.field_rn_slime_px_3[2] - (double)(this.BALLSIZE / 3) < var2) {
               var1 = 1;
            } else if(this.field_rn_slime_px_3[2] - (double)(this.BALLSIZE / 3) > var2) {
               var1 = -1;
            } else {
               var1 = 0;
            }
         } else if(this.field_rn_slime_px_3[2] - (double)(this.BALLSIZE / 2) < var2) {
            var1 = 1;
         } else if(this.field_rn_slime_px_3[2] - (double)(this.BALLSIZE / 2) > var2) {
            var1 = -1;
         } else {
            var1 = 0;
         }
      }

      return var1;
   }

   int ComJump() {
      if(this.comjump == 1) {
         this.comjump = 0;
         return 1;
      } else {
         return 0;
      }
   }

   void DrawAll() {
      this.DrawBG();
      this.DrawSlime(0);
      this.DrawBall();
   }

   void DrawBG() {
      ShimmedColor var1 = new ShimmedColor(100, 100, 255);
      this.gra.setColor(var1);
      this.gra.fillRect(0, 50, this.XSIZE, this.YSIZE - this.GROUNDSIZE - 50);
      var1 = new ShimmedColor(180, 140, 160);
      this.gra.setColor(var1);
      this.gra.fillRect(0, this.YSIZE - this.GROUNDSIZE, this.XSIZE, this.GROUNDSIZE);
      this.gra.setColor(ShimmedColor.white);
      this.gra.fillRect(this.XSIZE / 2 - this.NETSIZEX / 2, this.YSIZE - this.GROUNDSIZE - this.NETSIZEY, this.NETSIZEX, this.NETSIZEY);
   }

   void DrawSlime(int var1) {
      for(int var10 = 1; var10 <= 2; ++var10) {
         int var2 = (int)this.field_rn_slime_px_3[var10];
         int var3 = (int)this.field_rn_slime_py_4[var10];
         if(var10 == 1) {
            this.gra.setColor(ShimmedColor.red);
         } else if(var10 == 2) {
            this.gra.setColor(ShimmedColor.blue);
         }

         this.gra.fillArc(var2 - this.SLIMESIZE, var3 - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE * 2, 0, 180);
         if(var10 == 1) {
            var2 += this.SLIMESIZE / 2;
         } else if(var10 == 2) {
            var2 -= this.SLIMESIZE / 2;
         }

         var3 -= this.SLIMESIZE * 3 / 5;
         this.gra.setColor(ShimmedColor.white);
         this.gra.fillArc(var2 - this.EYESIZE, var3 - this.EYESIZE, this.EYESIZE * 2, this.EYESIZE * 2, 0, 360);
         this.gra.setColor(ShimmedColor.black);
         if(var1 != var10) {
            double var4 = this.field_rn_slime_bx_5 - (double)var2;
            double var6 = this.field_rn_slime_by_6 - (double)var3;
            double var8 = Math.sqrt(var4 * var4 + var6 * var6);
            var2 += (int)(var4 * (double)(this.BLACKEYESIZE + 1) / var8);
            var3 += (int)(var6 * (double)(this.BLACKEYESIZE + 1) / var8);
            this.gra.fillArc(var2 - this.BLACKEYESIZE, var3 - this.BLACKEYESIZE, this.BLACKEYESIZE * 2, this.BLACKEYESIZE * 2, 0, 360);
         } else {
            this.gra.drawLine(var2 - this.EYESIZE + 2, var3 - this.EYESIZE + 2, var2 + this.EYESIZE - 2, var3 + this.EYESIZE - 2);
            this.gra.drawLine(var2 - this.EYESIZE + 2, var3 + this.EYESIZE - 2, var2 + this.EYESIZE - 2, var3 - this.EYESIZE + 2);
         }
      }

   }

   void DrawBall() {
      this.gra.setColor(ShimmedColor.yellow);
      this.gra.fillArc((int)this.field_rn_slime_bx_5 - this.BALLSIZE, (int)this.field_rn_slime_by_6 - this.BALLSIZE, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
   }

   void DrawScore() {
      this.gra.setColor(new ShimmedColor(100, 100, 255));
      this.gra.fillRect(0, 0, this.XSIZE, 50);
      this.gra.setColor(ShimmedColor.white);
      this.gra.setFont(new ShimmedFont("TimesRoman", 1, 28));
      this.gra.drawString("RED ", 30, 46);
      this.gra.drawString("BLUE", 30 + this.XSIZE / 2, 46);
      this.gra.setColor(ShimmedColor.yellow);

      for(int var1 = 1; var1 <= this.WINSCORE; ++var1) {
         if(this.score[1] < var1) {
            this.gra.drawArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
         } else {
            this.gra.fillArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
         }

         if(this.score[2] < var1) {
            this.gra.drawArc(this.XSIZE / 2 + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
         } else {
            this.gra.fillArc(this.XSIZE / 2 + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);
         }
      }

   }

   int MoveCom2() {
      byte var3 = 0;
      boolean var4 = false;
      double var23 = (double)this.YSIZE - (double)this.GROUNDSIZE - this.field_rn_slime_by_6 - (double)this.SLIMESIZE;
      double var25 = (Math.sqrt(this.bvy * this.bvy + 2.0D * this.field_rn_slime_G_2 * var23) - this.bvy) / this.field_rn_slime_G_2;
      double var21 = this.field_rn_slime_bx_5 + this.bvx * var25;
      if(var21 > (double)this.XSIZE) {
         var21 = 2.0D * (double)this.XSIZE - var21;
      }

      if(var21 < 0.0D) {
         var21 = -var21;
      }

      double var5 = this.field_rn_slime_px_3[1];
      double var7 = this.field_rn_slime_px_3[2];
      double var13 = this.field_rn_slime_py_4[1];
      double var15 = this.field_rn_slime_py_4[2];
      int var1 = this.jumpFlag[1];
      int var2 = this.jumpFlag[2];
      double var29 = this.bvx;
      double var31 = this.bvy + this.field_rn_slime_G_2 * var25;
      double var33 = Math.sqrt(var29 * var29 * var31 * var31);
      if(var7 < (double)(this.XSIZE / 2 + this.XSIZE / 5)) {
         var3 = 1;
      } else if(var7 > (double)(this.XSIZE / 2 + this.XSIZE / 5)) {
         var3 = -1;
      }

      double var9 = (double)(this.SLIMESIZE + this.BALLSIZE) * this.bvx / (var33 + 80.0D * this.field_rn_slime_G_2);
      if(var21 > (double)(this.XSIZE / 2 - this.SLIMESIZE * 2)) {
         if(var21 > (double)(this.XSIZE / 2 + this.XSIZE / 4)) {
            if(var21 + var9 + (double)(this.BALLSIZE / 2) > var7) {
               var3 = 1;
            } else if(var21 + var9 + (double)(this.BALLSIZE / 2) < var7) {
               var3 = -1;
            } else {
               var3 = 0;
            }
         } else if(Math.abs(this.bvx) < 30.0D * this.field_rn_slime_G_2) {
            if(var5 < (double)(this.XSIZE / 3) && Math.abs(this.field_rn_slime_by_6 - var15) > (double)this.SLIMESIZE * 2.5D) {
               if(this.field_rn_slime_bx_5 + (double)this.BALLSIZE + this.bvx * 10.0D > var7) {
                  var3 = 1;
               } else if(this.field_rn_slime_bx_5 + (double)this.BALLSIZE + this.bvx * 10.0D < var7) {
                  var3 = -1;
               } else {
                  var3 = 0;
               }
            } else if(var21 + var9 + (double)(this.BALLSIZE * 2) > var7) {
               var3 = 1;
            } else if(var21 + var9 + (double)(this.BALLSIZE * 2) < var7) {
               var3 = -1;
            } else {
               var3 = 0;
            }
         } else if(var21 + var9 + (double)(this.BALLSIZE / 6) > var7) {
            var3 = 1;
         } else if(var21 + var9 + (double)(this.BALLSIZE / 6) < var7) {
            var3 = -1;
         } else {
            var3 = 0;
         }

         if(this.field_rn_slime_bx_5 < (double)(this.XSIZE / 2) && Math.abs(var5 - this.field_rn_slime_bx_5) < (double)this.SLIMESIZE && var1 != 0 && var7 < (double)(this.XSIZE / 2 + this.XSIZE / 4) && this.field_rn_slime_bx_5 > (double)(this.XSIZE / 3)) {
            var3 = -1;
            var4 = true;
         }

         if(Math.abs(this.bvx) < 25.0D * this.field_rn_slime_G_2 && this.bvy > (8.0D + (var15 - this.field_rn_slime_by_6) * 2.0D * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 && Math.abs(this.field_rn_slime_by_6 - var15) > (double)this.SLIMESIZE * 2.5D && var7 < (double)(this.XSIZE / 2 + this.XSIZE / 4) && this.bvx * 20.0D + this.field_rn_slime_bx_5 < var7 + (double)this.BALLSIZE && this.bvx * 20.0D + this.field_rn_slime_bx_5 > var7 - (double)this.SLIMESIZE) {
            if(var5 < (double)this.XSIZE / 2.7D) {
               var4 = true;
               var3 = 0;
            } else if(var1 == 1) {
               var4 = true;
               var3 = 0;
            }
         }
      }

      var9 = var7 - (double)this.SLIMESIZE * 1.5D - this.field_rn_slime_bx_5;
      if(var9 > 0.0D && var7 < (double)(this.XSIZE / 2 + this.XSIZE / 4)) {
         var25 = var9 / this.bvx;
         double var17 = this.field_rn_slime_by_6 + var25 * this.bvy + this.field_rn_slime_G_2 * var25 * var25 / 2.0D;
         if(var17 > var15 - (double)this.NETSIZEY - (double)this.SLIMESIZE * 1.5D && var17 < var15 - (double)this.NETSIZEY) {
            if(var25 > 20.0D && var25 < 30.0D) {
               double var11 = var9 - 60.0D;
               if(var11 > 0.0D && var7 < (double)(this.XSIZE / 2 + this.XSIZE + 4) + 60.0D) {
                  double var27 = var11 / this.bvx;
                  double var19 = this.field_rn_slime_by_6 + var27 * this.bvy + this.field_rn_slime_G_2 * var27 * var27 / 2.0D;
                  if(var19 > var15 - (double)this.NETSIZEY - (double)this.SLIMESIZE * 1.5D && var19 < var15 - (double)this.NETSIZEY && var27 > 13.0D && var27 < 15.0D) {
                     var3 = -1;
                     var4 = true;
                  }
               } else {
                  var3 = -1;
               }
            } else if(var25 > 7.0D && var25 < 10.0D) {
               var3 = 0;
               var4 = true;
            }
         }
      }

      if(this.comserv != 0) {
         switch(this.comserv) {
         case 1:
            if(var21 + (double)(this.BALLSIZE * 2) < var7) {
               var3 = -1;
            } else if(var21 + (double)(this.BALLSIZE * 2) > var7) {
               var3 = 1;
            } else {
               var3 = 0;
            }
            break;
         case 2:
            if(var21 + (double)this.BALLSIZE * 2.5D < var7) {
               var3 = -1;
            } else if(var21 + (double)this.BALLSIZE * 2.5D > var7) {
               var3 = 1;
            } else {
               var3 = 0;
            }
         case 3:
         default:
            break;
         case 4:
            if(var21 - (double)this.BALLSIZE < var7) {
               var3 = -1;
            } else if(var21 - (double)this.BALLSIZE > var7) {
               var3 = 1;
            } else {
               var3 = 0;
            }
         }
      }

      if(var4 && this.comserv == 0) {
         this.comjump = 1;
      }

      return var3;
   }
}

ENDOFJAVAMARKER
{
  "startTime": "2019-01-12 18:36:01",
  "sourceLength": 0,
  "success": true,
  "endTime": "2019-01-12 18:36:03",
  "durationMillis": 1415,
  "errors": [],
  "jsout": "var __extends \u003d (this \u0026\u0026 this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] \u003d b[p];\n    function __() { this.constructor \u003d d; }\n    d.prototype \u003d b \u003d\u003d\u003d null ? Object.create(b) : (__.prototype \u003d b.prototype, new __());\n};\n/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nvar ShimmedSize \u003d (function () {\n    function ShimmedSize() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n    return ShimmedSize;\n}());\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\nvar ShimmedApplet \u003d (function () {\n    function ShimmedApplet() {\n    }\n    ShimmedApplet.prototype.size \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.createImage \u003d function (x, y) {\n        return null;\n    };\n    ShimmedApplet.prototype.showStatus \u003d function (s) {\n    };\n    ShimmedApplet.prototype.repaint \u003d function () {\n    };\n    ShimmedApplet.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.requestFocus \u003d function () {\n    };\n    ShimmedApplet.prototype.getWidth \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getDocumentBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAppletContext \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getCodeBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAudioClip \u003d function (u, s) {\n        return null;\n    };\n    ShimmedApplet.prototype.getImage \u003d function (u, s) {\n        return null;\n    };\n    return ShimmedApplet;\n}());\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\nvar ShimmedColor \u003d (function () {\n    function ShimmedColor(r, g, b) {\n    }\n    return ShimmedColor;\n}());\nShimmedColor.yellow \u003d null;\nShimmedColor.black \u003d null;\nShimmedColor.red \u003d null;\nShimmedColor.gray \u003d null;\nShimmedColor.white \u003d null;\nShimmedColor.blue \u003d null;\nShimmedColor.green \u003d null;\nShimmedColor.pink \u003d null;\nShimmedColor.cyan \u003d null;\nShimmedColor.lightGray \u003d null;\nShimmedColor.darkGray \u003d null;\nShimmedColor.orange \u003d null;\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\nvar ShimmedGraphics \u003d (function () {\n    function ShimmedGraphics() {\n    }\n    ShimmedGraphics.prototype.getFont \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.setFont \u003d function (f) {\n    };\n    ShimmedGraphics.prototype.setColor \u003d function (c) {\n    };\n    ShimmedGraphics.prototype.fillRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.getFontMetrics \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.drawString \u003d function (s, x, y) {\n    };\n    ShimmedGraphics.prototype.drawImage \u003d function (i, x, y, o) {\n    };\n    ShimmedGraphics.prototype.drawOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillArc \u003d function (x, y, w, h, s, e) {\n    };\n    ShimmedGraphics.prototype.drawLine \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.drawRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillPolygon$int_A$int_A$int \u003d function (xs, ys, n) {\n    };\n    ShimmedGraphics.prototype.fillPolygon \u003d function (xs, ys, n) {\n        if (((xs !\u003d null \u0026\u0026 xs instanceof Array \u0026\u0026 (xs.length \u003d\u003d 0 || xs[0] \u003d\u003d null || (typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof Array \u0026\u0026 (ys.length \u003d\u003d 0 || ys[0] \u003d\u003d null || (typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return this.fillPolygon$int_A$int_A$int(xs, ys, n);\n        }\n        else if (((xs !\u003d null \u0026\u0026 xs instanceof ShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return this.fillPolygon$ShimmedPolygon(xs);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedGraphics.prototype.fillPolygon$ShimmedPolygon \u003d function (p) {\n    };\n    ShimmedGraphics.prototype.drawArc \u003d function (x, y, w, h, s, e) {\n    };\n    return ShimmedGraphics;\n}());\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\nvar ShimmedImage \u003d (function () {\n    function ShimmedImage() {\n    }\n    ShimmedImage.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedImage.prototype.getHeight \u003d function (a) {\n        return 0;\n    };\n    return ShimmedImage;\n}());\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\nvar ShimmedEvent \u003d (function () {\n    function ShimmedEvent() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n    return ShimmedEvent;\n}());\nShimmedEvent.KEY_ACTION \u003d 0;\nShimmedEvent.LEFT \u003d 1;\nShimmedEvent.RIGHT \u003d 2;\nShimmedEvent.UP \u003d 3;\nShimmedEvent.DOWN \u003d 4;\nShimmedEvent.KEY_ACTION_RELEASE \u003d 5;\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\nvar ShimmedFont \u003d (function () {\n    function ShimmedFont(name, w, h) {\n    }\n    ShimmedFont.prototype.getName \u003d function () {\n        return null;\n    };\n    return ShimmedFont;\n}());\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\nvar ShimmedFontMetrics \u003d (function () {\n    function ShimmedFontMetrics() {\n    }\n    ShimmedFontMetrics.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.stringWidth \u003d function (s) {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.getAscent \u003d function () {\n        return 0;\n    };\n    return ShimmedFontMetrics;\n}());\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\nvar ShimmedThread \u003d (function () {\n    function ShimmedThread(r) {\n    }\n    ShimmedThread.sleep$long \u003d function (ms) {\n    };\n    ShimmedThread.sleep$long$boolean \u003d function (ms, b) {\n    };\n    ShimmedThread.sleep \u003d function (ms, b) {\n        if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return ShimmedThread.sleep$long$boolean(ms, b);\n        }\n        else if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return ShimmedThread.sleep$long(ms);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedThread.prototype.start \u003d function () {\n    };\n    ShimmedThread.prototype.stop \u003d function () {\n    };\n    return ShimmedThread;\n}());\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\nvar ShimmedAppletContext \u003d (function () {\n    function ShimmedAppletContext() {\n    }\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL \u003d function (u) {\n    };\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL$java_lang_String \u003d function (u, s) {\n    };\n    ShimmedAppletContext.prototype.showDocument \u003d function (u, s) {\n        if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return this.showDocument$ShimmedURL$java_lang_String(u, s);\n        }\n        else if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return this.showDocument$ShimmedURL(u);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedAppletContext;\n}());\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\nvar ShimmedDocumentBase \u003d (function () {\n    function ShimmedDocumentBase() {\n    }\n    ShimmedDocumentBase.prototype.getHost \u003d function () {\n        return null;\n    };\n    return ShimmedDocumentBase;\n}());\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\nvar ShimmedURL \u003d (function () {\n    function ShimmedURL(s) {\n    }\n    ShimmedURL.prototype.openStream \u003d function () {\n        return null;\n    };\n    return ShimmedURL;\n}());\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\nvar ShimmedPrintStream \u003d (function () {\n    function ShimmedPrintStream() {\n    }\n    ShimmedPrintStream.prototype.print \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$ \u003d function () {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$java_lang_Object \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println \u003d function (s) {\n        if (((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return this.println$java_lang_Object(s);\n        }\n        else if (s \u003d\u003d\u003d undefined) {\n            return this.println$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedPrintStream;\n}());\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\nvar ShimmedSystem \u003d (function () {\n    function ShimmedSystem() {\n    }\n    ShimmedSystem.currentTimeMillis \u003d function () {\n        return 0;\n    };\n    return ShimmedSystem;\n}());\nShimmedSystem.out \u003d null;\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\nvar ShimmedVector \u003d (function () {\n    function ShimmedVector(n) {\n    }\n    ShimmedVector.prototype.removeAllElements \u003d function () {\n    };\n    ShimmedVector.prototype.get \u003d function (i) {\n        return null;\n    };\n    ShimmedVector.prototype.size \u003d function () {\n        return 0;\n    };\n    ShimmedVector.prototype.add \u003d function (x) {\n    };\n    return ShimmedVector;\n}());\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\nvar ShimmedElement \u003d (function () {\n    function ShimmedElement() {\n    }\n    ShimmedElement.prototype.add \u003d function (e) {\n    };\n    return ShimmedElement;\n}());\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\nvar ShimmedPolygon \u003d (function () {\n    function ShimmedPolygon(xs, ys, n) {\n    }\n    return ShimmedPolygon;\n}());\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\nvar ShimmedInputStream \u003d (function () {\n    function ShimmedInputStream() {\n    }\n    ShimmedInputStream.prototype.close \u003d function () {\n    };\n    return ShimmedInputStream;\n}());\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\nvar ShimmedBufferedReader \u003d (function () {\n    function ShimmedBufferedReader(i) {\n    }\n    ShimmedBufferedReader.prototype.readLine \u003d function () {\n        return null;\n    };\n    ShimmedBufferedReader.prototype.close \u003d function () {\n    };\n    return ShimmedBufferedReader;\n}());\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\nvar ShimmedInputStreamReader \u003d (function () {\n    function ShimmedInputStreamReader(is) {\n    }\n    return ShimmedInputStreamReader;\n}());\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\nvar ShimmedGridLayout \u003d (function () {\n    function ShimmedGridLayout(x, y) {\n    }\n    return ShimmedGridLayout;\n}());\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\nvar ShimmedLong \u003d (function () {\n    function ShimmedLong() {\n    }\n    ShimmedLong.parseLong \u003d function (s) {\n        return 0;\n    };\n    return ShimmedLong;\n}());\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\nvar ShimmedChars \u003d (function () {\n    function ShimmedChars() {\n    }\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    ShimmedChars.charCodeArray \u003d function (s) {\n        return null;\n    };\n    return ShimmedChars;\n}());\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\nvar ShimmedImageObserver \u003d (function () {\n    function ShimmedImageObserver() {\n    }\n    return ShimmedImageObserver;\n}());\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\nvar ShimmedRandom \u003d (function () {\n    function ShimmedRandom() {\n    }\n    ShimmedRandom.prototype.nextInt \u003d function (m) {\n        return 0;\n    };\n    return ShimmedRandom;\n}());\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\nvar ShimmedAudioClip \u003d (function () {\n    function ShimmedAudioClip() {\n    }\n    ShimmedAudioClip.prototype.play \u003d function () {\n    };\n    return ShimmedAudioClip;\n}());\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\nvar ShimmedStringBuffer \u003d (function () {\n    function ShimmedStringBuffer(i) {\n        if (((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else if (i \u003d\u003d\u003d undefined) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    }\n    ShimmedStringBuffer.prototype.append \u003d function (s) {\n        return null;\n    };\n    return ShimmedStringBuffer;\n}());\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\nvar EndOfShimDeclarations \u003d (function () {\n    function EndOfShimDeclarations() {\n    }\n    return EndOfShimDeclarations;\n}());\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\nvar slime \u003d (function (_super) {\n    __extends(slime, _super);\n    function slime() {\n        var _this \u003d _super.call(this) || this;\n        _this.field_rn_slime_px_3 \u003d [0, 0, 0];\n        _this.field_rn_slime_py_4 \u003d [0, 0, 0];\n        _this.pvx \u003d [0, 0, 0];\n        _this.pvy \u003d [0, 0, 0];\n        _this.score \u003d [];\n        _this.jumpFlag \u003d [];\n        _this.field_rn_slime_th_1 \u003d null;\n        _this.gra \u003d null;\n        _this.XSIZE \u003d 0;\n        _this.YSIZE \u003d 0;\n        _this.SLIMESIZE \u003d 0;\n        _this.BALLSIZE \u003d 0;\n        _this.NETSIZEX \u003d 0;\n        _this.NETSIZEY \u003d 0;\n        _this.GROUNDSIZE \u003d 0;\n        _this.EYESIZE \u003d 0;\n        _this.BLACKEYESIZE \u003d 0;\n        _this.WINSCORE \u003d 0;\n        _this.field_rn_slime_G_2 \u003d 0;\n        _this.comLevel \u003d 0;\n        _this.paintFlag \u003d 0;\n        _this.comserv \u003d 0;\n        _this.field_rn_slime_bx_5 \u003d 0;\n        _this.field_rn_slime_by_6 \u003d 0;\n        _this.bvx \u003d 0;\n        _this.bvy \u003d 0;\n        _this.service \u003d 0;\n        _this.moveX \u003d 0;\n        _this.jump \u003d 0;\n        _this.comjump \u003d 0;\n        _this.mDown \u003d 0;\n        return _this;\n    }\n    slime.prototype.init \u003d function () {\n        this.XSIZE \u003d 600;\n        this.YSIZE \u003d 400;\n        this.SLIMESIZE \u003d 35;\n        this.BALLSIZE \u003d 10;\n        this.NETSIZEX \u003d 6;\n        this.NETSIZEY \u003d 50;\n        this.GROUNDSIZE \u003d 50;\n        this.EYESIZE \u003d 8;\n        this.BLACKEYESIZE \u003d 4;\n        this.WINSCORE \u003d 6;\n        this.field_rn_slime_G_2 \u003d 0.05;\n        this.mDown \u003d 0;\n        this.paintFlag \u003d 0;\n        this.comserv \u003d 0;\n        this.gra \u003d this.getGraphics();\n    };\n    slime.prototype.paint \u003d function (var1) {\n        switch ((this.paintFlag)) {\n            case 1:\n                this.ShowTitle();\n                return;\n            case 2:\n                this.DrawAll();\n                this.DrawScore();\n                return;\n            default:\n        }\n    };\n    slime.prototype.start \u003d function () {\n        if (this.field_rn_slime_th_1 \u003d\u003d null) {\n            this.field_rn_slime_th_1 \u003d new ShimmedThread(this);\n            this.field_rn_slime_th_1.start();\n        }\n    };\n    slime.prototype.stop \u003d function () {\n        if (this.field_rn_slime_th_1 !\u003d null) {\n            this.field_rn_slime_th_1.stop();\n            this.field_rn_slime_th_1 \u003d null;\n        }\n    };\n    slime.prototype.keyDown \u003d function (var1, var2) {\n        if (var2 !\u003d\u003d 1006 \u0026\u0026 var2 !\u003d\u003d 52) {\n            if (var2 \u003d\u003d\u003d 1007 || var2 \u003d\u003d\u003d 54) {\n                this.moveX \u003d 1;\n            }\n        }\n        else {\n            this.moveX \u003d -1;\n        }\n        if (var2 \u003d\u003d\u003d 32) {\n            this.jump \u003d 1;\n        }\n        return true;\n    };\n    slime.prototype.keyUp \u003d function (var1, var2) {\n        if (var2 \u003d\u003d\u003d 1006 || var2 \u003d\u003d\u003d 1007 || var2 \u003d\u003d\u003d 52 || var2 \u003d\u003d\u003d 54) {\n            this.moveX \u003d 0;\n        }\n        if (var2 \u003d\u003d\u003d 32) {\n            this.jump \u003d 0;\n        }\n        return true;\n    };\n    slime.prototype.mouseUp \u003d function (var1, var2, var3) {\n        this.mDown \u003d 1;\n        return true;\n    };\n    slime.prototype.run \u003d function () {\n        this.Setup();\n    };\n    slime.prototype.Setup \u003d function () {\n        var var2 \u003d false;\n        var var3;\n        do {\n            this.paintFlag \u003d 1;\n            this.ShowTitle();\n            this.WaitClickMouse();\n            this.paintFlag \u003d 0;\n            this.comLevel \u003d this.SelectComLevel();\n            var var1 \u003d this.Main();\n            var3 \u003d this.ShowWinner(var1);\n        } while ((var3 \u003d\u003d\u003d 0));\n    };\n    slime.prototype.ShowTitle \u003d function () {\n        this.DrawBG();\n        this.gra.setColor(ShimmedColor.white);\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 64));\n        this.gra.drawString(\"Slime Volley Ball\", 20, 150);\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 32));\n        this.gra.drawString(\"CLICK MOUSE\", 350, 250);\n    };\n    slime.prototype.WaitClickMouse \u003d function () {\n        this.mDown \u003d 0;\n        try {\n            do {\n                ShimmedThread.sleep$long(1);\n            } while ((this.mDown \u003d\u003d\u003d 0));\n        }\n        catch (var1) {\n        }\n        ;\n        this.mDown \u003d 0;\n    };\n    slime.prototype.SelectComLevel \u003d function () {\n        return 1;\n    };\n    slime.prototype.ShowWinner \u003d function (var1) {\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 50));\n        this.gra.setColor(ShimmedColor.white);\n        var var2;\n        if (var1 \u003d\u003d\u003d 1) {\n            var2 \u003d 2;\n            this.gra.drawString(\"You Win!\", 200, 100);\n        }\n        else {\n            var2 \u003d 1;\n            this.gra.drawString(\"You lose.\", 200, 100);\n        }\n        for (var var3 \u003d 0; var3 \u003c 3; ++var3) {\n            this.pvy[var1] \u003d -80.0 * this.field_rn_slime_G_2;\n            this.field_rn_slime_py_4[var1] \u003d (this.YSIZE - this.GROUNDSIZE);\n            do {\n                this.gra.setColor(new ShimmedColor(100, 100, 255));\n                this.gra.fillRect((this.field_rn_slime_px_3[var1] | 0) - this.SLIMESIZE, (this.field_rn_slime_py_4[var1] | 0) - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);\n                this.field_rn_slime_py_4[var1] +\u003d this.pvy[var1];\n                this.pvy[var1] +\u003d this.field_rn_slime_G_2 * 2.0;\n                this.DrawSlime(var2);\n                try {\n                    ShimmedThread.sleep$long(5);\n                }\n                catch (var4) {\n                }\n                ;\n            } while ((this.pvy[var1] \u003c 80.0 * this.field_rn_slime_G_2));\n        }\n        ;\n        this.gra.setColor(new ShimmedColor(100, 100, 255));\n        this.gra.fillRect((this.field_rn_slime_px_3[var1] | 0) - this.SLIMESIZE, (this.field_rn_slime_py_4[var1] | 0) - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);\n        this.field_rn_slime_py_4[var1] \u003d (this.YSIZE - this.GROUNDSIZE);\n        this.DrawSlime(var2);\n        return 1;\n    };\n    slime.prototype.Main \u003d function () {\n        this.score[1] \u003d 0;\n        this.score[2] \u003d 0;\n        this.service \u003d 1;\n        this.DrawBG();\n        this.DrawScore();\n        var var1;\n        do {\n            if (this.service \u003d\u003d\u003d 2) {\n                this.comserv \u003d ((Math.random() * 4.0 + 1.0) | 0);\n            }\n            var1 \u003d this.Game(this.service);\n            ++this.score[var1];\n            this.DrawScore();\n            if (var1 \u003d\u003d\u003d 1) {\n                this.DrawSlime(2);\n            }\n            else if (var1 \u003d\u003d\u003d 2) {\n                this.DrawSlime(1);\n            }\n            try {\n                ShimmedThread.sleep$long(2000);\n            }\n            catch (var2) {\n            }\n            ;\n            this.service \u003d var1;\n        } while ((this.score[1] !\u003d\u003d this.WINSCORE \u0026\u0026 this.score[2] !\u003d\u003d this.WINSCORE));\n        return var1;\n    };\n    slime.prototype.Game \u003d function (var1) {\n        this.field_rn_slime_px_3[1] \u003d (this.SLIMESIZE + this.SLIMESIZE);\n        this.field_rn_slime_px_3[2] \u003d (this.XSIZE - this.SLIMESIZE - this.SLIMESIZE);\n        this.field_rn_slime_py_4[1] \u003d (this.YSIZE - this.GROUNDSIZE);\n        this.field_rn_slime_py_4[2] \u003d (this.YSIZE - this.GROUNDSIZE);\n        this.pvx[1] \u003d 0.0;\n        this.pvx[2] \u003d 0.0;\n        this.pvy[1] \u003d 0.0;\n        this.pvy[2] \u003d 0.0;\n        this.jumpFlag[1] \u003d 0;\n        this.jumpFlag[2] \u003d 0;\n        this.field_rn_slime_bx_5 \u003d this.field_rn_slime_px_3[var1];\n        this.field_rn_slime_by_6 \u003d this.field_rn_slime_py_4[var1] - this.SLIMESIZE - this.SLIMESIZE;\n        this.bvx \u003d 0.0;\n        this.bvy \u003d -50.0 * this.field_rn_slime_G_2;\n        var var2 \u003d 0;\n        this.DrawAll();\n        this.paintFlag \u003d 2;\n        try {\n            ShimmedThread.sleep$long(100);\n        }\n        catch (var4) {\n        }\n        ;\n        do {\n            try {\n                ShimmedThread.sleep$long(8);\n                this.MoveBall();\n                this.MoveSlime(1);\n                this.MoveSlime(2);\n                this.CheckHit();\n                var2 \u003d this.CheckPoint();\n                this.DrawAll();\n            }\n            catch (var3) {\n            }\n            ;\n        } while ((var2 \u003d\u003d\u003d 0));\n        this.paintFlag \u003d 0;\n        return var2;\n    };\n    slime.prototype.MoveBall \u003d function () {\n        this.field_rn_slime_bx_5 +\u003d this.bvx;\n        this.field_rn_slime_by_6 +\u003d this.bvy;\n        this.bvy +\u003d this.field_rn_slime_G_2;\n        if (this.field_rn_slime_bx_5 \u003c this.BALLSIZE) {\n            this.field_rn_slime_bx_5 \u003d this.BALLSIZE;\n            this.bvx \u003d -this.bvx;\n        }\n        else if (this.field_rn_slime_bx_5 \u003e (this.XSIZE - this.BALLSIZE)) {\n            this.field_rn_slime_bx_5 \u003d (this.XSIZE - this.BALLSIZE);\n            this.bvx \u003d -this.bvx;\n        }\n        if (this.field_rn_slime_bx_5 \u003e ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.BALLSIZE) \u0026\u0026 this.field_rn_slime_bx_5 \u003c ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.BALLSIZE)) {\n            if (this.field_rn_slime_by_6 \u003e (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY)) {\n                if (this.bvx \u003c 0.0) {\n                    this.field_rn_slime_bx_5 \u003d ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.BALLSIZE + 1);\n                    this.bvx \u003d -this.bvx;\n                    return;\n                }\n                if (this.bvx \u003e 0.0) {\n                    this.field_rn_slime_bx_5 \u003d ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.BALLSIZE - 1);\n                    this.bvx \u003d -this.bvx;\n                    return;\n                }\n            }\n            else if (this.field_rn_slime_by_6 \u003c\u003d (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY) \u0026\u0026 this.field_rn_slime_by_6 \u003e (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE)) {\n                this.field_rn_slime_by_6 \u003d (this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE);\n                this.bvy \u003d -Math.abs(this.bvy);\n            }\n        }\n    };\n    slime.prototype.CheckHit \u003d function () {\n        for (var var3 \u003d 1; var3 \u003c\u003d 2; ++var3) {\n            if (this.field_rn_slime_by_6 \u003c\u003d this.field_rn_slime_py_4[var3]) {\n                var var1 \u003d (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) * (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) + (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) * (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6);\n                var1 \u003d Math.sqrt(var1);\n                if (var1 \u003c\u003d (this.SLIMESIZE + this.BALLSIZE)) {\n                    this.HitBall(var3);\n                }\n            }\n            else if (Math.abs(this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) \u003c this.BALLSIZE \u0026\u0026 Math.abs(this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) \u003c (this.SLIMESIZE + this.BALLSIZE)) {\n                this.HitBall2();\n            }\n        }\n        ;\n    };\n    slime.prototype.HitBall \u003d function (var1) {\n        if (this.comserv !\u003d\u003d 0) {\n            this.comserv \u003d 0;\n        }\n        var var6 \u003d Math.sqrt(this.bvx * this.bvx + this.bvy * this.bvy);\n        var var2 \u003d (this.field_rn_slime_bx_5 - this.field_rn_slime_px_3[var1]) / (this.SLIMESIZE + this.BALLSIZE);\n        var var4 \u003d (this.field_rn_slime_by_6 - this.field_rn_slime_py_4[var1]) / (this.SLIMESIZE + this.BALLSIZE);\n        this.bvx +\u003d var2 * (var6 + 80.0 * this.field_rn_slime_G_2);\n        if (this.bvx \u003c -100.0 * this.field_rn_slime_G_2) {\n            this.bvx \u003d -100.0 * this.field_rn_slime_G_2;\n        }\n        else if (this.bvx \u003e 100.0 * this.field_rn_slime_G_2) {\n            this.bvx \u003d 100.0 * this.field_rn_slime_G_2;\n        }\n        if (this.jumpFlag[var1] \u003d\u003d\u003d 0) {\n            this.bvy \u003d var4 * 80.0 * this.field_rn_slime_G_2;\n        }\n        else {\n            this.bvy \u003d var4 * 10.0 * this.field_rn_slime_G_2;\n        }\n        this.field_rn_slime_bx_5 +\u003d this.bvx * 2.0;\n        this.field_rn_slime_by_6 +\u003d this.bvy * 2.0;\n    };\n    slime.prototype.HitBall2 \u003d function () {\n        this.bvy \u003d Math.abs(this.bvy);\n    };\n    slime.prototype.CheckPoint \u003d function () {\n        var var1 \u003d 0;\n        if (this.field_rn_slime_by_6 \u003e (this.YSIZE - this.GROUNDSIZE - this.BALLSIZE)) {\n            if (this.field_rn_slime_bx_5 \u003c ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0))) {\n                var1 \u003d 2;\n            }\n            else {\n                var1 \u003d 1;\n            }\n        }\n        return var1;\n    };\n    slime.prototype.MoveSlime \u003d function (var1) {\n        var var2 \u003d 0;\n        var var3 \u003d 0;\n        if (this.jumpFlag[var1] \u003d\u003d\u003d 0) {\n            if (var1 \u003d\u003d\u003d 1) {\n                var2 \u003d this.GetKey();\n                var3 \u003d this.GetJump();\n            }\n            else if (var1 \u003d\u003d\u003d 2) {\n                var2 \u003d this.MoveCom2();\n                var3 \u003d this.ComJump();\n            }\n            this.pvx[var1] \u003d var2 * 1.5;\n            this.jumpFlag[var1] \u003d var3;\n            if (var3 \u003d\u003d\u003d 1) {\n                this.pvy[var1] \u003d -80.0 * this.field_rn_slime_G_2;\n            }\n        }\n        this.field_rn_slime_px_3[var1] +\u003d this.pvx[var1];\n        if (var1 \u003d\u003d\u003d 1) {\n            if (this.field_rn_slime_px_3[var1] \u003c this.SLIMESIZE) {\n                this.field_rn_slime_px_3[var1] \u003d this.SLIMESIZE;\n            }\n            else if (this.field_rn_slime_px_3[var1] \u003e ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.SLIMESIZE)) {\n                this.field_rn_slime_px_3[var1] \u003d ((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0) - this.SLIMESIZE);\n            }\n        }\n        else if (var1 \u003d\u003d\u003d 2) {\n            if (this.field_rn_slime_px_3[var1] \u003c ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.SLIMESIZE)) {\n                this.field_rn_slime_px_3[var1] \u003d ((this.XSIZE / 2 | 0) + (this.NETSIZEX / 2 | 0) + this.SLIMESIZE);\n            }\n            else if (this.field_rn_slime_px_3[var1] \u003e (this.XSIZE - this.SLIMESIZE)) {\n                this.field_rn_slime_px_3[var1] \u003d (this.XSIZE - this.SLIMESIZE);\n            }\n        }\n        if (this.jumpFlag[var1] \u003d\u003d\u003d 1) {\n            this.field_rn_slime_py_4[var1] +\u003d this.pvy[var1];\n            this.pvy[var1] +\u003d this.field_rn_slime_G_2 * 2.0;\n            if (this.field_rn_slime_py_4[var1] \u003e\u003d (this.YSIZE - this.GROUNDSIZE)) {\n                this.field_rn_slime_py_4[var1] \u003d (this.YSIZE - this.GROUNDSIZE);\n                this.jumpFlag[var1] \u003d 0;\n            }\n        }\n    };\n    slime.prototype.GetKey \u003d function () {\n        return this.moveX;\n    };\n    slime.prototype.GetJump \u003d function () {\n        return this.jump;\n    };\n    slime.prototype.MoveCom \u003d function () {\n        var var1 \u003d 0;\n        this.comjump \u003d 0;\n        if (this.field_rn_slime_bx_5 \u003c ((this.XSIZE / 2 | 0))) {\n            if (this.field_rn_slime_px_3[2] \u003c ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {\n                var1 \u003d 1;\n            }\n            else if (this.field_rn_slime_px_3[2] \u003e ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {\n                var1 \u003d -1;\n            }\n        }\n        if (this.field_rn_slime_bx_5 \u003e ((this.XSIZE / 2 | 0) - this.SLIMESIZE * 3)) {\n            var var4 \u003d this.YSIZE - this.GROUNDSIZE - this.field_rn_slime_by_6 - this.SLIMESIZE / 1.5;\n            var var6 \u003d (Math.sqrt(this.bvy * this.bvy + 2.0 * this.field_rn_slime_G_2 * var4) - this.bvy) / this.field_rn_slime_G_2;\n            var var2 \u003d this.field_rn_slime_bx_5 + this.bvx * var6;\n            if (var2 \u003e this.XSIZE) {\n                var2 \u003d 2.0 * this.XSIZE - var2;\n            }\n            if (var2 \u003c ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0))) {\n                if (Math.abs(this.bvx) \u003c 30.0 * this.field_rn_slime_G_2 \u0026\u0026 this.bvy \u003e (8.0 + (this.field_rn_slime_py_4[2] - this.field_rn_slime_by_6) * 2.0 * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) \u003e this.SLIMESIZE * 2.5) {\n                    this.comjump \u003d 1;\n                    if (this.bvx \u003e 20.0 * this.field_rn_slime_G_2 \u0026\u0026 this.field_rn_slime_px_3[2] \u003c this.field_rn_slime_bx_5 - this.BALLSIZE) {\n                        var1 \u003d 1;\n                    }\n                    else if (this.bvx \u003c -20.0 * this.field_rn_slime_G_2 \u0026\u0026 this.field_rn_slime_px_3[2] \u003e this.field_rn_slime_bx_5 + this.BALLSIZE) {\n                        var1 \u003d -1;\n                    }\n                    else {\n                        var1 \u003d 0;\n                    }\n                    if (var2 \u003c ((this.XSIZE / 2 | 0)) \u0026\u0026 this.jumpFlag[1] \u003d\u003d\u003d 0) {\n                        this.comjump \u003d 0;\n                    }\n                }\n                else if (Math.abs(this.bvx) \u003c 20.0 * this.field_rn_slime_G_2 \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) \u003e this.SLIMESIZE * 2.5) {\n                    if (this.field_rn_slime_px_3[2] - this.BALLSIZE \u003c this.field_rn_slime_bx_5) {\n                        var1 \u003d 1;\n                    }\n                    else if (this.field_rn_slime_px_3[2] - this.BALLSIZE \u003e this.field_rn_slime_bx_5) {\n                        var1 \u003d -1;\n                    }\n                }\n                else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 3 | 0)) \u003c var2) {\n                    var1 \u003d 1;\n                }\n                else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 3 | 0)) \u003e var2) {\n                    var1 \u003d -1;\n                }\n                else {\n                    var1 \u003d 0;\n                }\n            }\n            else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 2 | 0)) \u003c var2) {\n                var1 \u003d 1;\n            }\n            else if (this.field_rn_slime_px_3[2] - ((this.BALLSIZE / 2 | 0)) \u003e var2) {\n                var1 \u003d -1;\n            }\n            else {\n                var1 \u003d 0;\n            }\n        }\n        return var1;\n    };\n    slime.prototype.ComJump \u003d function () {\n        if (this.comjump \u003d\u003d\u003d 1) {\n            this.comjump \u003d 0;\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    };\n    slime.prototype.DrawAll \u003d function () {\n        this.DrawBG();\n        this.DrawSlime(0);\n        this.DrawBall();\n    };\n    slime.prototype.DrawBG \u003d function () {\n        var var1 \u003d new ShimmedColor(100, 100, 255);\n        this.gra.setColor(var1);\n        this.gra.fillRect(0, 50, this.XSIZE, this.YSIZE - this.GROUNDSIZE - 50);\n        var1 \u003d new ShimmedColor(180, 140, 160);\n        this.gra.setColor(var1);\n        this.gra.fillRect(0, this.YSIZE - this.GROUNDSIZE, this.XSIZE, this.GROUNDSIZE);\n        this.gra.setColor(ShimmedColor.white);\n        this.gra.fillRect((this.XSIZE / 2 | 0) - (this.NETSIZEX / 2 | 0), this.YSIZE - this.GROUNDSIZE - this.NETSIZEY, this.NETSIZEX, this.NETSIZEY);\n    };\n    slime.prototype.DrawSlime \u003d function (var1) {\n        for (var var10 \u003d 1; var10 \u003c\u003d 2; ++var10) {\n            var var2 \u003d (this.field_rn_slime_px_3[var10] | 0);\n            var var3 \u003d (this.field_rn_slime_py_4[var10] | 0);\n            if (var10 \u003d\u003d\u003d 1) {\n                this.gra.setColor(ShimmedColor.red);\n            }\n            else if (var10 \u003d\u003d\u003d 2) {\n                this.gra.setColor(ShimmedColor.blue);\n            }\n            this.gra.fillArc(var2 - this.SLIMESIZE, var3 - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE * 2, 0, 180);\n            if (var10 \u003d\u003d\u003d 1) {\n                var2 +\u003d (this.SLIMESIZE / 2 | 0);\n            }\n            else if (var10 \u003d\u003d\u003d 2) {\n                var2 -\u003d (this.SLIMESIZE / 2 | 0);\n            }\n            var3 -\u003d (this.SLIMESIZE * 3 / 5 | 0);\n            this.gra.setColor(ShimmedColor.white);\n            this.gra.fillArc(var2 - this.EYESIZE, var3 - this.EYESIZE, this.EYESIZE * 2, this.EYESIZE * 2, 0, 360);\n            this.gra.setColor(ShimmedColor.black);\n            if (var1 !\u003d\u003d var10) {\n                var var4 \u003d this.field_rn_slime_bx_5 - var2;\n                var var6 \u003d this.field_rn_slime_by_6 - var3;\n                var var8 \u003d Math.sqrt(var4 * var4 + var6 * var6);\n                var2 +\u003d ((var4 * (this.BLACKEYESIZE + 1) / var8) | 0);\n                var3 +\u003d ((var6 * (this.BLACKEYESIZE + 1) / var8) | 0);\n                this.gra.fillArc(var2 - this.BLACKEYESIZE, var3 - this.BLACKEYESIZE, this.BLACKEYESIZE * 2, this.BLACKEYESIZE * 2, 0, 360);\n            }\n            else {\n                this.gra.drawLine(var2 - this.EYESIZE + 2, var3 - this.EYESIZE + 2, var2 + this.EYESIZE - 2, var3 + this.EYESIZE - 2);\n                this.gra.drawLine(var2 - this.EYESIZE + 2, var3 + this.EYESIZE - 2, var2 + this.EYESIZE - 2, var3 - this.EYESIZE + 2);\n            }\n        }\n        ;\n    };\n    slime.prototype.DrawBall \u003d function () {\n        this.gra.setColor(ShimmedColor.yellow);\n        this.gra.fillArc((this.field_rn_slime_bx_5 | 0) - this.BALLSIZE, (this.field_rn_slime_by_6 | 0) - this.BALLSIZE, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n    };\n    slime.prototype.DrawScore \u003d function () {\n        this.gra.setColor(new ShimmedColor(100, 100, 255));\n        this.gra.fillRect(0, 0, this.XSIZE, 50);\n        this.gra.setColor(ShimmedColor.white);\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 28));\n        this.gra.drawString(\"RED \", 30, 46);\n        this.gra.drawString(\"BLUE\", 30 + (this.XSIZE / 2 | 0), 46);\n        this.gra.setColor(ShimmedColor.yellow);\n        for (var var1 \u003d 1; var1 \u003c\u003d this.WINSCORE; ++var1) {\n            if (this.score[1] \u003c var1) {\n                this.gra.drawArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            }\n            else {\n                this.gra.fillArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            }\n            if (this.score[2] \u003c var1) {\n                this.gra.drawArc((this.XSIZE / 2 | 0) + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            }\n            else {\n                this.gra.fillArc((this.XSIZE / 2 | 0) + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            }\n        }\n        ;\n    };\n    slime.prototype.MoveCom2 \u003d function () {\n        var var3 \u003d 0;\n        var var4 \u003d false;\n        var var23 \u003d this.YSIZE - this.GROUNDSIZE - this.field_rn_slime_by_6 - this.SLIMESIZE;\n        var var25 \u003d (Math.sqrt(this.bvy * this.bvy + 2.0 * this.field_rn_slime_G_2 * var23) - this.bvy) / this.field_rn_slime_G_2;\n        var var21 \u003d this.field_rn_slime_bx_5 + this.bvx * var25;\n        if (var21 \u003e this.XSIZE) {\n            var21 \u003d 2.0 * this.XSIZE - var21;\n        }\n        if (var21 \u003c 0.0) {\n            var21 \u003d -var21;\n        }\n        var var5 \u003d this.field_rn_slime_px_3[1];\n        var var7 \u003d this.field_rn_slime_px_3[2];\n        var var13 \u003d this.field_rn_slime_py_4[1];\n        var var15 \u003d this.field_rn_slime_py_4[2];\n        var var1 \u003d this.jumpFlag[1];\n        var var2 \u003d this.jumpFlag[2];\n        var var29 \u003d this.bvx;\n        var var31 \u003d this.bvy + this.field_rn_slime_G_2 * var25;\n        var var33 \u003d Math.sqrt(var29 * var29 * var31 * var31);\n        if (var7 \u003c ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {\n            var3 \u003d 1;\n        }\n        else if (var7 \u003e ((this.XSIZE / 2 | 0) + (this.XSIZE / 5 | 0))) {\n            var3 \u003d -1;\n        }\n        var var9 \u003d (this.SLIMESIZE + this.BALLSIZE) * this.bvx / (var33 + 80.0 * this.field_rn_slime_G_2);\n        if (var21 \u003e ((this.XSIZE / 2 | 0) - this.SLIMESIZE * 2)) {\n            if (var21 \u003e ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0))) {\n                if (var21 + var9 + ((this.BALLSIZE / 2 | 0)) \u003e var7) {\n                    var3 \u003d 1;\n                }\n                else if (var21 + var9 + ((this.BALLSIZE / 2 | 0)) \u003c var7) {\n                    var3 \u003d -1;\n                }\n                else {\n                    var3 \u003d 0;\n                }\n            }\n            else if (Math.abs(this.bvx) \u003c 30.0 * this.field_rn_slime_G_2) {\n                if (var5 \u003c ((this.XSIZE / 3 | 0)) \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - var15) \u003e this.SLIMESIZE * 2.5) {\n                    if (this.field_rn_slime_bx_5 + this.BALLSIZE + this.bvx * 10.0 \u003e var7) {\n                        var3 \u003d 1;\n                    }\n                    else if (this.field_rn_slime_bx_5 + this.BALLSIZE + this.bvx * 10.0 \u003c var7) {\n                        var3 \u003d -1;\n                    }\n                    else {\n                        var3 \u003d 0;\n                    }\n                }\n                else if (var21 + var9 + (this.BALLSIZE * 2) \u003e var7) {\n                    var3 \u003d 1;\n                }\n                else if (var21 + var9 + (this.BALLSIZE * 2) \u003c var7) {\n                    var3 \u003d -1;\n                }\n                else {\n                    var3 \u003d 0;\n                }\n            }\n            else if (var21 + var9 + ((this.BALLSIZE / 6 | 0)) \u003e var7) {\n                var3 \u003d 1;\n            }\n            else if (var21 + var9 + ((this.BALLSIZE / 6 | 0)) \u003c var7) {\n                var3 \u003d -1;\n            }\n            else {\n                var3 \u003d 0;\n            }\n            if (this.field_rn_slime_bx_5 \u003c ((this.XSIZE / 2 | 0)) \u0026\u0026 Math.abs(var5 - this.field_rn_slime_bx_5) \u003c this.SLIMESIZE \u0026\u0026 var1 !\u003d\u003d 0 \u0026\u0026 var7 \u003c ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0)) \u0026\u0026 this.field_rn_slime_bx_5 \u003e ((this.XSIZE / 3 | 0))) {\n                var3 \u003d -1;\n                var4 \u003d true;\n            }\n            if (Math.abs(this.bvx) \u003c 25.0 * this.field_rn_slime_G_2 \u0026\u0026 this.bvy \u003e (8.0 + (var15 - this.field_rn_slime_by_6) * 2.0 * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - var15) \u003e this.SLIMESIZE * 2.5 \u0026\u0026 var7 \u003c ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0)) \u0026\u0026 this.bvx * 20.0 + this.field_rn_slime_bx_5 \u003c var7 + this.BALLSIZE \u0026\u0026 this.bvx * 20.0 + this.field_rn_slime_bx_5 \u003e var7 - this.SLIMESIZE) {\n                if (var5 \u003c this.XSIZE / 2.7) {\n                    var4 \u003d true;\n                    var3 \u003d 0;\n                }\n                else if (var1 \u003d\u003d\u003d 1) {\n                    var4 \u003d true;\n                    var3 \u003d 0;\n                }\n            }\n        }\n        var9 \u003d var7 - this.SLIMESIZE * 1.5 - this.field_rn_slime_bx_5;\n        if (var9 \u003e 0.0 \u0026\u0026 var7 \u003c ((this.XSIZE / 2 | 0) + (this.XSIZE / 4 | 0))) {\n            var25 \u003d var9 / this.bvx;\n            var var17 \u003d this.field_rn_slime_by_6 + var25 * this.bvy + this.field_rn_slime_G_2 * var25 * var25 / 2.0;\n            if (var17 \u003e var15 - this.NETSIZEY - this.SLIMESIZE * 1.5 \u0026\u0026 var17 \u003c var15 - this.NETSIZEY) {\n                if (var25 \u003e 20.0 \u0026\u0026 var25 \u003c 30.0) {\n                    var var11 \u003d var9 - 60.0;\n                    if (var11 \u003e 0.0 \u0026\u0026 var7 \u003c ((this.XSIZE / 2 | 0) + this.XSIZE + 4) + 60.0) {\n                        var var27 \u003d var11 / this.bvx;\n                        var var19 \u003d this.field_rn_slime_by_6 + var27 * this.bvy + this.field_rn_slime_G_2 * var27 * var27 / 2.0;\n                        if (var19 \u003e var15 - this.NETSIZEY - this.SLIMESIZE * 1.5 \u0026\u0026 var19 \u003c var15 - this.NETSIZEY \u0026\u0026 var27 \u003e 13.0 \u0026\u0026 var27 \u003c 15.0) {\n                            var3 \u003d -1;\n                            var4 \u003d true;\n                        }\n                    }\n                    else {\n                        var3 \u003d -1;\n                    }\n                }\n                else if (var25 \u003e 7.0 \u0026\u0026 var25 \u003c 10.0) {\n                    var3 \u003d 0;\n                    var4 \u003d true;\n                }\n            }\n        }\n        if (this.comserv !\u003d\u003d 0) {\n            switch ((this.comserv)) {\n                case 1:\n                    if (var21 + (this.BALLSIZE * 2) \u003c var7) {\n                        var3 \u003d -1;\n                    }\n                    else if (var21 + (this.BALLSIZE * 2) \u003e var7) {\n                        var3 \u003d 1;\n                    }\n                    else {\n                        var3 \u003d 0;\n                    }\n                    break;\n                case 2:\n                    if (var21 + this.BALLSIZE * 2.5 \u003c var7) {\n                        var3 \u003d -1;\n                    }\n                    else if (var21 + this.BALLSIZE * 2.5 \u003e var7) {\n                        var3 \u003d 1;\n                    }\n                    else {\n                        var3 \u003d 0;\n                    }\n                case 3:\n                default:\n                    break;\n                case 4:\n                    if (var21 - this.BALLSIZE \u003c var7) {\n                        var3 \u003d -1;\n                    }\n                    else if (var21 - this.BALLSIZE \u003e var7) {\n                        var3 \u003d 1;\n                    }\n                    else {\n                        var3 \u003d 0;\n                    }\n            }\n        }\n        if (var4 \u0026\u0026 this.comserv \u003d\u003d\u003d 0) {\n            this.comjump \u003d 1;\n        }\n        return var3;\n    };\n    return slime;\n}(ShimmedApplet));\nslime[\"__class\"] \u003d \"slime\";\nslime[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\nvar ShimmedBufferedImage \u003d (function (_super) {\n    __extends(ShimmedBufferedImage, _super);\n    function ShimmedBufferedImage(x, y, z) {\n        return _super.call(this) || this;\n    }\n    ShimmedBufferedImage.prototype.getSubimage \u003d function (a, b, c, d) {\n        return null;\n    };\n    return ShimmedBufferedImage;\n}(ShimmedImage));\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\nvar ShimmedFrame \u003d (function (_super) {\n    __extends(ShimmedFrame, _super);\n    function ShimmedFrame() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    ShimmedFrame.prototype.setTitle \u003d function (s) {\n    };\n    ShimmedFrame.prototype.pack \u003d function () {\n    };\n    ShimmedFrame.prototype.show \u003d function () {\n    };\n    ShimmedFrame.prototype.dispose \u003d function () {\n    };\n    ShimmedFrame.prototype.setLayout \u003d function (g) {\n    };\n    return ShimmedFrame;\n}(ShimmedElement));\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\nvar ShimmedTextField \u003d (function (_super) {\n    __extends(ShimmedTextField, _super);\n    function ShimmedTextField(s) {\n        return _super.call(this) || this;\n    }\n    ShimmedTextField.prototype.getText \u003d function () {\n        return null;\n    };\n    return ShimmedTextField;\n}(ShimmedElement));\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\nvar ShimmedButton \u003d (function (_super) {\n    __extends(ShimmedButton, _super);\n    function ShimmedButton(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedButton;\n}(ShimmedElement));\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\nvar ShimmedPanel \u003d (function (_super) {\n    __extends(ShimmedPanel, _super);\n    function ShimmedPanel() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    return ShimmedPanel;\n}(ShimmedElement));\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\nvar ShimmedLabel \u003d (function (_super) {\n    __extends(ShimmedLabel, _super);\n    function ShimmedLabel(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedLabel;\n}(ShimmedElement));\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n",
  "tsout": "/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nclass ShimmedSize {\n    public width : number;\n\n    public height : number;\n\n    constructor() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n}\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\n\n\nclass ShimmedApplet {\n    public size() : ShimmedSize {\n        return null;\n    }\n\n    public createImage(x : number, y : number) : ShimmedImage {\n        return null;\n    }\n\n    public showStatus(s : string) {\n    }\n\n    public repaint() {\n    }\n\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public requestFocus() {\n    }\n\n    public getWidth() : number {\n        return 0;\n    }\n\n    public getHeight() : number {\n        return 0;\n    }\n\n    public getDocumentBase() : ShimmedDocumentBase {\n        return null;\n    }\n\n    public getAppletContext() : ShimmedAppletContext {\n        return null;\n    }\n\n    public getCodeBase() : ShimmedURL {\n        return null;\n    }\n\n    public getAudioClip(u : ShimmedURL, s : string) : ShimmedAudioClip {\n        return null;\n    }\n\n    public getImage(u : ShimmedURL, s : string) : ShimmedImage {\n        return null;\n    }\n}\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\n\n\nclass ShimmedColor {\n    public static yellow : ShimmedColor \u003d null;\n\n    public static black : ShimmedColor \u003d null;\n\n    public static red : ShimmedColor \u003d null;\n\n    public static gray : ShimmedColor \u003d null;\n\n    public static white : ShimmedColor \u003d null;\n\n    public static blue : ShimmedColor \u003d null;\n\n    public static green : ShimmedColor \u003d null;\n\n    public static pink : ShimmedColor \u003d null;\n\n    public static cyan : ShimmedColor \u003d null;\n\n    public static lightGray : ShimmedColor \u003d null;\n\n    public static darkGray : ShimmedColor \u003d null;\n\n    public static orange : ShimmedColor \u003d null;\n\n    public constructor(r : number, g : number, b : number) {\n    }\n}\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\n\n\nclass ShimmedGraphics {\n    public getFont() : ShimmedFont {\n        return null;\n    }\n\n    public setFont(f : ShimmedFont) {\n    }\n\n    public setColor(c : ShimmedColor) {\n    }\n\n    public fillRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public getFontMetrics() : ShimmedFontMetrics {\n        return null;\n    }\n\n    public drawString(s : string, x : number, y : number) {\n    }\n\n    public drawImage(i : ShimmedImage, x : number, y : number, o : any) {\n    }\n\n    public drawOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n\n    public drawLine(x : number, y : number, w : number, h : number) {\n    }\n\n    public drawRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillPolygon$int_A$int_A$int(xs : number[], ys : number[], n : number) {\n    }\n\n    public fillPolygon(xs? : any, ys? : any, n? : any) : any {\n        if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eArray \u0026\u0026 (xs.length\u003d\u003d0 || xs[0] \u003d\u003d null ||(typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof \u003cany\u003eArray \u0026\u0026 (ys.length\u003d\u003d0 || ys[0] \u003d\u003d null ||(typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.fillPolygon$int_A$int_A$int(xs, ys, n);\n        } else if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.fillPolygon$ShimmedPolygon(xs);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public fillPolygon$ShimmedPolygon(p : ShimmedPolygon) {\n    }\n\n    public drawArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n}\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\n\n\nclass ShimmedImage {\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public getHeight(a : ShimmedApplet) : number {\n        return 0;\n    }\n}\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\n\n\nclass ShimmedEvent {\n    public id : number;\n\n    public x : number;\n\n    public y : number;\n\n    public key : number;\n\n    public target : ShimmedButton;\n\n    public static KEY_ACTION : number \u003d 0;\n\n    public static LEFT : number \u003d 1;\n\n    public static RIGHT : number \u003d 2;\n\n    public static UP : number \u003d 3;\n\n    public static DOWN : number \u003d 4;\n\n    public static KEY_ACTION_RELEASE : number \u003d 5;\n\n    constructor() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n}\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\n\n\nclass ShimmedFont {\n    public getName() : string {\n        return null;\n    }\n\n    public constructor(name : string, w : number, h : number) {\n    }\n}\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\n\n\nclass ShimmedFontMetrics {\n    public getHeight() : number {\n        return 0;\n    }\n\n    public stringWidth(s : string) : number {\n        return 0;\n    }\n\n    public getAscent() : number {\n        return 0;\n    }\n}\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\n\n\nclass ShimmedThread {\n    public static sleep$long(ms : number) {\n    }\n\n    public static sleep$long$boolean(ms : number, b : boolean) {\n    }\n\n    public static sleep(ms? : any, b? : any) : any {\n        if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return \u003cany\u003eShimmedThread.sleep$long$boolean(ms, b);\n        } else if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return \u003cany\u003eShimmedThread.sleep$long(ms);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public constructor(r : ShimmedRunnable) {\n    }\n\n    public start() {\n    }\n\n    public stop() {\n    }\n}\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\n\n\ninterface ShimmedRunnable {}\n\nclass ShimmedAppletContext {\n    public showDocument$ShimmedURL(u : ShimmedURL) {\n    }\n\n    public showDocument$ShimmedURL$java_lang_String(u : ShimmedURL, s : string) {\n    }\n\n    public showDocument(u? : any, s? : any) : any {\n        if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL$java_lang_String(u, s);\n        } else if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL(u);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\n\n\nclass ShimmedDocumentBase {\n    public getHost() : string {\n        return null;\n    }\n}\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\n\n\nclass ShimmedURL {\n    public constructor(s : string) {\n    }\n\n    public openStream() : ShimmedInputStream {\n        return null;\n    }\n}\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\n\n\nclass ShimmedPrintStream {\n    public print(s : any) : any {\n        return null;\n    }\n\n    public println$() : any {\n        return null;\n    }\n\n    public println$java_lang_Object(s : any) : any {\n        return null;\n    }\n\n    public println(s? : any) : any {\n        if(((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.println$java_lang_Object(s);\n        } else if(s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.println$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\n\n\nclass ShimmedSystem {\n    public static out : ShimmedPrintStream \u003d null;\n\n    public static currentTimeMillis() : number {\n        return 0;\n    }\n}\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\n\n\nclass ShimmedVector {\n    public constructor(n : number) {\n    }\n\n    public removeAllElements() {\n    }\n\n    public get(i : number) : any {\n        return null;\n    }\n\n    public size() : number {\n        return 0;\n    }\n\n    public add(x : number[]) {\n    }\n}\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\n\n\nclass ShimmedElement {\n    public add(e : ShimmedElement) {\n    }\n}\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\n\n\nclass ShimmedPolygon {\n    public constructor(xs : number[], ys : number[], n : number) {\n    }\n}\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\n\n\nclass ShimmedInputStream {\n    public close() {\n    }\n}\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\n\n\nclass ShimmedBufferedReader {\n    public constructor(i : ShimmedInputStreamReader) {\n    }\n\n    public readLine() : string {\n        return null;\n    }\n\n    public close() {\n    }\n}\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\n\n\nclass ShimmedInputStreamReader {\n    public constructor(is : ShimmedInputStream) {\n    }\n}\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\n\n\nclass ShimmedGridLayout {\n    public constructor(x : number, y : number) {\n    }\n}\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\n\n\nclass ShimmedLong {\n    public static parseLong(s : string) : number {\n        return 0;\n    }\n}\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\n\n\nclass ShimmedChars {\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    public static charCodeArray(s : string) : string[] {\n        return null;\n    }\n}\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\n\n\nclass ShimmedImageObserver {}\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\n\n\nclass ShimmedRandom {\n    public nextInt(m : number) : number {\n        return 0;\n    }\n}\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\n\n\nclass ShimmedAudioClip {\n    public play() {\n    }\n}\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\n\n\nclass ShimmedStringBuffer {\n    public constructor(i? : any) {\n        if(((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else if(i \u003d\u003d\u003d undefined) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public append(s : any) : ShimmedStringBuffer {\n        return null;\n    }\n}\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\n\n\nclass EndOfShimDeclarations {}\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\n\n\nclass slime extends ShimmedApplet implements ShimmedRunnable {\n    field_rn_slime_th_1 : ShimmedThread;\n\n    gra : ShimmedGraphics;\n\n    XSIZE : number;\n\n    YSIZE : number;\n\n    SLIMESIZE : number;\n\n    BALLSIZE : number;\n\n    NETSIZEX : number;\n\n    NETSIZEY : number;\n\n    GROUNDSIZE : number;\n\n    EYESIZE : number;\n\n    BLACKEYESIZE : number;\n\n    WINSCORE : number;\n\n    field_rn_slime_G_2 : number;\n\n    comLevel : number;\n\n    paintFlag : number;\n\n    comserv : number;\n\n    field_rn_slime_px_3 : number[] \u003d [0, 0, 0];\n\n    field_rn_slime_py_4 : number[] \u003d [0, 0, 0];\n\n    pvx : number[] \u003d [0, 0, 0];\n\n    pvy : number[] \u003d [0, 0, 0];\n\n    field_rn_slime_bx_5 : number;\n\n    field_rn_slime_by_6 : number;\n\n    bvx : number;\n\n    bvy : number;\n\n    score : number[] \u003d [];\n\n    jumpFlag : number[] \u003d [];\n\n    service : number;\n\n    moveX : number;\n\n    jump : number;\n\n    comjump : number;\n\n    mDown : number;\n\n    public init() {\n        this.XSIZE \u003d 600;\n        this.YSIZE \u003d 400;\n        this.SLIMESIZE \u003d 35;\n        this.BALLSIZE \u003d 10;\n        this.NETSIZEX \u003d 6;\n        this.NETSIZEY \u003d 50;\n        this.GROUNDSIZE \u003d 50;\n        this.EYESIZE \u003d 8;\n        this.BLACKEYESIZE \u003d 4;\n        this.WINSCORE \u003d 6;\n        this.field_rn_slime_G_2 \u003d 0.05;\n        this.mDown \u003d 0;\n        this.paintFlag \u003d 0;\n        this.comserv \u003d 0;\n        this.gra \u003d this.getGraphics();\n    }\n\n    public paint(var1 : ShimmedGraphics) {\n        switch((this.paintFlag)) {\n        case 1:\n            this.ShowTitle();\n            return;\n        case 2:\n            this.DrawAll();\n            this.DrawScore();\n            return;\n        default:\n        }\n    }\n\n    public start() {\n        if(this.field_rn_slime_th_1 \u003d\u003d null) {\n            this.field_rn_slime_th_1 \u003d new ShimmedThread(this);\n            this.field_rn_slime_th_1.start();\n        }\n    }\n\n    public stop() {\n        if(this.field_rn_slime_th_1 !\u003d null) {\n            this.field_rn_slime_th_1.stop();\n            this.field_rn_slime_th_1 \u003d null;\n        }\n    }\n\n    public keyDown(var1 : ShimmedEvent, var2 : number) : boolean {\n        if(var2 !\u003d\u003d 1006 \u0026\u0026 var2 !\u003d\u003d 52) {\n            if(var2 \u003d\u003d\u003d 1007 || var2 \u003d\u003d\u003d 54) {\n                this.moveX \u003d 1;\n            }\n        } else {\n            this.moveX \u003d -1;\n        }\n        if(var2 \u003d\u003d\u003d 32) {\n            this.jump \u003d 1;\n        }\n        return true;\n    }\n\n    public keyUp(var1 : ShimmedEvent, var2 : number) : boolean {\n        if(var2 \u003d\u003d\u003d 1006 || var2 \u003d\u003d\u003d 1007 || var2 \u003d\u003d\u003d 52 || var2 \u003d\u003d\u003d 54) {\n            this.moveX \u003d 0;\n        }\n        if(var2 \u003d\u003d\u003d 32) {\n            this.jump \u003d 0;\n        }\n        return true;\n    }\n\n    public mouseUp(var1 : ShimmedEvent, var2 : number, var3 : number) : boolean {\n        this.mDown \u003d 1;\n        return true;\n    }\n\n    public run() {\n        this.Setup();\n    }\n\n    Setup() {\n        let var2 : boolean \u003d false;\n        let var3 : number;\n        do {\n            this.paintFlag \u003d 1;\n            this.ShowTitle();\n            this.WaitClickMouse();\n            this.paintFlag \u003d 0;\n            this.comLevel \u003d this.SelectComLevel();\n            let var1 : number \u003d this.Main();\n            var3 \u003d this.ShowWinner(var1);\n        } while((var3 \u003d\u003d\u003d 0));\n    }\n\n    ShowTitle() {\n        this.DrawBG();\n        this.gra.setColor(ShimmedColor.white);\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 64));\n        this.gra.drawString(\"Slime Volley Ball\", 20, 150);\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 32));\n        this.gra.drawString(\"CLICK MOUSE\", 350, 250);\n    }\n\n    WaitClickMouse() {\n        this.mDown \u003d 0;\n        try {\n            do {\n                ShimmedThread.sleep$long(1);\n            } while((this.mDown \u003d\u003d\u003d 0));\n        } catch(var1) {\n        };\n        this.mDown \u003d 0;\n    }\n\n    SelectComLevel() : number {\n        return 1;\n    }\n\n    ShowWinner(var1 : number) : number {\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 50));\n        this.gra.setColor(ShimmedColor.white);\n        let var2 : number;\n        if(var1 \u003d\u003d\u003d 1) {\n            var2 \u003d 2;\n            this.gra.drawString(\"You Win!\", 200, 100);\n        } else {\n            var2 \u003d 1;\n            this.gra.drawString(\"You lose.\", 200, 100);\n        }\n        for(let var3 : number \u003d 0; var3 \u003c 3; ++var3) {\n            this.pvy[var1] \u003d -80.0 * this.field_rn_slime_G_2;\n            this.field_rn_slime_py_4[var1] \u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE);\n            do {\n                this.gra.setColor(new ShimmedColor(100, 100, 255));\n                this.gra.fillRect((\u003cnumber\u003ethis.field_rn_slime_px_3[var1]|0) - this.SLIMESIZE, (\u003cnumber\u003ethis.field_rn_slime_py_4[var1]|0) - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);\n                this.field_rn_slime_py_4[var1] +\u003d this.pvy[var1];\n                this.pvy[var1] +\u003d this.field_rn_slime_G_2 * 2.0;\n                this.DrawSlime(var2);\n                try {\n                    ShimmedThread.sleep$long(5);\n                } catch(var4) {\n                };\n            } while((this.pvy[var1] \u003c 80.0 * this.field_rn_slime_G_2));\n        };\n        this.gra.setColor(new ShimmedColor(100, 100, 255));\n        this.gra.fillRect((\u003cnumber\u003ethis.field_rn_slime_px_3[var1]|0) - this.SLIMESIZE, (\u003cnumber\u003ethis.field_rn_slime_py_4[var1]|0) - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE);\n        this.field_rn_slime_py_4[var1] \u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE);\n        this.DrawSlime(var2);\n        return 1;\n    }\n\n    Main() : number {\n        this.score[1] \u003d 0;\n        this.score[2] \u003d 0;\n        this.service \u003d 1;\n        this.DrawBG();\n        this.DrawScore();\n        let var1 : number;\n        do {\n            if(this.service \u003d\u003d\u003d 2) {\n                this.comserv \u003d (\u003cnumber\u003e(Math.random() * 4.0 + 1.0)|0);\n            }\n            var1 \u003d this.Game(this.service);\n            ++this.score[var1];\n            this.DrawScore();\n            if(var1 \u003d\u003d\u003d 1) {\n                this.DrawSlime(2);\n            } else if(var1 \u003d\u003d\u003d 2) {\n                this.DrawSlime(1);\n            }\n            try {\n                ShimmedThread.sleep$long(2000);\n            } catch(var2) {\n            };\n            this.service \u003d var1;\n        } while((this.score[1] !\u003d\u003d this.WINSCORE \u0026\u0026 this.score[2] !\u003d\u003d this.WINSCORE));\n        return var1;\n    }\n\n    Game(var1 : number) : number {\n        this.field_rn_slime_px_3[1] \u003d \u003cnumber\u003e(this.SLIMESIZE + this.SLIMESIZE);\n        this.field_rn_slime_px_3[2] \u003d \u003cnumber\u003e(this.XSIZE - this.SLIMESIZE - this.SLIMESIZE);\n        this.field_rn_slime_py_4[1] \u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE);\n        this.field_rn_slime_py_4[2] \u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE);\n        this.pvx[1] \u003d 0.0;\n        this.pvx[2] \u003d 0.0;\n        this.pvy[1] \u003d 0.0;\n        this.pvy[2] \u003d 0.0;\n        this.jumpFlag[1] \u003d 0;\n        this.jumpFlag[2] \u003d 0;\n        this.field_rn_slime_bx_5 \u003d this.field_rn_slime_px_3[var1];\n        this.field_rn_slime_by_6 \u003d this.field_rn_slime_py_4[var1] - \u003cnumber\u003ethis.SLIMESIZE - \u003cnumber\u003ethis.SLIMESIZE;\n        this.bvx \u003d 0.0;\n        this.bvy \u003d -50.0 * this.field_rn_slime_G_2;\n        let var2 : number \u003d 0;\n        this.DrawAll();\n        this.paintFlag \u003d 2;\n        try {\n            ShimmedThread.sleep$long(100);\n        } catch(var4) {\n        };\n        do {\n            try {\n                ShimmedThread.sleep$long(8);\n                this.MoveBall();\n                this.MoveSlime(1);\n                this.MoveSlime(2);\n                this.CheckHit();\n                var2 \u003d this.CheckPoint();\n                this.DrawAll();\n            } catch(var3) {\n            };\n        } while((var2 \u003d\u003d\u003d 0));\n        this.paintFlag \u003d 0;\n        return var2;\n    }\n\n    MoveBall() {\n        this.field_rn_slime_bx_5 +\u003d this.bvx;\n        this.field_rn_slime_by_6 +\u003d this.bvy;\n        this.bvy +\u003d this.field_rn_slime_G_2;\n        if(this.field_rn_slime_bx_5 \u003c \u003cnumber\u003ethis.BALLSIZE) {\n            this.field_rn_slime_bx_5 \u003d \u003cnumber\u003ethis.BALLSIZE;\n            this.bvx \u003d -this.bvx;\n        } else if(this.field_rn_slime_bx_5 \u003e \u003cnumber\u003e(this.XSIZE - this.BALLSIZE)) {\n            this.field_rn_slime_bx_5 \u003d \u003cnumber\u003e(this.XSIZE - this.BALLSIZE);\n            this.bvx \u003d -this.bvx;\n        }\n        if(this.field_rn_slime_bx_5 \u003e \u003cnumber\u003e((this.XSIZE / 2|0) - (this.NETSIZEX / 2|0) - this.BALLSIZE) \u0026\u0026 this.field_rn_slime_bx_5 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.NETSIZEX / 2|0) + this.BALLSIZE)) {\n            if(this.field_rn_slime_by_6 \u003e \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY)) {\n                if(this.bvx \u003c 0.0) {\n                    this.field_rn_slime_bx_5 \u003d \u003cnumber\u003e((this.XSIZE / 2|0) + (this.NETSIZEX / 2|0) + this.BALLSIZE + 1);\n                    this.bvx \u003d -this.bvx;\n                    return;\n                }\n                if(this.bvx \u003e 0.0) {\n                    this.field_rn_slime_bx_5 \u003d \u003cnumber\u003e((this.XSIZE / 2|0) - (this.NETSIZEX / 2|0) - this.BALLSIZE - 1);\n                    this.bvx \u003d -this.bvx;\n                    return;\n                }\n            } else if(this.field_rn_slime_by_6 \u003c\u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY) \u0026\u0026 this.field_rn_slime_by_6 \u003e \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE)) {\n                this.field_rn_slime_by_6 \u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE - this.NETSIZEY - this.BALLSIZE);\n                this.bvy \u003d -Math.abs(this.bvy);\n            }\n        }\n    }\n\n    CheckHit() {\n        for(let var3 : number \u003d 1; var3 \u003c\u003d 2; ++var3) {\n            if(this.field_rn_slime_by_6 \u003c\u003d this.field_rn_slime_py_4[var3]) {\n                let var1 : number \u003d (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) * (this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) + (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) * (this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6);\n                var1 \u003d Math.sqrt(var1);\n                if(var1 \u003c\u003d \u003cnumber\u003e(this.SLIMESIZE + this.BALLSIZE)) {\n                    this.HitBall(var3);\n                }\n            } else if(Math.abs(this.field_rn_slime_py_4[var3] - this.field_rn_slime_by_6) \u003c \u003cnumber\u003ethis.BALLSIZE \u0026\u0026 Math.abs(this.field_rn_slime_px_3[var3] - this.field_rn_slime_bx_5) \u003c \u003cnumber\u003e(this.SLIMESIZE + this.BALLSIZE)) {\n                this.HitBall2();\n            }\n        };\n    }\n\n    HitBall(var1 : number) {\n        if(this.comserv !\u003d\u003d 0) {\n            this.comserv \u003d 0;\n        }\n        let var6 : number \u003d Math.sqrt(this.bvx * this.bvx + this.bvy * this.bvy);\n        let var2 : number \u003d (this.field_rn_slime_bx_5 - this.field_rn_slime_px_3[var1]) / \u003cnumber\u003e(this.SLIMESIZE + this.BALLSIZE);\n        let var4 : number \u003d (this.field_rn_slime_by_6 - this.field_rn_slime_py_4[var1]) / \u003cnumber\u003e(this.SLIMESIZE + this.BALLSIZE);\n        this.bvx +\u003d var2 * (var6 + 80.0 * this.field_rn_slime_G_2);\n        if(this.bvx \u003c -100.0 * this.field_rn_slime_G_2) {\n            this.bvx \u003d -100.0 * this.field_rn_slime_G_2;\n        } else if(this.bvx \u003e 100.0 * this.field_rn_slime_G_2) {\n            this.bvx \u003d 100.0 * this.field_rn_slime_G_2;\n        }\n        if(this.jumpFlag[var1] \u003d\u003d\u003d 0) {\n            this.bvy \u003d var4 * 80.0 * this.field_rn_slime_G_2;\n        } else {\n            this.bvy \u003d var4 * 10.0 * this.field_rn_slime_G_2;\n        }\n        this.field_rn_slime_bx_5 +\u003d this.bvx * 2.0;\n        this.field_rn_slime_by_6 +\u003d this.bvy * 2.0;\n    }\n\n    HitBall2() {\n        this.bvy \u003d Math.abs(this.bvy);\n    }\n\n    CheckPoint() : number {\n        let var1 : number \u003d 0;\n        if(this.field_rn_slime_by_6 \u003e \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE - this.BALLSIZE)) {\n            if(this.field_rn_slime_bx_5 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) - (this.NETSIZEX / 2|0))) {\n                var1 \u003d 2;\n            } else {\n                var1 \u003d 1;\n            }\n        }\n        return var1;\n    }\n\n    MoveSlime(var1 : number) {\n        let var2 : number \u003d 0;\n        let var3 : number \u003d 0;\n        if(this.jumpFlag[var1] \u003d\u003d\u003d 0) {\n            if(var1 \u003d\u003d\u003d 1) {\n                var2 \u003d this.GetKey();\n                var3 \u003d this.GetJump();\n            } else if(var1 \u003d\u003d\u003d 2) {\n                var2 \u003d this.MoveCom2();\n                var3 \u003d this.ComJump();\n            }\n            this.pvx[var1] \u003d \u003cnumber\u003evar2 * 1.5;\n            this.jumpFlag[var1] \u003d var3;\n            if(var3 \u003d\u003d\u003d 1) {\n                this.pvy[var1] \u003d -80.0 * this.field_rn_slime_G_2;\n            }\n        }\n        this.field_rn_slime_px_3[var1] +\u003d this.pvx[var1];\n        if(var1 \u003d\u003d\u003d 1) {\n            if(this.field_rn_slime_px_3[var1] \u003c \u003cnumber\u003ethis.SLIMESIZE) {\n                this.field_rn_slime_px_3[var1] \u003d \u003cnumber\u003ethis.SLIMESIZE;\n            } else if(this.field_rn_slime_px_3[var1] \u003e \u003cnumber\u003e((this.XSIZE / 2|0) - (this.NETSIZEX / 2|0) - this.SLIMESIZE)) {\n                this.field_rn_slime_px_3[var1] \u003d \u003cnumber\u003e((this.XSIZE / 2|0) - (this.NETSIZEX / 2|0) - this.SLIMESIZE);\n            }\n        } else if(var1 \u003d\u003d\u003d 2) {\n            if(this.field_rn_slime_px_3[var1] \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.NETSIZEX / 2|0) + this.SLIMESIZE)) {\n                this.field_rn_slime_px_3[var1] \u003d \u003cnumber\u003e((this.XSIZE / 2|0) + (this.NETSIZEX / 2|0) + this.SLIMESIZE);\n            } else if(this.field_rn_slime_px_3[var1] \u003e \u003cnumber\u003e(this.XSIZE - this.SLIMESIZE)) {\n                this.field_rn_slime_px_3[var1] \u003d \u003cnumber\u003e(this.XSIZE - this.SLIMESIZE);\n            }\n        }\n        if(this.jumpFlag[var1] \u003d\u003d\u003d 1) {\n            this.field_rn_slime_py_4[var1] +\u003d this.pvy[var1];\n            this.pvy[var1] +\u003d this.field_rn_slime_G_2 * 2.0;\n            if(this.field_rn_slime_py_4[var1] \u003e\u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE)) {\n                this.field_rn_slime_py_4[var1] \u003d \u003cnumber\u003e(this.YSIZE - this.GROUNDSIZE);\n                this.jumpFlag[var1] \u003d 0;\n            }\n        }\n    }\n\n    GetKey() : number {\n        return this.moveX;\n    }\n\n    GetJump() : number {\n        return this.jump;\n    }\n\n    MoveCom() : number {\n        let var1 : number \u003d 0;\n        this.comjump \u003d 0;\n        if(this.field_rn_slime_bx_5 \u003c \u003cnumber\u003e((this.XSIZE / 2|0))) {\n            if(this.field_rn_slime_px_3[2] \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 5|0))) {\n                var1 \u003d 1;\n            } else if(this.field_rn_slime_px_3[2] \u003e \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 5|0))) {\n                var1 \u003d -1;\n            }\n        }\n        if(this.field_rn_slime_bx_5 \u003e \u003cnumber\u003e((this.XSIZE / 2|0) - this.SLIMESIZE * 3)) {\n            let var4 : number \u003d \u003cnumber\u003ethis.YSIZE - \u003cnumber\u003ethis.GROUNDSIZE - this.field_rn_slime_by_6 - \u003cnumber\u003ethis.SLIMESIZE / 1.5;\n            let var6 : number \u003d (Math.sqrt(this.bvy * this.bvy + 2.0 * this.field_rn_slime_G_2 * var4) - this.bvy) / this.field_rn_slime_G_2;\n            let var2 : number \u003d this.field_rn_slime_bx_5 + this.bvx * var6;\n            if(var2 \u003e \u003cnumber\u003ethis.XSIZE) {\n                var2 \u003d 2.0 * \u003cnumber\u003ethis.XSIZE - var2;\n            }\n            if(var2 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 4|0))) {\n                if(Math.abs(this.bvx) \u003c 30.0 * this.field_rn_slime_G_2 \u0026\u0026 this.bvy \u003e (8.0 + (this.field_rn_slime_py_4[2] - this.field_rn_slime_by_6) * 2.0 * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) \u003e \u003cnumber\u003ethis.SLIMESIZE * 2.5) {\n                    this.comjump \u003d 1;\n                    if(this.bvx \u003e 20.0 * this.field_rn_slime_G_2 \u0026\u0026 this.field_rn_slime_px_3[2] \u003c this.field_rn_slime_bx_5 - \u003cnumber\u003ethis.BALLSIZE) {\n                        var1 \u003d 1;\n                    } else if(this.bvx \u003c -20.0 * this.field_rn_slime_G_2 \u0026\u0026 this.field_rn_slime_px_3[2] \u003e this.field_rn_slime_bx_5 + \u003cnumber\u003ethis.BALLSIZE) {\n                        var1 \u003d -1;\n                    } else {\n                        var1 \u003d 0;\n                    }\n                    if(var2 \u003c \u003cnumber\u003e((this.XSIZE / 2|0)) \u0026\u0026 this.jumpFlag[1] \u003d\u003d\u003d 0) {\n                        this.comjump \u003d 0;\n                    }\n                } else if(Math.abs(this.bvx) \u003c 20.0 * this.field_rn_slime_G_2 \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - this.field_rn_slime_py_4[2]) \u003e \u003cnumber\u003ethis.SLIMESIZE * 2.5) {\n                    if(this.field_rn_slime_px_3[2] - \u003cnumber\u003ethis.BALLSIZE \u003c this.field_rn_slime_bx_5) {\n                        var1 \u003d 1;\n                    } else if(this.field_rn_slime_px_3[2] - \u003cnumber\u003ethis.BALLSIZE \u003e this.field_rn_slime_bx_5) {\n                        var1 \u003d -1;\n                    }\n                } else if(this.field_rn_slime_px_3[2] - \u003cnumber\u003e((this.BALLSIZE / 3|0)) \u003c var2) {\n                    var1 \u003d 1;\n                } else if(this.field_rn_slime_px_3[2] - \u003cnumber\u003e((this.BALLSIZE / 3|0)) \u003e var2) {\n                    var1 \u003d -1;\n                } else {\n                    var1 \u003d 0;\n                }\n            } else if(this.field_rn_slime_px_3[2] - \u003cnumber\u003e((this.BALLSIZE / 2|0)) \u003c var2) {\n                var1 \u003d 1;\n            } else if(this.field_rn_slime_px_3[2] - \u003cnumber\u003e((this.BALLSIZE / 2|0)) \u003e var2) {\n                var1 \u003d -1;\n            } else {\n                var1 \u003d 0;\n            }\n        }\n        return var1;\n    }\n\n    ComJump() : number {\n        if(this.comjump \u003d\u003d\u003d 1) {\n            this.comjump \u003d 0;\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    DrawAll() {\n        this.DrawBG();\n        this.DrawSlime(0);\n        this.DrawBall();\n    }\n\n    DrawBG() {\n        let var1 : ShimmedColor \u003d new ShimmedColor(100, 100, 255);\n        this.gra.setColor(var1);\n        this.gra.fillRect(0, 50, this.XSIZE, this.YSIZE - this.GROUNDSIZE - 50);\n        var1 \u003d new ShimmedColor(180, 140, 160);\n        this.gra.setColor(var1);\n        this.gra.fillRect(0, this.YSIZE - this.GROUNDSIZE, this.XSIZE, this.GROUNDSIZE);\n        this.gra.setColor(ShimmedColor.white);\n        this.gra.fillRect((this.XSIZE / 2|0) - (this.NETSIZEX / 2|0), this.YSIZE - this.GROUNDSIZE - this.NETSIZEY, this.NETSIZEX, this.NETSIZEY);\n    }\n\n    DrawSlime(var1 : number) {\n        for(let var10 : number \u003d 1; var10 \u003c\u003d 2; ++var10) {\n            let var2 : number \u003d (\u003cnumber\u003ethis.field_rn_slime_px_3[var10]|0);\n            let var3 : number \u003d (\u003cnumber\u003ethis.field_rn_slime_py_4[var10]|0);\n            if(var10 \u003d\u003d\u003d 1) {\n                this.gra.setColor(ShimmedColor.red);\n            } else if(var10 \u003d\u003d\u003d 2) {\n                this.gra.setColor(ShimmedColor.blue);\n            }\n            this.gra.fillArc(var2 - this.SLIMESIZE, var3 - this.SLIMESIZE, this.SLIMESIZE * 2, this.SLIMESIZE * 2, 0, 180);\n            if(var10 \u003d\u003d\u003d 1) {\n                var2 +\u003d (this.SLIMESIZE / 2|0);\n            } else if(var10 \u003d\u003d\u003d 2) {\n                var2 -\u003d (this.SLIMESIZE / 2|0);\n            }\n            var3 -\u003d (this.SLIMESIZE * 3 / 5|0);\n            this.gra.setColor(ShimmedColor.white);\n            this.gra.fillArc(var2 - this.EYESIZE, var3 - this.EYESIZE, this.EYESIZE * 2, this.EYESIZE * 2, 0, 360);\n            this.gra.setColor(ShimmedColor.black);\n            if(var1 !\u003d\u003d var10) {\n                let var4 : number \u003d this.field_rn_slime_bx_5 - \u003cnumber\u003evar2;\n                let var6 : number \u003d this.field_rn_slime_by_6 - \u003cnumber\u003evar3;\n                let var8 : number \u003d Math.sqrt(var4 * var4 + var6 * var6);\n                var2 +\u003d (\u003cnumber\u003e(var4 * \u003cnumber\u003e(this.BLACKEYESIZE + 1) / var8)|0);\n                var3 +\u003d (\u003cnumber\u003e(var6 * \u003cnumber\u003e(this.BLACKEYESIZE + 1) / var8)|0);\n                this.gra.fillArc(var2 - this.BLACKEYESIZE, var3 - this.BLACKEYESIZE, this.BLACKEYESIZE * 2, this.BLACKEYESIZE * 2, 0, 360);\n            } else {\n                this.gra.drawLine(var2 - this.EYESIZE + 2, var3 - this.EYESIZE + 2, var2 + this.EYESIZE - 2, var3 + this.EYESIZE - 2);\n                this.gra.drawLine(var2 - this.EYESIZE + 2, var3 + this.EYESIZE - 2, var2 + this.EYESIZE - 2, var3 - this.EYESIZE + 2);\n            }\n        };\n    }\n\n    DrawBall() {\n        this.gra.setColor(ShimmedColor.yellow);\n        this.gra.fillArc((\u003cnumber\u003ethis.field_rn_slime_bx_5|0) - this.BALLSIZE, (\u003cnumber\u003ethis.field_rn_slime_by_6|0) - this.BALLSIZE, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n    }\n\n    DrawScore() {\n        this.gra.setColor(new ShimmedColor(100, 100, 255));\n        this.gra.fillRect(0, 0, this.XSIZE, 50);\n        this.gra.setColor(ShimmedColor.white);\n        this.gra.setFont(new ShimmedFont(\"TimesRoman\", 1, 28));\n        this.gra.drawString(\"RED \", 30, 46);\n        this.gra.drawString(\"BLUE\", 30 + (this.XSIZE / 2|0), 46);\n        this.gra.setColor(ShimmedColor.yellow);\n        for(let var1 : number \u003d 1; var1 \u003c\u003d this.WINSCORE; ++var1) {\n            if(this.score[1] \u003c var1) {\n                this.gra.drawArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            } else {\n                this.gra.fillArc(80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            }\n            if(this.score[2] \u003c var1) {\n                this.gra.drawArc((this.XSIZE / 2|0) + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            } else {\n                this.gra.fillArc((this.XSIZE / 2|0) + 80 + var1 * this.BALLSIZE * 3, 26, this.BALLSIZE * 2, this.BALLSIZE * 2, 0, 360);\n            }\n        };\n    }\n\n    MoveCom2() : number {\n        let var3 : number \u003d 0;\n        let var4 : boolean \u003d false;\n        let var23 : number \u003d \u003cnumber\u003ethis.YSIZE - \u003cnumber\u003ethis.GROUNDSIZE - this.field_rn_slime_by_6 - \u003cnumber\u003ethis.SLIMESIZE;\n        let var25 : number \u003d (Math.sqrt(this.bvy * this.bvy + 2.0 * this.field_rn_slime_G_2 * var23) - this.bvy) / this.field_rn_slime_G_2;\n        let var21 : number \u003d this.field_rn_slime_bx_5 + this.bvx * var25;\n        if(var21 \u003e \u003cnumber\u003ethis.XSIZE) {\n            var21 \u003d 2.0 * \u003cnumber\u003ethis.XSIZE - var21;\n        }\n        if(var21 \u003c 0.0) {\n            var21 \u003d -var21;\n        }\n        let var5 : number \u003d this.field_rn_slime_px_3[1];\n        let var7 : number \u003d this.field_rn_slime_px_3[2];\n        let var13 : number \u003d this.field_rn_slime_py_4[1];\n        let var15 : number \u003d this.field_rn_slime_py_4[2];\n        let var1 : number \u003d this.jumpFlag[1];\n        let var2 : number \u003d this.jumpFlag[2];\n        let var29 : number \u003d this.bvx;\n        let var31 : number \u003d this.bvy + this.field_rn_slime_G_2 * var25;\n        let var33 : number \u003d Math.sqrt(var29 * var29 * var31 * var31);\n        if(var7 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 5|0))) {\n            var3 \u003d 1;\n        } else if(var7 \u003e \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 5|0))) {\n            var3 \u003d -1;\n        }\n        let var9 : number \u003d \u003cnumber\u003e(this.SLIMESIZE + this.BALLSIZE) * this.bvx / (var33 + 80.0 * this.field_rn_slime_G_2);\n        if(var21 \u003e \u003cnumber\u003e((this.XSIZE / 2|0) - this.SLIMESIZE * 2)) {\n            if(var21 \u003e \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 4|0))) {\n                if(var21 + var9 + \u003cnumber\u003e((this.BALLSIZE / 2|0)) \u003e var7) {\n                    var3 \u003d 1;\n                } else if(var21 + var9 + \u003cnumber\u003e((this.BALLSIZE / 2|0)) \u003c var7) {\n                    var3 \u003d -1;\n                } else {\n                    var3 \u003d 0;\n                }\n            } else if(Math.abs(this.bvx) \u003c 30.0 * this.field_rn_slime_G_2) {\n                if(var5 \u003c \u003cnumber\u003e((this.XSIZE / 3|0)) \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - var15) \u003e \u003cnumber\u003ethis.SLIMESIZE * 2.5) {\n                    if(this.field_rn_slime_bx_5 + \u003cnumber\u003ethis.BALLSIZE + this.bvx * 10.0 \u003e var7) {\n                        var3 \u003d 1;\n                    } else if(this.field_rn_slime_bx_5 + \u003cnumber\u003ethis.BALLSIZE + this.bvx * 10.0 \u003c var7) {\n                        var3 \u003d -1;\n                    } else {\n                        var3 \u003d 0;\n                    }\n                } else if(var21 + var9 + \u003cnumber\u003e(this.BALLSIZE * 2) \u003e var7) {\n                    var3 \u003d 1;\n                } else if(var21 + var9 + \u003cnumber\u003e(this.BALLSIZE * 2) \u003c var7) {\n                    var3 \u003d -1;\n                } else {\n                    var3 \u003d 0;\n                }\n            } else if(var21 + var9 + \u003cnumber\u003e((this.BALLSIZE / 6|0)) \u003e var7) {\n                var3 \u003d 1;\n            } else if(var21 + var9 + \u003cnumber\u003e((this.BALLSIZE / 6|0)) \u003c var7) {\n                var3 \u003d -1;\n            } else {\n                var3 \u003d 0;\n            }\n            if(this.field_rn_slime_bx_5 \u003c \u003cnumber\u003e((this.XSIZE / 2|0)) \u0026\u0026 Math.abs(var5 - this.field_rn_slime_bx_5) \u003c \u003cnumber\u003ethis.SLIMESIZE \u0026\u0026 var1 !\u003d\u003d 0 \u0026\u0026 var7 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 4|0)) \u0026\u0026 this.field_rn_slime_bx_5 \u003e \u003cnumber\u003e((this.XSIZE / 3|0))) {\n                var3 \u003d -1;\n                var4 \u003d true;\n            }\n            if(Math.abs(this.bvx) \u003c 25.0 * this.field_rn_slime_G_2 \u0026\u0026 this.bvy \u003e (8.0 + (var15 - this.field_rn_slime_by_6) * 2.0 * this.field_rn_slime_G_2) * this.field_rn_slime_G_2 \u0026\u0026 Math.abs(this.field_rn_slime_by_6 - var15) \u003e \u003cnumber\u003ethis.SLIMESIZE * 2.5 \u0026\u0026 var7 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 4|0)) \u0026\u0026 this.bvx * 20.0 + this.field_rn_slime_bx_5 \u003c var7 + \u003cnumber\u003ethis.BALLSIZE \u0026\u0026 this.bvx * 20.0 + this.field_rn_slime_bx_5 \u003e var7 - \u003cnumber\u003ethis.SLIMESIZE) {\n                if(var5 \u003c \u003cnumber\u003ethis.XSIZE / 2.7) {\n                    var4 \u003d true;\n                    var3 \u003d 0;\n                } else if(var1 \u003d\u003d\u003d 1) {\n                    var4 \u003d true;\n                    var3 \u003d 0;\n                }\n            }\n        }\n        var9 \u003d var7 - \u003cnumber\u003ethis.SLIMESIZE * 1.5 - this.field_rn_slime_bx_5;\n        if(var9 \u003e 0.0 \u0026\u0026 var7 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + (this.XSIZE / 4|0))) {\n            var25 \u003d var9 / this.bvx;\n            let var17 : number \u003d this.field_rn_slime_by_6 + var25 * this.bvy + this.field_rn_slime_G_2 * var25 * var25 / 2.0;\n            if(var17 \u003e var15 - \u003cnumber\u003ethis.NETSIZEY - \u003cnumber\u003ethis.SLIMESIZE * 1.5 \u0026\u0026 var17 \u003c var15 - \u003cnumber\u003ethis.NETSIZEY) {\n                if(var25 \u003e 20.0 \u0026\u0026 var25 \u003c 30.0) {\n                    let var11 : number \u003d var9 - 60.0;\n                    if(var11 \u003e 0.0 \u0026\u0026 var7 \u003c \u003cnumber\u003e((this.XSIZE / 2|0) + this.XSIZE + 4) + 60.0) {\n                        let var27 : number \u003d var11 / this.bvx;\n                        let var19 : number \u003d this.field_rn_slime_by_6 + var27 * this.bvy + this.field_rn_slime_G_2 * var27 * var27 / 2.0;\n                        if(var19 \u003e var15 - \u003cnumber\u003ethis.NETSIZEY - \u003cnumber\u003ethis.SLIMESIZE * 1.5 \u0026\u0026 var19 \u003c var15 - \u003cnumber\u003ethis.NETSIZEY \u0026\u0026 var27 \u003e 13.0 \u0026\u0026 var27 \u003c 15.0) {\n                            var3 \u003d -1;\n                            var4 \u003d true;\n                        }\n                    } else {\n                        var3 \u003d -1;\n                    }\n                } else if(var25 \u003e 7.0 \u0026\u0026 var25 \u003c 10.0) {\n                    var3 \u003d 0;\n                    var4 \u003d true;\n                }\n            }\n        }\n        if(this.comserv !\u003d\u003d 0) {\n            switch((this.comserv)) {\n            case 1:\n                if(var21 + \u003cnumber\u003e(this.BALLSIZE * 2) \u003c var7) {\n                    var3 \u003d -1;\n                } else if(var21 + \u003cnumber\u003e(this.BALLSIZE * 2) \u003e var7) {\n                    var3 \u003d 1;\n                } else {\n                    var3 \u003d 0;\n                }\n                break;\n            case 2:\n                if(var21 + \u003cnumber\u003ethis.BALLSIZE * 2.5 \u003c var7) {\n                    var3 \u003d -1;\n                } else if(var21 + \u003cnumber\u003ethis.BALLSIZE * 2.5 \u003e var7) {\n                    var3 \u003d 1;\n                } else {\n                    var3 \u003d 0;\n                }\n            case 3:\n            default:\n                break;\n            case 4:\n                if(var21 - \u003cnumber\u003ethis.BALLSIZE \u003c var7) {\n                    var3 \u003d -1;\n                } else if(var21 - \u003cnumber\u003ethis.BALLSIZE \u003e var7) {\n                    var3 \u003d 1;\n                } else {\n                    var3 \u003d 0;\n                }\n            }\n        }\n        if(var4 \u0026\u0026 this.comserv \u003d\u003d\u003d 0) {\n            this.comjump \u003d 1;\n        }\n        return var3;\n    }\n\n    constructor() {\n        super();\n        this.field_rn_slime_th_1 \u003d null;\n        this.gra \u003d null;\n        this.XSIZE \u003d 0;\n        this.YSIZE \u003d 0;\n        this.SLIMESIZE \u003d 0;\n        this.BALLSIZE \u003d 0;\n        this.NETSIZEX \u003d 0;\n        this.NETSIZEY \u003d 0;\n        this.GROUNDSIZE \u003d 0;\n        this.EYESIZE \u003d 0;\n        this.BLACKEYESIZE \u003d 0;\n        this.WINSCORE \u003d 0;\n        this.field_rn_slime_G_2 \u003d 0;\n        this.comLevel \u003d 0;\n        this.paintFlag \u003d 0;\n        this.comserv \u003d 0;\n        this.field_rn_slime_bx_5 \u003d 0;\n        this.field_rn_slime_by_6 \u003d 0;\n        this.bvx \u003d 0;\n        this.bvy \u003d 0;\n        this.service \u003d 0;\n        this.moveX \u003d 0;\n        this.jump \u003d 0;\n        this.comjump \u003d 0;\n        this.mDown \u003d 0;\n    }\n}\nslime[\"__class\"] \u003d \"slime\";\nslime[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\n\n\n\nclass ShimmedBufferedImage extends ShimmedImage {\n    public constructor(x : number, y : number, z : number) {\n        super();\n    }\n\n    public getSubimage(a : number, b : number, c : number, d : number) : ShimmedBufferedImage {\n        return null;\n    }\n}\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\n\n\nclass ShimmedFrame extends ShimmedElement {\n    public setTitle(s : string) {\n    }\n\n    public pack() {\n    }\n\n    public show() {\n    }\n\n    public dispose() {\n    }\n\n    public setLayout(g : ShimmedGridLayout) {\n    }\n}\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\n\n\nclass ShimmedTextField extends ShimmedElement {\n    public constructor(s : number) {\n        super();\n    }\n\n    public getText() : string {\n        return null;\n    }\n}\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\n\n\nclass ShimmedButton extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\n\n\nclass ShimmedPanel extends ShimmedElement {}\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\n\n\nclass ShimmedLabel extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n\n\n\n",
  "packageName": "_"
}