public class ShimmedSize {
	public int width;
	public int height;
}
public class ShimmedApplet {
	public ShimmedSize size() { return null; }
	public ShimmedImage createImage(int x, int y) { return null; }
	public void showStatus(String s) {}
	public void repaint() {}
	public ShimmedGraphics getGraphics() { return null; }
	public void requestFocus() {}
	public int getWidth() { return 0; }
	public int getHeight() { return 0; }
	public ShimmedDocumentBase getDocumentBase() { return null; }
	public ShimmedAppletContext getAppletContext() { return null; }
	public ShimmedURL getCodeBase() { return null; }
	public ShimmedAudioClip getAudioClip(ShimmedURL u, String s) { return null; }
	public ShimmedImage getImage(ShimmedURL u, String s) { return null; }
}
public class ShimmedColor {
	public static ShimmedColor yellow = null;
	public static ShimmedColor black = null;
	public static ShimmedColor red = null;
	public static ShimmedColor gray = null;
	public static ShimmedColor white = null;
	public static ShimmedColor blue = null;
	public static ShimmedColor green = null;
	public static ShimmedColor pink = null;
	public static ShimmedColor cyan = null;
	public static ShimmedColor lightGray = null;
	public static ShimmedColor darkGray = null;
	public static ShimmedColor orange = null;
	public ShimmedColor(int r, int g, int b) {}
}
public class ShimmedGraphics {
	public ShimmedFont getFont() { return null; }
	public void setFont(ShimmedFont f) {}
	public void setColor(ShimmedColor c) {}
	public void fillRect(int x, int y, int w, int h) {}
	public ShimmedFontMetrics getFontMetrics() { return null; }
	public void drawString(String s, int x, int y) {}
	public void drawImage(ShimmedImage i, int x, int y, Object o) {}
	public void drawOval(int x, int y, int w, int h) {}
	public void fillOval(int x, int y, int w, int h) {}
	public void fillArc(int x, int y, int w, int h, int s, int e) {}
	public void drawLine(int x, int y, int w, int h) {}
	public void drawRect(int x, int y, int w, int h) {}
	public void fillPolygon(int[] xs, int[] ys, int n) {}
	public void fillPolygon(ShimmedPolygon p) {}
	public void drawArc(int x, int y, int w, int h, int s, int e) {}
}
public class ShimmedImage {
	public ShimmedGraphics getGraphics() { return null; }
	public int getHeight(ShimmedApplet a) { return 0; }
}
public class ShimmedEvent {
	public int id;
	public int x;
	public int y;
	public int key;
	public ShimmedButton target;
	public static final int KEY_ACTION = 0;
	public static final int LEFT = 1;
	public static final int RIGHT = 2;
	public static final int UP = 3;
	public static final int DOWN = 4;
	public static final int KEY_ACTION_RELEASE = 5;
}
public class ShimmedFont {
	public String getName() { return null; }
	public ShimmedFont(String name, int w, int h) {}
}
public class ShimmedFontMetrics {
	public int getHeight() { return 0; }
	public int stringWidth(String s) { return 0; }
	public int getAscent() { return 0; }
}
public class ShimmedThread {
    public static void sleep(long ms) {}
    public static void sleep(long ms, boolean b) {}
    public ShimmedThread(ShimmedRunnable r) {}
    public void start() {}
    public void stop() {}
}
public interface ShimmedRunnable {}

public class ShimmedAppletContext {
	public void showDocument(ShimmedURL u) {}
	public void showDocument(ShimmedURL u, String s) {}
}
public class ShimmedDocumentBase {
	public String getHost() { return null; }
}
public class ShimmedURL { 
	public ShimmedURL(String s) {}
	public ShimmedInputStream openStream() { return null; }
}
public class ShimmedPrintStream {
	public Object print(Object s) { return null; }
	public Object println() { return null; }
	public Object println(Object s) { return null; }
}
public class ShimmedSystem {
	public static ShimmedPrintStream out = null;
	public static long currentTimeMillis() { return 0L; }
}
public class ShimmedBufferedImage extends ShimmedImage {
	public ShimmedBufferedImage(int x, int y, int z) {}
	public ShimmedBufferedImage getSubimage(int a, int b, int c, int d) { return null; }
}
public class ShimmedVector {
	public ShimmedVector(int n) {}
	public void removeAllElements() {}
	public Object get(int i) { return null; }
	public int size() { return 0; }
	public void add(int[] x) {}
}
public class ShimmedElement {
	public void add(ShimmedElement e) {}
}
public class ShimmedFrame extends ShimmedElement {
	public void setTitle(String s) {}
	public void pack() {}
	public void show() {}
	public void dispose() {}
	public void setLayout(ShimmedGridLayout g) {}
}
public class ShimmedTextField extends ShimmedElement {
	public ShimmedTextField(int s) {}
	public String getText() { return null; }
}
public class ShimmedButton extends ShimmedElement {
	public ShimmedButton(String s) {}
}
public class ShimmedPolygon {
	public ShimmedPolygon(int[] xs, int[] ys, int n) {}
}
public class ShimmedInputStream {
	public void close() {}
}
public class ShimmedBufferedReader {
	public ShimmedBufferedReader(ShimmedInputStreamReader i) {}
	public String readLine() { return null; }
	public void close() {}
}
public class ShimmedInputStreamReader {
	public ShimmedInputStreamReader(ShimmedInputStream is) {}
}
public class ShimmedPanel extends ShimmedElement {
}
public class ShimmedLabel extends ShimmedElement {
	public ShimmedLabel(String s) {}
}
public class ShimmedGridLayout {
	public ShimmedGridLayout(int x, int y) {}
}
public class ShimmedLong {
	public static long parseLong(String s) { return 0L; }
}
public class ShimmedChars {
	/** Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints. */
	public static char[] charCodeArray(String s) { return null; }
}
public class ShimmedImageObserver {

}
public class ShimmedRandom {
	public int nextInt(int m) { return 0; }
}
public class ShimmedAudioClip {
	public void play() {}
}
public class ShimmedStringBuffer {
	public ShimmedStringBuffer() {}
	public ShimmedStringBuffer(Object i) {}
	public ShimmedStringBuffer append(Object s) { return null; }
}

public class EndOfShimDeclarations{}

public class Slime2P extends ShimmedApplet implements ShimmedRunnable {
   private int nWidth;
   private int nHeight;
   private int p1X;
   private int p1Y;
   private int p2X;
   private int p2Y;
   private int p1Col;
   private int p2Col;
   private int p1OldX;
   private int p1OldY;
   private int p2OldX;
   private int p2OldY;
   private int p1XV;
   private int p1YV;
   private int p2XV;
   private int p2YV;
   private int ballX;
   private int ballY;
   private int ballVX;
   private int ballVY;
   private int ballOldX;
   private int ballOldY;
   private ShimmedGraphics screen;
   private String promptMsg;
   private int[][] replayData;
   private int replayPos;
   private int replayStart;
   private boolean mousePressed;
   private boolean fInPlay;
   private int p1Blink;
   private int p2Blink;
   private boolean fP1Fire;
   private boolean fP2Fire;
   private boolean superFlash;
   private boolean fP1Touched;
   private boolean fP2Touched;
   private int fP1Touches;
   private int fP2Touches;
   private int fP1TouchesTot;
   private int fP2TouchesTot;
   private int fP1Clangers;
   private int fP2Clangers;
   private int fP1Aces;
   private int fP2Aces;
   private int fP1Winners;
   private int fP2Winners;
   private int fP1PointsWon;
   private int fP2PointsWon;
   private boolean fP1HitStill;
   private boolean fP2HitStill;
   private long fP1Frames;
   private long fP2Frames;
   private int fP1Super;
   private int fP2Super;
   private int fP1Streak;
   private int fP2Streak;
   private boolean fSelectedColours;
   private boolean fServerMoved;
   private boolean hitNetSinceTouched;
   private ShimmedThread gameThread;
   private boolean fEndGame;
   private long startTime;
   private long gameTime;
   private long realStartTime;
   private long crossedNetTime;
   private int scoringRun;
   private int oldScoringRun;
   private final int scoringRunForSuper = 6;
   private String[] slimeColText;
   private ShimmedColor[] slimeColours;
   private ShimmedColor[] slimeColours2;
   private ShimmedColor SKY_COL;
   private ShimmedColor COURT_COL;
   private ShimmedColor BALL_COL;
   private boolean nightTime = false;
   private boolean psycho = false;
   private boolean backwards = false;
   private boolean timer = false;
   private boolean buffered = false;
   // $FF: renamed from: pw char[]
   private char[] field_rn_Slime2P_pw_1;
   private String nyt = "night";
   private String psy = "super";
   private String bck = "toast";
   private String tim = "clock";
   private String wnd = "windy";
   private String hl2 = "2mins";
   private String hl3 = "3mins";
   private String hl4 = "4mins";
   private String hl5 = "5mins";
   private String bfr = "uffer";
   private long GAME_LENGTH = 120000L;
   private boolean holdingOn = false;
   private final long HOLDING_LENGTH = 5000L;
   private boolean firstHalf;
   private boolean windOn = false;
   private int wind;
   private final int maxWind = 30;
   private int NUM_PARTICLES = 60;
   private int particle_size = 3;
   private int[] particle_x;
   private int[] particle_y;
   private float[] particle_weight;
   private int floor;
   private ShimmedImage buffer;
   private ShimmedFont baseFont;

   public Slime2P() {
      this.particle_x = new int[this.NUM_PARTICLES];
      this.particle_y = new int[this.NUM_PARTICLES];
      this.particle_weight = new float[this.NUM_PARTICLES];
      this.floor = 280;
   }

   public void init() {
      String var1 = this.getDocumentBase().getHost();
      if(!var1.equals("footyslime.com")) {
         try {
            this.getAppletContext().showDocument(new ShimmedURL("http://footyslime.com/"), "_self");
         } catch (Exception var6) {
            ShimmedSystem.out.println("Couldn\'t initialise!");
            throw new RuntimeException("Couldn\'t initialise!");
         }
      }

      this.SKY_COL = new ShimmedColor(85, 85, 255);
      this.COURT_COL = new ShimmedColor(0, 168, 0);
      this.BALL_COL = ShimmedColor.yellow;
      this.nWidth = this.size().width;
      this.nHeight = this.size().height;
      this.fInPlay = this.fEndGame = false;
      this.promptMsg = "Click the mouse to play...";
      this.screen = this.getGraphics();
      this.baseFont = this.screen.getFont();
      this.screen.setFont(new ShimmedFont(this.baseFont.getName(), 1, 15));
      this.replayData = new int[200][6];
      this.firstHalf = true;
      int var2 = this.nWidth / 10;
      int var3 = 2 * this.nHeight / 10;

      for(int var4 = 0; var4 < this.NUM_PARTICLES; ++var4) {
         this.particle_x[var4] = (int)(Math.random() * (double)this.nWidth);
         this.particle_y[var4] = (int)(-Math.random() * 50.0D);
         this.particle_weight[var4] = (float)(Math.random() * 0.95D + 0.05D);
      }

      this.slimeColText = new String[]{"Bronco Slime ", "Canterbury Bullslime ", "Cowboy Slime ", "Dragon McSlimer ", "Slimy Eel Slime ", "Knight Slimer ", "Panther Slime ", "Rabbitoh Slime ", "Raider of the Lost Slime ", "Rooster Slime ", "Womanly Slime ", "Shark Slime ", "Stormy Slime ", "Tiger Slime ", "Warrior Slime "};
      this.slimeColours = new ShimmedColor[]{new ShimmedColor(96, 10, 44), ShimmedColor.white, ShimmedColor.white, ShimmedColor.white, ShimmedColor.yellow, new ShimmedColor(0, 48, 149), ShimmedColor.black, new ShimmedColor(140, 78, 0), new ShimmedColor(167, 216, 11), new ShimmedColor(23, 33, 86), new ShimmedColor(106, 10, 35), new ShimmedColor(0, 173, 227), new ShimmedColor(117, 22, 158), new ShimmedColor(25, 25, 25), new ShimmedColor(48, 34, 37)};
      this.slimeColours2 = new ShimmedColor[]{new ShimmedColor(231, 155, 36), new ShimmedColor(0, 34, 135), new ShimmedColor(6, 40, 79), new ShimmedColor(185, 0, 0), new ShimmedColor(0, 30, 76), new ShimmedColor(237, 37, 64), new ShimmedColor(0, 133, 152), new ShimmedColor(225, 8, 30), new ShimmedColor(0, 35, 154), ShimmedColor.red, ShimmedColor.white, new ShimmedColor(31, 28, 28), new ShimmedColor(161, 161, 162), new ShimmedColor(255, 135, 10), new ShimmedColor(212, 211, 205)};
      this.field_rn_Slime2P_pw_1 = ".....".toCharArray();
      this.buffer = this.createImage(this.nWidth, this.nHeight);
      if(this.buffered) {
         this.buffered = false;

         for(int var5 = 0; var5 < this.bfr.length(); ++var5) {
            this.pwAddChar(this.bfr.toCharArray()[var5]);
         }
      }

   }

   public void paint(ShimmedGraphics var1) {
      ShimmedGraphics var2 = this.buffered?this.buffer.getGraphics():this.getGraphics();
      var2.setColor(this.SKY_COL);
      var2.fillRect(0, 0, this.nWidth, 4 * this.nHeight / 5);
      var2.setColor(this.COURT_COL);
      var2.fillRect(0, 4 * this.nHeight / 5, this.nWidth, this.nHeight / 5);
      var2.setColor(ShimmedColor.white);
      var2.fillRect(this.nWidth / 2 - 2, 7 * this.nHeight / 10, 4, this.nHeight / 10 + 5);
      this.drawScores();
      this.drawPrompt();
      if(!this.fInPlay) {
         ShimmedFontMetrics var3 = this.screen.getFontMetrics();
         this.screen.setColor(ShimmedColor.white);
         if(this.fP1PointsWon + this.fP2PointsWon > 0) {
            if(this.firstHalf) {
               this.screen.drawString("NRL Slime Volleyball!", this.nWidth / 2 - var3.stringWidth("NRL Slime Volleyball!") / 2, this.nHeight / 2 - var3.getHeight() * 5);
            }

            var2.setColor(ShimmedColor.white);
            var3 = var2.getFontMetrics();
            if(!this.firstHalf) {
               var2.drawString("First half stats:", this.nWidth / 2 - var3.stringWidth("First half stats:") / 2, this.nHeight / 2 - var3.getHeight() * 4);
            } else {
               var2.drawString("Last game\'s stats:", this.nWidth / 2 - var3.stringWidth("Last game\'s stats:") / 2, this.nHeight / 2 - var3.getHeight() * 4);
            }

            String[] var4 = new String[]{"Possession", "Touches", "Points won", "Winners", "Aces", "Clangers", "Super Slimes", "Longest streak"};
            String[][] var5 = new String[][]{{"" + 100L * this.fP1Frames / (this.fP1Frames + this.fP2Frames) + "%", "" + this.fP1TouchesTot, "" + this.fP1PointsWon, "" + this.fP1Winners, "" + this.fP1Aces, "" + this.fP1Clangers, "" + this.fP1Super, "" + this.fP1Streak}, {"" + (100L - 100L * this.fP1Frames / (this.fP1Frames + this.fP2Frames)) + "%", "" + this.fP2TouchesTot, "" + this.fP2PointsWon, "" + this.fP2Winners, "" + this.fP2Aces, "" + this.fP2Clangers, "" + this.fP2Super, "" + this.fP2Streak}};
            int var6 = 0;

            for(int var7 = 0; var7 < var4.length; ++var7) {
               var6 = Math.max(var6, var3.stringWidth(var4[var7]));
            }

            for(int var8 = 0; var8 < var4.length; ++var8) {
               var2.drawString(var4[var8], this.nWidth / 2 - var3.stringWidth(var4[var8]) / 2, this.nHeight / 2 + var3.getHeight() * (var8 - 2));
               var2.drawString(var5[0][var8], this.nWidth / 2 - var6 - var3.stringWidth(var5[0][var8]) / 2, this.nHeight / 2 + var3.getHeight() * (var8 - 2));
               var2.drawString(var5[1][var8], this.nWidth / 2 + var6 - var3.stringWidth(var5[1][var8]) / 2, this.nHeight / 2 + var3.getHeight() * (var8 - 2));
            }

            this.drawPrompt(!this.firstHalf?"Swap sides and click the mouse to continue...":"Click the mouse to start another game!", 0);
         } else {
            this.screen.drawString("NRL Slime Volleyball!", this.nWidth / 2 - var3.stringWidth("NRL Slime Volleyball!") / 2, this.nHeight / 2 - var3.getHeight());
            var2.setColor(ShimmedColor.white);
            var3 = var2.getFontMetrics();
            var2.drawString("Code base by Quin Pendragon", this.nWidth / 2 - var3.stringWidth("Code base by Quin Pendragon") / 2, this.nHeight / 2 + var3.getHeight() * 2);
            var2.drawString("Mod by Daniel Wedge", this.nWidth / 2 - var3.stringWidth("Mod by Daniel Wedge") / 2, this.nHeight / 2 + var3.getHeight() * 3);
            var2.drawString("Wind particles by Tim Lightfoot", this.nWidth / 2 - var3.stringWidth("Wind particles by Tim Lightfoot") / 2, this.nHeight / 2 + var3.getHeight() * 4);
         }
      }

      if(this.buffered) {
         var1.drawImage(this.buffer, 0, 0, this);
      }

   }

   public boolean handleEvent(ShimmedEvent var1) {
      switch(var1.id) {
      case 401:
      case 403:
         if(!this.fEndGame) {
            if(!this.fSelectedColours) {
               this.pwAddChar((char)var1.key);
            }

            switch(var1.key) {
            case 32:
               this.mousePressed = true;
               break;
            case 65:
            case 97:
               if(!this.backwards) {
                  this.moveP1Left();
               } else {
                  this.moveP1Right();
               }
               break;
            case 68:
            case 100:
               if(!this.backwards) {
                  this.moveP1Right();
               } else {
                  this.moveP1Left();
               }
               break;
            case 73:
            case 105:
               this.moveP2Jump();
               break;
            case 74:
            case 106:
               if(!this.backwards) {
                  this.moveP2Left();
               } else {
                  this.moveP2Right();
               }
               break;
            case 75:
            case 107:
               if(!this.fSelectedColours) {
                  this.changeP2Col();
               }
               break;
            case 76:
            case 108:
               if(!this.backwards) {
                  this.moveP2Right();
               } else {
                  this.moveP2Left();
               }
               break;
            case 83:
            case 115:
               if(!this.fSelectedColours) {
                  this.changeP1Col();
               }
               break;
            case 87:
            case 119:
               this.moveP1Jump();
            }
         }
         break;
      case 402:
      case 404:
         switch(var1.key) {
         case 65:
         case 97:
            if(this.p1XV * (this.backwards?-1:1) < 0) {
               this.moveP1Stop();
            }

            return false;
         case 68:
         case 100:
            if(this.p1XV * (this.backwards?-1:1) > 0) {
               this.moveP1Stop();
            }

            return false;
         case 74:
         case 106:
            if(this.p2XV * (this.backwards?-1:1) < 0) {
               this.moveP2Stop();
            }

            return false;
         case 76:
         case 108:
            if(this.p2XV * (this.backwards?-1:1) > 0) {
               this.moveP2Stop();
            }

            return false;
         default:
            return false;
         }
      case 501:
         this.mousePressed = true;
         if(!this.fInPlay) {
            this.fEndGame = false;
            this.fInPlay = true;
            this.p1X = 200;
            this.p1Y = 0;
            this.p2X = 800;
            this.p2Y = 0;
            this.p1XV = 0;
            this.p1YV = 0;
            this.p2XV = 0;
            this.p2YV = 0;
            this.ballX = 200;
            this.ballY = 400;
            this.ballVX = 0;
            this.ballVY = 0;
            this.hitNetSinceTouched = false;
            this.promptMsg = "";
            this.repaint();
            this.gameThread = new ShimmedThread(this);
            this.gameThread.start();
         } else if(!this.fSelectedColours) {
            this.fInPlay = true;
            this.replayStart = 0;
            this.replayPos = 0;
            this.p1X = 200;
            this.p1Y = 0;
            this.p2X = 800;
            this.p2Y = 0;
            this.p1XV = 0;
            this.p1YV = 0;
            this.p2XV = 0;
            this.p2YV = 0;
            this.ballX = 200;
            this.ballY = 400;
            this.ballVX = 0;
            this.ballVY = 0;
            this.hitNetSinceTouched = false;
            this.promptMsg = "";
            this.fP1Touched = false;
            this.fP2Touched = false;
            this.fServerMoved = false;
            this.drawPrompt();
            this.DrawStatus();
            this.repaint();
            this.startTime = ShimmedSystem.currentTimeMillis();
            this.realStartTime = this.startTime;
            this.fSelectedColours = true;
         }
         break;
      case 503:
         this.showStatus("NRL Slime Volleyball: http://footyslime.com/nrl/");
      }

      return false;
   }

   private void pwAddChar(char var1) {
      for(int var2 = 0; var2 < 4; this.field_rn_Slime2P_pw_1[var2++] = this.field_rn_Slime2P_pw_1[var2]) {
         ;
      }

      this.field_rn_Slime2P_pw_1[4] = var1;
      String var3 = (new String(this.field_rn_Slime2P_pw_1)).toLowerCase();
      boolean var4 = false;
      if(var3.equals(this.nyt)) {
         var4 = true;
         this.nightTime = !this.nightTime;
         this.SKY_COL = this.nightTime?new ShimmedColor(0, 0, 70):new ShimmedColor(85, 85, 255);
         this.COURT_COL = this.nightTime?new ShimmedColor(0, 100, 0):new ShimmedColor(0, 168, 0);
         this.BALL_COL = this.nightTime?ShimmedColor.white:ShimmedColor.yellow;
         this.repaint();
         this.promptMsg = this.nightTime?"... and the lights come on at Slime Stadium!":"The Slime Sun has risen!";
      } else if(var3.equals(this.psy)) {
         var4 = true;
         this.psycho = !this.psycho;
         this.promptMsg = this.psycho?"Can\'t get to the ball fast enough?":"Can\'t handle the pace?";
      } else if(var3.equals(this.bck)) {
         var4 = true;
         this.backwards = !this.backwards;
         this.promptMsg = this.backwards?"Slime God Clive blesses you!":"Don\'t like challenges, huh?";
      } else if(var3.equals(this.tim)) {
         var4 = true;
         this.timer = !this.timer;
         this.promptMsg = this.timer?"Don\'t like the uncertainty of time on? Pathetic.":"Welcome back from the other side.";
      } else if(var3.equals(this.wnd)) {
         var4 = true;
         this.windOn = !this.windOn;
         this.promptMsg = !this.windOn?"Can\'t handle the challenge?":"Yeah, wind is good.";
         if(!this.windOn) {
            this.unDrawParticles();
         }
      } else if(var3.equals(this.bfr)) {
         var4 = true;
         this.buffered = !this.buffered;
         this.screen = this.buffered?this.buffer.getGraphics():this.getGraphics();
         this.screen.setFont(new ShimmedFont(this.baseFont.getName(), 1, 15));
         if(this.fInPlay) {
            this.promptMsg = this.buffered?"Double buffering is on.":"Do not adjust your set... the Slimes are flickery.";
         }
      } else if(var3.equals(this.hl2)) {
         var4 = true;
         this.GAME_LENGTH = 120000L;
         this.promptMsg = "Halves now two minutes long.";
      } else if(var3.equals(this.hl3)) {
         var4 = true;
         this.GAME_LENGTH = 180000L;
         this.promptMsg = "Halves now three minutes long.";
      } else if(var3.equals(this.hl4)) {
         var4 = true;
         this.GAME_LENGTH = 240000L;
         this.promptMsg = "Halves now four minutes long.";
      } else if(var3.equals(this.hl5)) {
         var4 = true;
         this.GAME_LENGTH = 300000L;
         this.promptMsg = "Halves now five minutes long.";
      }

      if(var4) {
         this.fServerMoved = true;
         this.drawPrompt();
      }

   }

   public void moveP1Left() {
      this.p1XV = this.scoringRun > -6 && !this.psycho?-8:-16;
      if(this.p1X == 200 && this.ballX == 200 && !this.fP2Touched && !this.fServerMoved) {
         this.fServerMoved = true;
      }

   }

   public void moveP1Right() {
      this.p1XV = this.scoringRun > -6 && !this.psycho?8:16;
      if(this.p1X == 200 && this.ballX == 200 && !this.fP2Touched && !this.fServerMoved) {
         this.fServerMoved = true;
      }

   }

   public void moveP1Stop() {
      this.p1XV = 0;
   }

   public void moveP1Jump() {
      if(this.p1Y == 0) {
         this.p1YV = this.scoringRun > -6 && !this.psycho?31:45;
      }

   }

   public void changeP1Col() {
      do {
         this.p1Col = (this.p1Col + 1) % this.slimeColText.length;
      } while(this.p1Col == this.p2Col);

   }

   public void moveP2Left() {
      this.p2XV = this.scoringRun < 6 && !this.psycho?-8:-16;
      if(this.p2X == 800 && this.ballX == 800 && !this.fP1Touched && !this.fServerMoved) {
         this.fServerMoved = true;
      }

   }

   public void moveP2Right() {
      this.p2XV = this.scoringRun < 6 && !this.psycho?8:16;
      if(this.p2X == 800 && this.ballX == 800 && !this.fP1Touched && !this.fServerMoved) {
         this.fServerMoved = true;
      }

   }

   public void moveP2Stop() {
      this.p2XV = 0;
   }

   public void moveP2Jump() {
      if(this.p2Y == 0) {
         this.p2YV = this.scoringRun < 6 && !this.psycho?31:45;
      }

   }

   private void changeP2Col() {
      do {
         this.p2Col = (this.p2Col + 1) % this.slimeColText.length;
      } while(this.p2Col == this.p1Col);

   }

   private void MoveSlimers() {
      this.p1X += this.p1XV;
      if(this.p1X < 50) {
         this.p1X = 50;
      }

      if(this.p1X > 445) {
         this.p1X = 445;
      }

      if(this.p1YV != 0) {
         this.p1Y += this.p1YV -= this.scoringRun > -6 && !this.psycho?2:4;
         if(this.p1Y < 0) {
            this.p1Y = 0;
            this.p1YV = 0;
         }
      }

      this.p2X += this.p2XV;
      if(this.p2X > 950) {
         this.p2X = 950;
      }

      if(this.p2X < 555) {
         this.p2X = 555;
      }

      if(this.p2YV != 0) {
         this.p2Y += this.p2YV -= this.scoringRun < 6 && !this.psycho?2:4;
         if(this.p2Y < 0) {
            this.p2Y = 0;
            this.p2YV = 0;
         }
      }

   }

   private void DrawSlimers() {
      int var1 = this.nWidth / 10;
      int var2 = this.nHeight / 10;
      int var3 = this.nWidth / 50;
      int var4 = this.nHeight / 25;
      int var5 = this.ballX * this.nWidth / 1000;
      int var6 = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      int var7 = this.p1OldX * this.nWidth / 1000 - var1 / 2;
      int var8 = 7 * this.nHeight / 10 - this.p1OldY * this.nHeight / 1000;
      this.screen.setColor(this.SKY_COL);
      this.screen.fillRect(var7, var8, var1, var2);
      var7 = this.p2OldX * this.nWidth / 1000 - var1 / 2;
      var8 = 7 * this.nHeight / 10 - this.p2OldY * this.nHeight / 1000;
      this.screen.setColor(this.SKY_COL);
      this.screen.fillRect(var7, var8, var1, var2);
      this.MoveBall();
      var7 = this.p1X * this.nWidth / 1000 - var1 / 2;
      var8 = 7 * this.nHeight / 10 - this.p1Y * this.nHeight / 1000;
      this.fP1Fire = this.scoringRun <= -6 || this.psycho;
      this.fP2Fire = this.scoringRun >= 6 || this.psycho;
      if(this.fP1Fire || this.fP2Fire || this.psycho) {
         this.superFlash = !this.superFlash;
      }

      this.DrawStrip(this.screen, var7, var8, var1, var2, this.p1Col);
      int var9 = this.p1X + 38;
      int var10 = this.p1Y - 60;
      var7 = var9 * this.nWidth / 1000;
      var8 = 7 * this.nHeight / 10 - var10 * this.nHeight / 1000;
      int var11 = var7 - var5;
      int var12 = var8 - var6;
      int var13 = (int)Math.sqrt((double)(var11 * var11 + var12 * var12));
      this.screen.setColor(ShimmedColor.white);
      this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
      if(var13 > 0) {
         this.screen.setColor(ShimmedColor.black);
         this.screen.fillOval(var7 - 4 * var11 / var13 - 3 * var3 / 4, var8 - 4 * var12 / var13 - 3 * var4 / 4, var3 / 2, var4 / 2);
      }

      var7 = this.p2X * this.nWidth / 1000 - var1 / 2;
      var8 = 7 * this.nHeight / 10 - this.p2Y * this.nHeight / 1000;
      this.DrawStrip(this.screen, var7, var8, var1, var2, this.p2Col);
      var9 = this.p2X - 18;
      var10 = this.p2Y - 60;
      var7 = var9 * this.nWidth / 1000;
      var8 = 7 * this.nHeight / 10 - var10 * this.nHeight / 1000;
      var11 = var7 - var5;
      var12 = var8 - var6;
      var13 = (int)Math.sqrt((double)(var11 * var11 + var12 * var12));
      this.screen.setColor(ShimmedColor.white);
      this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);
      if(var13 > 0) {
         this.screen.setColor(ShimmedColor.black);
         this.screen.fillOval(var7 - 4 * var11 / var13 - 3 * var3 / 4, var8 - 4 * var12 / var13 - 3 * var4 / 4, var3 / 2, var4 / 2);
      }

      if(Math.abs(this.scoringRun) < 6 && !this.psycho) {
         this.superFlash = false;
      }

   }

   private void DrawStrip(ShimmedGraphics var1, int var2, int var3, int var4, int var5, int var6) {
      boolean var7 = false;
      if(var6 == this.p1Col && (this.fP1Fire || this.psycho) || var6 == this.p2Col && (this.fP2Fire || this.psycho)) {
         var7 = this.superFlash;
      }

      var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);
      var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);
      var1.setColor(var7?this.slimeColours[var6]:this.slimeColours2[var6]);
      switch(var6) {
      case 0:
      case 2:
      case 4:
      case 5:
      case 6:
      case 8:
      case 11:
      case 13:
         var1.setColor(var7?this.slimeColours[var6]:this.slimeColours2[var6]);
         var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);
         var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);
         var1.fillPolygon(new ShimmedPolygon(new int[]{var2 + var4 / 5, var2 + 4 * var4 / 5, var2 + 4 * var4 / 5, var2 + var4 / 5}, new int[]{(int)(0.2D * (double)var5 + (double)var3), (int)(0.2D * (double)var5 + (double)var3), var3 + var5, var3 + var5}, 4));
         var1.fillArc(var2, var3, var4, 2 * var5, 53, 74);
         if(var6 == 2) {
            var1.setColor(var7?this.slimeColours[var6]:this.slimeColours2[var6]);
            var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);
            var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);
            var1.fillRect((int)(0.029D * (double)var4 + (double)var2), var3 + 2 * var5 / 3, (int)(0.942D * (double)var4), var5 / 3);
         }
         break;
      case 1:
      case 3:
      case 9:
      case 12:
      case 14:
         var1.fillArc(var2, var3, var4, 2 * var5, 40, 100);
         if(var6 == 9) {
            var1.setColor(ShimmedColor.white);
         } else if(var6 == 12) {
            var1.setColor(new ShimmedColor(0, 28, 87));
         } else {
            var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);
         }

         var1.fillArc(var2, var3, var4, 2 * var5, 70, 40);
         break;
      case 7:
         var1.fillArc(var2, var3, var4, 2 * var5, 19, 23);
         var1.fillArc(var2, var3, var4, 2 * var5, 138, 23);
         var1.fillRect((int)(0.128D * (double)var4 + (double)var2), var3 + var5 / 3, (int)(0.744D * (double)var4), 2 * var5 / 3);
         var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);
         var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);
         var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);
         var1.fillRect((int)(0.029D * (double)var4 + (double)var2), var3 + 2 * var5 / 3, (int)(0.942D * (double)var4), var5 / 3);
         break;
      case 10:
         var1.setColor(ShimmedColor.white);
         var1.drawLine((int)(0.128D * (double)var4 + (double)var2), var3 + var5 / 3, (int)(0.872D * (double)var4 + (double)var2), var3 + var5 / 3);
         var1.drawLine((int)(0.029D * (double)var4 + (double)var2), var3 + 2 * var5 / 3, (int)(0.971D * (double)var4 + (double)var2), var3 + 2 * var5 / 3);
      }

   }

   private void doWind() {
      if(this.windOn && Math.random() >= 0.9D) {
         this.wind += (int)(2.0D - 4.0D * Math.random());
         if(this.wind > 30) {
            this.wind = 30;
         } else if(this.wind < -30) {
            this.wind = -30;
         }

      }
   }

   private void MoveBall() {
      int var1 = 30 * this.nHeight / 1000;
      int var2 = this.ballOldX * this.nWidth / 1000;
      int var3 = 4 * this.nHeight / 5 - this.ballOldY * this.nHeight / 1000;
      this.screen.setColor(this.SKY_COL);
      this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
      this.ballY += --this.ballVY;
      this.ballX += this.ballVX;
      if(this.windOn && this.fServerMoved) {
         this.ballX *= 10;
         this.ballX += this.wind;
         this.ballX /= 10;
      }

      if(!this.fEndGame) {
         int var4 = (this.ballX - this.p1X) * 2;
         int var5 = this.ballY - this.p1Y;
         int var6 = var4 * var4 + var5 * var5;
         int var7 = this.ballVX - this.p1XV;
         int var8 = this.ballVY - this.p1YV;
         int var9;
         int var10;
         if(var5 > 0 && var6 < 15625 && var6 > 25) {
            var9 = (int)Math.sqrt((double)var6);
            var10 = (var4 * var7 + var5 * var8) / var9;
            this.ballX = this.p1X + var4 * 63 / var9;
            this.ballY = this.p1Y + var5 * 125 / var9;
            if(var10 <= 0) {
               this.ballVX += this.p1XV - 2 * var4 * var10 / var9;
               if(this.ballVX < -15) {
                  this.ballVX = -15;
               }

               if(this.ballVX > 15) {
                  this.ballVX = 15;
               }

               this.ballVY += this.p1YV - 2 * var5 * var10 / var9;
               if(this.ballVY < -22) {
                  this.ballVY = -22;
               }

               if(this.ballVY > 22) {
                  this.ballVY = 22;
               }
            }

            if(this.fServerMoved) {
               this.fP1Touched = true;
               ++this.fP1Touches;
               ++this.fP1TouchesTot;
               this.fP2Touches = 0;
               this.fP1HitStill = this.p1YV == 0 && this.p1XV == 0;
               this.hitNetSinceTouched = false;
            }
         }

         var4 = (this.ballX - this.p2X) * 2;
         var5 = this.ballY - this.p2Y;
         var6 = var4 * var4 + var5 * var5;
         var7 = this.ballVX - this.p2XV;
         var8 = this.ballVY - this.p2YV;
         if(var5 > 0 && var6 < 15625 && var6 > 25) {
            var9 = (int)Math.sqrt((double)var6);
            var10 = (var4 * var7 + var5 * var8) / var9;
            this.ballX = this.p2X + var4 * 63 / var9;
            this.ballY = this.p2Y + var5 * 125 / var9;
            if(var10 <= 0) {
               this.ballVX += this.p2XV - 2 * var4 * var10 / var9;
               if(this.ballVX < -15) {
                  this.ballVX = -15;
               }

               if(this.ballVX > 15) {
                  this.ballVX = 15;
               }

               this.ballVY += this.p2YV - 2 * var5 * var10 / var9;
               if(this.ballVY < -22) {
                  this.ballVY = -22;
               }

               if(this.ballVY > 22) {
                  this.ballVY = 22;
               }
            }

            if(this.fServerMoved) {
               this.fP2Touched = true;
               this.fP1Touches = 0;
               ++this.fP2Touches;
               ++this.fP2TouchesTot;
               this.fP2HitStill = this.p2YV == 0 && this.p2XV == 0;
               this.hitNetSinceTouched = false;
            }
         }

         if(this.ballX < 15) {
            this.ballX = 15;
            this.ballVX = -this.ballVX;
         }

         if(this.ballX > 985) {
            this.ballX = 985;
            this.ballVX = -this.ballVX;
         }

         if(this.ballX > 480 && this.ballX < 520 && this.ballY < 140) {
            if(this.ballVY < 0 && this.ballY > 130) {
               this.ballVY *= -1;
               this.ballY = 130;
            } else if(this.ballX < 500) {
               this.ballX = 480;
               this.ballVX = this.ballVX >= 0?-this.ballVX:this.ballVX;
               this.hitNetSinceTouched = true;
            } else {
               this.ballX = 520;
               this.ballVX = this.ballVX <= 0?-this.ballVX:this.ballVX;
               this.hitNetSinceTouched = true;
            }
         }
      }

      var2 = this.ballX * this.nWidth / 1000;
      var3 = 4 * this.nHeight / 5 - this.ballY * this.nHeight / 1000;
      this.screen.setColor(this.BALL_COL);
      this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);
   }

   private void drawScores() {
      ShimmedGraphics var1 = this.screen;
      ShimmedFontMetrics var2 = var1.getFontMetrics();
      int var3 = this.nHeight / 25;
      int var4 = this.nHeight / 15;
      var1.setColor(this.SKY_COL);
      var1.fillRect(0, 0, this.nWidth, var4 + 22);
      int var5 = 20;

      for(int var6 = 0; var6 < this.fP1PointsWon / 10; ++var6) {
         var1.setColor(this.slimeColours[this.p1Col]);
         var1.fillOval(var5, 30 - var4 / 2, var4, var4);
         var1.setColor(this.slimeColours2[this.p1Col]);
         var1.drawOval(var5, 30 - var4 / 2, var4, var4);
         var5 += var4 / 2;
      }

      if(this.fP1PointsWon >= 20) {
         var1.drawString("" + this.fP1PointsWon / 10, var5 - var2.stringWidth("" + this.fP1PointsWon / 10) / 2, 30 + var2.getAscent() / 2);
      }

      if(this.fP1PointsWon > 10) {
         var5 += var4 / 2 + 10;
      }

      for(int var7 = 0; var7 < this.fP1PointsWon % 10; ++var7) {
         var1.setColor(this.slimeColours[this.p1Col]);
         var1.fillOval(var5, 30 - var3 / 2, var3, var3);
         var1.setColor(this.slimeColours2[this.p1Col]);
         var1.drawOval(var5, 30 - var3 / 2, var3, var3);
         var5 += var3 + 5;
      }

      var5 = this.nWidth - 20 - this.fP2PointsWon / 10 * var4 / 2 - (this.fP2PointsWon % 10 == 0?var4 / 2 + 10:0) - this.fP2PointsWon % 10 * var3 - (this.fP2PointsWon % 10 > 0?this.fP2PointsWon % 10 - 1:0) * 5;
      if(this.fP2PointsWon > 10 && this.fP2PointsWon % 10 != 0) {
         var5 -= var4 / 2 + 10;
      }

      for(int var8 = 0; var8 < this.fP2PointsWon / 10; ++var8) {
         var1.setColor(this.slimeColours[this.p2Col]);
         var1.fillOval(var5, 30 - var4 / 2, var4, var4);
         var1.setColor(this.slimeColours2[this.p2Col]);
         var1.drawOval(var5, 30 - var4 / 2, var4, var4);
         var5 += var4 / 2;
      }

      if(this.fP2PointsWon >= 20) {
         var1.drawString("" + this.fP2PointsWon / 10, var5 - var2.stringWidth("" + this.fP2PointsWon / 10) / 2, 30 + var2.getAscent() / 2);
      }

      if(this.fP2PointsWon > 10) {
         var5 += var4 / 2 + 10;
      }

      for(int var9 = 0; var9 < this.fP2PointsWon % 10; ++var9) {
         var1.setColor(this.slimeColours[this.p2Col]);
         var1.fillOval(var5, 30 - var3 / 2, var3, var3);
         var1.setColor(this.slimeColours2[this.p2Col]);
         var1.drawOval(var5, 30 - var3 / 2, var3, var3);
         var5 += var3 + 5;
      }

   }

   private String MakeTime(long var1) {
      String var3 = "";
      var1 = (long)(2400000.0D * (double)var1 / (double)this.GAME_LENGTH);
      long var4 = var1 / 10L % 100L;
      long var6 = var1 / 1000L % 60L;
      long var8 = var1 / 60000L % 60L;
      long var10 = var1 / 3600000L;
      var3 = var3 + var8 + ":";
      if(var6 < 10L) {
         var3 = var3 + "0";
      }

      var3 = var3 + var6;
      return var3;
   }

   private void DrawStatus() {
      ShimmedGraphics var1 = this.screen;
      ShimmedFontMetrics var2 = var1.getFontMetrics();
      String var3;
      if(this.fSelectedColours) {
         var3 = (this.firstHalf?"1st":"2nd") + " half: " + this.MakeTime(this.timer?this.GAME_LENGTH - this.gameTime:ShimmedSystem.currentTimeMillis() - this.realStartTime);
      } else {
         var3 = this.slimeColText[this.p1Col] + "v " + this.slimeColText[this.p2Col];
      }

      if(this.gameTime > this.GAME_LENGTH) {
         var3 = (this.firstHalf?"1st":"2nd") + " half: Final point!";
      }

      int var4 = var2.getHeight() * 3;
      int var5 = var2.stringWidth(var3);
      int var6 = this.nWidth / 2 - var5 / 2 - 10;
      var1.setColor(this.SKY_COL);
      if(this.fSelectedColours) {
         var1.fillRect(var6, 0, var5 + 20, var4 + 22);
      } else {
         var1.fillRect(0, 0, this.nWidth, var4 + 22);
      }

      var1.setColor(ShimmedColor.white);
      var1.drawString(var3, this.nWidth / 2 - var2.stringWidth(var3) / 2, var2.getHeight() * 2);
      if(this.windOn) {
         if(this.wind < 0) {
            var3 = "<< " + -this.wind + " km/h";
         } else if(this.wind > 0) {
            var3 = this.wind + " km/h >>";
         } else {
            var3 = "no wind";
         }

         var1.drawString(var3, this.nWidth / 2 - var2.stringWidth(var3) / 2, var2.getHeight() * 3);
      }

      if(!this.fSelectedColours) {
         var1.setColor(ShimmedColor.red);
         var3 = "WARM UP ONLY";
         var1.drawString(var3, this.nWidth / 2 - var2.stringWidth(var3) / 2, var2.getHeight() * 4);
      }

   }

   public void drawPrompt() {
      this.screen.setColor(this.COURT_COL);
      this.screen.fillRect(0, 4 * this.nHeight / 5 + 6, this.nWidth, this.nHeight / 5 - 10);
      this.drawPrompt(this.promptMsg, 0);
   }

   public void drawPrompt(String var1, int var2) {
      ShimmedFontMetrics var3 = this.screen.getFontMetrics();
      this.screen.setColor(ShimmedColor.white);
      this.screen.drawString(var1, (this.nWidth - var3.stringWidth(var1)) / 2, this.nHeight * 4 / 5 + var3.getHeight() * (var2 + 1) + 10);
   }

   private void SaveReplayData() {
      this.replayData[this.replayPos][0] = this.p1X;
      this.replayData[this.replayPos][1] = this.p1Y;
      this.replayData[this.replayPos][2] = this.p2X;
      this.replayData[this.replayPos][3] = this.p2Y;
      this.replayData[this.replayPos][4] = this.ballX;
      this.replayData[this.replayPos][5] = this.ballY;
      ++this.replayPos;
      if(this.replayPos >= 200) {
         this.replayPos = 0;
      }

      if(this.replayStart == this.replayPos) {
         ++this.replayStart;
      }

      if(this.replayStart >= 200) {
         this.replayStart = 0;
      }

   }

   private void ReplayFrame(int var1) {
      int var2 = var1 != 0?var1 - 1:199;
      this.p1OldX = this.replayData[var2][0];
      this.p1OldY = this.replayData[var2][1];
      this.p2OldX = this.replayData[var2][2];
      this.p2OldY = this.replayData[var2][3];
      this.ballOldX = this.replayData[var2][4];
      this.ballOldY = this.replayData[var2][5];
      this.p1X = this.replayData[var1][0];
      this.p1Y = this.replayData[var1][1];
      this.p2X = this.replayData[var1][2];
      this.p2Y = this.replayData[var1][3];
      this.ballX = this.replayData[var1][4];
      this.ballY = this.replayData[var1][5];
      this.ballVX = 0;
      this.ballVY = 1;
      this.DrawSlimers();
      if(this.buffered) {
         this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
      }

   }

   public void run() {
      this.replayPos = this.replayStart = 0;
      if(this.firstHalf) {
         this.fSelectedColours = false;
         this.p1Col = 0;
         this.p2Col = 1;
         this.promptMsg = "Select a slime and click the mouse when warmed up.";
         this.drawPrompt();
         this.superFlash = false;
         this.scoringRun = 0;
         this.fP1Touches = 0;
         this.fP2Touches = 0;
         this.fP1TouchesTot = 0;
         this.fP2TouchesTot = 0;
         this.fP1Clangers = 0;
         this.fP2Clangers = 0;
         this.fP1Aces = 0;
         this.fP2Aces = 0;
         this.fP1Winners = 0;
         this.fP2Winners = 0;
         this.fP1PointsWon = 0;
         this.fP2PointsWon = 0;
         this.fP1Frames = 0L;
         this.fP2Frames = 0L;
         this.fP1Super = 0;
         this.fP2Super = 0;
         this.fP1Streak = 0;
         this.fP2Streak = 0;
         this.wind = (int)(30.0D - 60.0D * Math.random());
      } else {
         this.ballX = 200;
         this.scoringRun = 0;
         this.superFlash = false;
         int var1 = this.p1Col;
         this.p1Col = this.p2Col;
         this.p2Col = var1;
         var1 = this.fP1Touches;
         this.fP1Touches = this.fP2Touches;
         this.fP2Touches = var1;
         var1 = this.fP1TouchesTot;
         this.fP1TouchesTot = this.fP2TouchesTot;
         this.fP2TouchesTot = var1;
         var1 = this.fP1Clangers;
         this.fP1Clangers = this.fP2Clangers;
         this.fP2Clangers = var1;
         var1 = this.fP1Aces;
         this.fP1Aces = this.fP2Aces;
         this.fP2Aces = var1;
         var1 = this.fP1Winners;
         this.fP1Winners = this.fP2Winners;
         this.fP2Winners = var1;
         var1 = this.fP1PointsWon;
         this.fP1PointsWon = this.fP2PointsWon;
         this.fP2PointsWon = var1;
         long var2 = this.fP1Frames;
         this.fP1Frames = this.fP2Frames;
         this.fP2Frames = var2;
         var1 = this.fP1Super;
         this.fP1Super = this.fP2Super;
         this.fP2Super = var1;
         var1 = this.fP1Streak;
         this.fP1Streak = this.fP2Streak;
         this.fP2Streak = var1;
         this.repaint();
      }

      this.fP1HitStill = false;
      this.fP2HitStill = false;
      this.fServerMoved = false;
      this.crossedNetTime = 0L;
      this.drawScores();
      this.fP1Touched = this.fP2Touched = false;
      this.hitNetSinceTouched = false;
      boolean var9 = false;
      boolean var8 = false;
      boolean var3 = false;
      this.startTime = ShimmedSystem.currentTimeMillis();
      this.realStartTime = this.startTime;

      while(this.gameThread != null) {
         if(!this.fSelectedColours) {
            this.startTime = ShimmedSystem.currentTimeMillis() - this.gameTime;
            this.realStartTime = this.startTime;
         } else {
            this.gameTime = ShimmedSystem.currentTimeMillis() - this.startTime;
         }

         this.SaveReplayData();
         if(!this.fServerMoved) {
            this.crossedNetTime = ShimmedSystem.currentTimeMillis();
         } else if(this.crossedNetTime < 0L && this.ballX > 500 - 3 * this.nHeight / 50 || this.crossedNetTime > 0L && this.ballX < 500 + 3 * this.nHeight / 50) {
            this.crossedNetTime = this.ballX <= 500?-ShimmedSystem.currentTimeMillis():ShimmedSystem.currentTimeMillis();
            this.drawPrompt();
         }

         this.p1OldX = this.p1X;
         this.p1OldY = this.p1Y;
         this.p2OldX = this.p2X;
         this.p2OldY = this.p2Y;
         this.ballOldX = this.ballX;
         this.ballOldY = this.ballY;
         this.DrawStatus();
         if(this.windOn) {
            this.doWind();
            this.unDrawParticles();
            this.updateParticles();
            this.drawParticles();
            this.screen.setColor(ShimmedColor.white);
            this.screen.fillRect(this.nWidth / 2 - 2, 7 * this.nHeight / 10, 4, this.nHeight / 10 + 5);
         }

         this.MoveSlimers();
         this.DrawSlimers();
         if(this.buffered) {
            this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
         }

         if(this.fServerMoved && this.fSelectedColours) {
            if(this.ballX < 500 - 3 * this.nHeight / 50) {
               ++this.fP1Frames;
            } else if(this.ballX > 500 + 3 * this.nHeight / 50) {
               ++this.fP2Frames;
            }
         }

         if(!this.fSelectedColours && this.ballY < 35) {
            ShimmedThread.sleep(1000L, false);
            this.p1X = 200;
            this.p1Y = 0;
            this.p2X = 800;
            this.p2Y = 0;
            this.p1XV = 0;
            this.p1YV = 0;
            this.p2XV = 0;
            this.p2YV = 0;
            this.ballX = this.ballX >= 500?200:800;
            this.ballY = 400;
            this.ballVX = 0;
            this.ballVY = 0;
            this.fServerMoved = false;
            this.fP1Touched = this.fP2Touched = false;
            this.repaint();
         } else {
            long var4;
            if(this.fSelectedColours && this.holdingOn && Math.abs(this.crossedNetTime) + 5000L < ShimmedSystem.currentTimeMillis() && this.ballY >= 35) {
               var4 = ShimmedSystem.currentTimeMillis();
               this.promptMsg = "BALL... YES!";
               this.drawPrompt();
               this.promptMsg = "";
               this.drawPrompt("Holding the ball against " + (this.ballX <= 500?this.slimeColText[this.p1Col]:this.slimeColText[this.p2Col]) + "!!", 1);
               this.drawPrompt("Press space for replay...", 2);
               if(this.buffered) {
                  this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
               }

               this.mousePressed = false;
               if(this.ballX > 500) {
                  ++this.fP1PointsWon;
                  ++this.fP2Clangers;
               } else {
                  ++this.fP2PointsWon;
                  ++this.fP1Clangers;
               }

               this.oldScoringRun = this.scoringRun;
               if(this.ballX <= 500 && this.scoringRun >= 0) {
                  ++this.scoringRun;
                  if(this.scoringRun > this.fP2Streak) {
                     this.fP2Streak = this.scoringRun;
                  }
               } else if(this.ballX > 500 && this.scoringRun <= 0) {
                  --this.scoringRun;
                  if(-this.scoringRun > this.fP1Streak) {
                     this.fP1Streak = -this.scoringRun;
                  }
               } else if(this.ballX <= 500 && this.scoringRun <= 0) {
                  this.scoringRun = 1;
                  if(this.scoringRun > this.fP2Streak) {
                     this.fP2Streak = this.scoringRun;
                  }
               } else if(this.ballX > 500 && this.scoringRun >= 0) {
                  this.scoringRun = -1;
                  if(-this.scoringRun > this.fP1Streak) {
                     this.fP1Streak = -this.scoringRun;
                  }
               }

               this.drawScores();
               this.DrawStatus();
               ShimmedThread.sleep(1000L, true);
               if(this.mousePressed) {
                  this.SaveReplayData();
                  this.DoReplay();
               }

               this.promptMsg = "";
               this.drawPrompt();
               this.p1X = 200;
               this.p1Y = 0;
               this.p2X = 800;
               this.p2Y = 0;
               this.p1XV = 0;
               this.p1YV = 0;
               this.p2XV = 0;
               this.p2YV = 0;
               this.ballX = this.ballX >= 500?200:800;
               this.ballY = 400;
               this.ballVX = 0;
               this.ballVY = 0;
               this.replayStart = this.replayPos = 0;
               this.fP1Touched = this.fP2Touched = false;
               this.fServerMoved = false;
               if(this.GAME_LENGTH <= this.gameTime) {
                  this.endHalf();
               }

               this.repaint();
            } else if(this.fSelectedColours && this.holdingOn && Math.abs(this.crossedNetTime) + 5000L - 1000L < ShimmedSystem.currentTimeMillis() && this.ballY >= 35) {
               this.promptMsg = "BALL...";
               if(this.buffered) {
                  this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
               }

               this.drawPrompt();
               this.promptMsg = "";
            } else if(this.ballY < 35) {
               var4 = ShimmedSystem.currentTimeMillis();
               if(this.ballX > 500) {
                  ++this.fP1PointsWon;
               } else {
                  ++this.fP2PointsWon;
               }

               this.oldScoringRun = this.scoringRun;
               if(this.ballX <= 500 && this.scoringRun >= 0) {
                  ++this.scoringRun;
                  if(this.scoringRun > this.fP2Streak) {
                     this.fP2Streak = this.scoringRun;
                  }
               } else if(this.ballX > 500 && this.scoringRun <= 0) {
                  --this.scoringRun;
                  if(-this.scoringRun > this.fP1Streak) {
                     this.fP1Streak = -this.scoringRun;
                  }
               } else if(this.ballX <= 500 && this.scoringRun <= 0) {
                  this.scoringRun = 1;
                  if(this.scoringRun > this.fP2Streak) {
                     this.fP2Streak = this.scoringRun;
                  }
               } else if(this.ballX > 500 && this.scoringRun >= 0) {
                  this.scoringRun = -1;
                  if(-this.scoringRun > this.fP1Streak) {
                     this.fP1Streak = -this.scoringRun;
                  }
               }

               if(this.ballX > 500 || this.fP1Touches < 3 && (!this.hitNetSinceTouched || this.fP1Touches <= 0) && this.fP2Touched && (!this.fP1HitStill || this.fP1Touches <= 0)) {
                  if(this.ballX > 500 && (this.fP2Touches >= 3 || this.hitNetSinceTouched && this.fP2Touches > 0 || !this.fP1Touched || this.fP2HitStill && this.fP2Touches > 0)) {
                     ++this.fP2Clangers;
                     var9 = true;
                  }
               } else {
                  ++this.fP1Clangers;
                  var9 = true;
               }

               if(this.fP1Touched && !this.fP2Touched && this.ballX >= 500) {
                  ++this.fP1Aces;
                  var8 = true;
               } else if(this.fP2Touched && !this.fP1Touched && this.ballX < 500) {
                  ++this.fP2Aces;
                  var8 = true;
               } else if(this.ballX > 500 && this.fP1Touches > 0) {
                  ++this.fP1Winners;
                  var3 = true;
               } else if(this.ballX <= 500 && this.fP2Touches > 0) {
                  ++this.fP2Winners;
                  var3 = true;
               }

               if(Math.abs(this.scoringRun) > 6) {
                  this.promptMsg = "Super " + (this.ballX <= 500?this.slimeColText[this.p2Col]:this.slimeColText[this.p1Col]);
               } else {
                  this.promptMsg = this.ballX <= 500?this.slimeColText[this.p2Col]:this.slimeColText[this.p1Col];
               }

               if(!this.fP1Touched && !this.fP2Touched) {
                  this.promptMsg = "What can I say?";
               } else if((this.scoringRun < 0?-this.scoringRun:this.scoringRun) == 5) {
                  this.promptMsg = this.promptMsg + "is heating up!";
               } else if((this.scoringRun < 0?-this.scoringRun:this.scoringRun) == 6) {
                  this.promptMsg = this.promptMsg + "is on fire!";
                  if(this.scoringRun < 0) {
                     ++this.fP1Super;
                  } else {
                     ++this.fP2Super;
                  }
               } else if((this.ballX <= 500 || !this.fP1Touched || this.fP2Touched) && (this.ballX > 500 || this.fP1Touched || !this.fP2Touched)) {
                  if(this.ballX > 500 && !this.fP1Touched && this.fP2Touched || this.ballX <= 500 && this.fP1Touched && !this.fP2Touched) {
                     this.promptMsg = (this.ballX < 500?this.slimeColText[this.p1Col]:this.slimeColText[this.p2Col]) + "can\'t serve!";
                  } else if(this.fP1PointsWon == this.fP2PointsWon) {
                     this.promptMsg = this.promptMsg + "draws level!";
                  } else if((this.ballX <= 500 || this.fP1PointsWon != this.fP2PointsWon + 1) && (this.ballX > 500 || this.fP1PointsWon + 1 != this.fP2PointsWon)) {
                     this.promptMsg = this.promptMsg + "scores!";
                  } else {
                     this.promptMsg = this.promptMsg + "takes the lead!";
                  }
               } else {
                  this.promptMsg = this.promptMsg + "aces the serve!";
               }

               int var6 = this.ballX;
               this.drawPrompt();
               if((-this.scoringRun >= this.fP1Streak || this.scoringRun >= this.fP2Streak) && Math.abs(this.scoringRun) >= 3) {
                  this.drawPrompt("" + this.fP1Streak + " << Longest streak >> " + this.fP2Streak, 2);
               } else if(var9) {
                  this.drawPrompt("" + this.fP1Clangers + " << Clangers >> " + this.fP2Clangers, 2);
               } else if(var8) {
                  this.drawPrompt("" + this.fP1Aces + " << Aces >> " + this.fP2Aces, 2);
               } else if(var3) {
                  this.drawPrompt("" + this.fP1Winners + " << Winners >> " + this.fP2Winners, 2);
               } else {
                  this.drawPrompt("" + this.fP1PointsWon + " << Points won >> " + this.fP2PointsWon, 2);
               }

               var9 = false;
               var8 = false;
               var3 = false;
               this.drawPrompt("Press space for replay...", 1);
               this.mousePressed = false;
               this.drawScores();
               this.DrawStatus();
               if(this.buffered) {
                  this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
               }

               ShimmedThread.sleep(1000L, true);
               if(this.mousePressed) {
                  this.SaveReplayData();
                  this.DoReplay();
               }

               this.promptMsg = "";
               this.drawPrompt();
               this.p1X = 200;
               this.p1Y = 0;
               this.p2X = 800;
               this.p2Y = 0;
               this.p1XV = 0;
               this.p1YV = 0;
               this.p2XV = 0;
               this.p2YV = 0;
               this.ballX = var6 >= 500?200:800;
               this.ballY = 400;
               this.ballVX = 0;
               this.ballVY = 0;
               this.replayStart = this.replayPos = 0;
               this.fP1Touched = this.fP2Touched = false;
               this.fServerMoved = false;
               if(this.GAME_LENGTH <= this.gameTime) {
                  this.endHalf();
               }

               this.repaint();
            }
         }

         if(this.gameThread != null) {
            try {
               ShimmedThread.sleep(20L);
            } catch (InterruptedException var7) {
               ;
            }
         }
      }

      this.fEndGame = true;
      this.fInPlay = false;
      this.promptMsg = "";
      this.repaint();
   }

   private void endHalf() {
      if(this.firstHalf) {
         this.gameTime = 0L;
         this.firstHalf = false;
         this.promptMsg = "It\'s half time.";
         this.drawPrompt();
         if(this.buffered) {
            this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
         }

         this.promptMsg = "";
      } else {
         this.promptMsg = "";
         this.drawPrompt();
         this.drawPrompt("... and that\'s the game.", 0);
         if(this.buffered) {
            this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
         }

         this.promptMsg = "";
         ShimmedThread.sleep(1000L, false);
         if(this.fP1PointsWon > this.fP2PointsWon) {
            this.drawPrompt(this.slimeColText[this.p1Col] + "Wins!", 1);
         } else if(this.fP2PointsWon > this.fP1PointsWon) {
            this.drawPrompt(this.slimeColText[this.p2Col] + "Wins!", 1);
         } else {
            this.drawPrompt("It\'s a draw!", 1);
         }

         if(this.buffered) {
            this.getGraphics().drawImage(this.buffer, 0, 0, (ShimmedImageObserver)null);
         }

         this.gameTime = 0L;
         this.firstHalf = true;
      }

      ShimmedThread.sleep(3000L, false);
      this.p1X = 200;
      this.p1Y = 0;
      this.p2X = 800;
      this.p2Y = 0;
      this.p1XV = 0;
      this.p1YV = 0;
      this.p2XV = 0;
      this.p2YV = 0;
      this.ballX = this.firstHalf?200:800;
      this.ballY = 400;
      this.ballVX = 0;
      this.ballVY = 0;
      this.replayStart = this.replayPos = 0;
      this.fP1Touched = this.fP2Touched = false;
      this.fServerMoved = false;
      this.repaint();
      this.gameThread = null;
   }

   private void DoReplay() {
      ShimmedFontMetrics var1 = this.screen.getFontMetrics();
      int var2 = var1.getHeight();
      this.promptMsg = "Press space to continue...";
      this.mousePressed = false;
      int var3 = this.scoringRun;
      this.scoringRun = this.oldScoringRun;
      int var4 = this.replayStart;
      boolean var5 = false;
      this.drawCourt(this.screen);

      while(!this.mousePressed) {
         ++var4;
         if(var4 >= 200) {
            var4 = 0;
         }

         if(var4 == this.replayPos) {
            this.screen.setColor(ShimmedColor.white);
            this.screen.fillRect(20, 20, 20, 20);
            ShimmedThread.sleep(1000L, false);
            var5 = !var5;
            this.paint(this.screen);
            this.screen.setColor(this.SKY_COL);
            this.screen.fillRect(0, 0, this.nWidth, this.nHeight / 20 + 22);
            if(this.replayPos < this.replayStart) {
               var4 += 200;
            }

            while(var4 > this.replayStart) {
               var4 -= 5;
               this.drawCourt(this.screen);
               this.screen.setColor(ShimmedColor.white);
               this.screen.fillPolygon(new ShimmedPolygon(new int[]{20, 35, 35, 50, 50, 35, 35, 20}, new int[]{30, 20, 30, 20, 40, 30, 40, 30}, 8));
               if(var4 < this.replayStart) {
                  var4 = this.replayStart;
               }

               this.ReplayFrame(var4 % 200);
               ShimmedThread.sleep(20L, false);
            }

            this.drawCourt(this.screen);
            this.screen.setColor(ShimmedColor.white);
            this.screen.fillRect(20, 20, 20, 20);
            this.ReplayFrame(this.replayStart);
            ShimmedThread.sleep(500L, false);
            this.drawCourt(this.screen);
         }

         this.ReplayFrame(var4);

         try {
            ShimmedThread.sleep(var5?60L:20L);
         } catch (InterruptedException var7) {
            ;
         }

         this.screen.setColor(ShimmedColor.white);
         this.screen.fillPolygon(new ShimmedPolygon(new int[]{20, 35, 20}, new int[]{20, 30, 40}, 3));
         this.screen.drawString(var5?"Slow motion replay":"Replay", 60, 35 - var2 / 2);
      }

      this.scoringRun = var3;
      this.promptMsg = "";
      this.paint(this.screen);
   }

   private void drawCourt(ShimmedGraphics var1) {
      var1.setColor(this.SKY_COL);
      var1.fillRect(0, 0, this.nWidth, 4 * this.nHeight / 5);
      var1.setColor(this.COURT_COL);
      var1.fillRect(0, 4 * this.nHeight / 5, this.nWidth, this.nHeight / 5);
      var1.setColor(ShimmedColor.white);
      var1.fillRect(this.nWidth / 2 - 2, 7 * this.nHeight / 10, 4, this.nHeight / 10 + 5);
      this.drawPrompt();
   }

   private void unDrawParticles() {
      this.screen.setColor(this.SKY_COL);

      for(int var1 = 0; var1 < this.NUM_PARTICLES; ++var1) {
         this.screen.fillOval(this.particle_x[var1], this.particle_y[var1], this.particle_size, this.particle_size);
      }

   }

   private void updateParticles() {
      for(int var1 = 0; var1 < this.NUM_PARTICLES; ++var1) {
         this.particle_x[var1] = (int)((float)this.particle_x[var1] + this.particle_weight[var1] * (float)this.wind / 3.0F);
         int var2 = (int)(this.particle_weight[var1] * 3.0F);
         this.particle_y[var1] += var2 > 0?var2:1;
         if(this.particle_x[var1] < 0 || this.particle_x[var1] > this.nWidth || this.particle_y[var1] > this.floor) {
            if(Math.random() > (double)Math.abs((float)this.wind / 60.0F)) {
               this.particle_x[var1] = (int)(Math.random() * (double)this.nWidth);
               this.particle_y[var1] = 0;
            } else if(this.wind > 0) {
               this.particle_x[var1] = -1;
               this.particle_y[var1] = (int)(Math.random() * (double)this.floor);
            } else {
               this.particle_x[var1] = this.nWidth + 1;
               this.particle_y[var1] = (int)(Math.random() * (double)this.floor);
            }
         }
      }

   }

   private void drawParticles() {
      for(int var2 = 0; var2 < this.NUM_PARTICLES; ++var2) {
         int var1 = (int)(170.0F * this.particle_weight[var2]);
         this.screen.setColor(new ShimmedColor(85 + var1, 85 + var1, 255));
         this.screen.fillOval(this.particle_x[var2], this.particle_y[var2], this.particle_size, this.particle_size);
      }

   }

   private void sleep(long var1, boolean var3) {
      if(this.gameThread != null) {
         for(int var4 = 0; (long)var4 < var1 / 20L; ++var4) {
            try {
               ShimmedThread.sleep(20L);
            } catch (InterruptedException var6) {
               ;
            }

            if(var3) {
               this.DrawStatus();
               if(this.windOn) {
                  this.doWind();
                  this.unDrawParticles();
                  this.updateParticles();
                  this.drawParticles();
                  this.screen.setColor(ShimmedColor.white);
                  this.screen.fillRect(this.nWidth / 2 - 2, 7 * this.nHeight / 10, 4, this.nHeight / 10 + 5);
               }
            }
         }
      }

   }

   public void destroy() {
      this.gameThread.stop();
      this.gameThread = null;
   }
}

ENDOFJAVAMARKER
{
  "startTime": "2019-01-12 18:12:58",
  "sourceLength": 0,
  "success": true,
  "endTime": "2019-01-12 18:13:00",
  "durationMillis": 2279,
  "errors": [],
  "jsout": "var __extends \u003d (this \u0026\u0026 this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] \u003d b[p];\n    function __() { this.constructor \u003d d; }\n    d.prototype \u003d b \u003d\u003d\u003d null ? Object.create(b) : (__.prototype \u003d b.prototype, new __());\n};\n/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nvar ShimmedSize \u003d (function () {\n    function ShimmedSize() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n    return ShimmedSize;\n}());\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\nvar ShimmedApplet \u003d (function () {\n    function ShimmedApplet() {\n    }\n    ShimmedApplet.prototype.size \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.createImage \u003d function (x, y) {\n        return null;\n    };\n    ShimmedApplet.prototype.showStatus \u003d function (s) {\n    };\n    ShimmedApplet.prototype.repaint \u003d function () {\n    };\n    ShimmedApplet.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.requestFocus \u003d function () {\n    };\n    ShimmedApplet.prototype.getWidth \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedApplet.prototype.getDocumentBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAppletContext \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getCodeBase \u003d function () {\n        return null;\n    };\n    ShimmedApplet.prototype.getAudioClip \u003d function (u, s) {\n        return null;\n    };\n    ShimmedApplet.prototype.getImage \u003d function (u, s) {\n        return null;\n    };\n    return ShimmedApplet;\n}());\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\nvar ShimmedColor \u003d (function () {\n    function ShimmedColor(r, g, b) {\n    }\n    return ShimmedColor;\n}());\nShimmedColor.yellow \u003d null;\nShimmedColor.black \u003d null;\nShimmedColor.red \u003d null;\nShimmedColor.gray \u003d null;\nShimmedColor.white \u003d null;\nShimmedColor.blue \u003d null;\nShimmedColor.green \u003d null;\nShimmedColor.pink \u003d null;\nShimmedColor.cyan \u003d null;\nShimmedColor.lightGray \u003d null;\nShimmedColor.darkGray \u003d null;\nShimmedColor.orange \u003d null;\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\nvar ShimmedGraphics \u003d (function () {\n    function ShimmedGraphics() {\n    }\n    ShimmedGraphics.prototype.getFont \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.setFont \u003d function (f) {\n    };\n    ShimmedGraphics.prototype.setColor \u003d function (c) {\n    };\n    ShimmedGraphics.prototype.fillRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.getFontMetrics \u003d function () {\n        return null;\n    };\n    ShimmedGraphics.prototype.drawString \u003d function (s, x, y) {\n    };\n    ShimmedGraphics.prototype.drawImage \u003d function (i, x, y, o) {\n    };\n    ShimmedGraphics.prototype.drawOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillOval \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillArc \u003d function (x, y, w, h, s, e) {\n    };\n    ShimmedGraphics.prototype.drawLine \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.drawRect \u003d function (x, y, w, h) {\n    };\n    ShimmedGraphics.prototype.fillPolygon$int_A$int_A$int \u003d function (xs, ys, n) {\n    };\n    ShimmedGraphics.prototype.fillPolygon \u003d function (xs, ys, n) {\n        if (((xs !\u003d null \u0026\u0026 xs instanceof Array \u0026\u0026 (xs.length \u003d\u003d 0 || xs[0] \u003d\u003d null || (typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof Array \u0026\u0026 (ys.length \u003d\u003d 0 || ys[0] \u003d\u003d null || (typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return this.fillPolygon$int_A$int_A$int(xs, ys, n);\n        }\n        else if (((xs !\u003d null \u0026\u0026 xs instanceof ShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return this.fillPolygon$ShimmedPolygon(xs);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedGraphics.prototype.fillPolygon$ShimmedPolygon \u003d function (p) {\n    };\n    ShimmedGraphics.prototype.drawArc \u003d function (x, y, w, h, s, e) {\n    };\n    return ShimmedGraphics;\n}());\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\nvar ShimmedImage \u003d (function () {\n    function ShimmedImage() {\n    }\n    ShimmedImage.prototype.getGraphics \u003d function () {\n        return null;\n    };\n    ShimmedImage.prototype.getHeight \u003d function (a) {\n        return 0;\n    };\n    return ShimmedImage;\n}());\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\nvar ShimmedEvent \u003d (function () {\n    function ShimmedEvent() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n    return ShimmedEvent;\n}());\nShimmedEvent.KEY_ACTION \u003d 0;\nShimmedEvent.LEFT \u003d 1;\nShimmedEvent.RIGHT \u003d 2;\nShimmedEvent.UP \u003d 3;\nShimmedEvent.DOWN \u003d 4;\nShimmedEvent.KEY_ACTION_RELEASE \u003d 5;\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\nvar ShimmedFont \u003d (function () {\n    function ShimmedFont(name, w, h) {\n    }\n    ShimmedFont.prototype.getName \u003d function () {\n        return null;\n    };\n    return ShimmedFont;\n}());\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\nvar ShimmedFontMetrics \u003d (function () {\n    function ShimmedFontMetrics() {\n    }\n    ShimmedFontMetrics.prototype.getHeight \u003d function () {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.stringWidth \u003d function (s) {\n        return 0;\n    };\n    ShimmedFontMetrics.prototype.getAscent \u003d function () {\n        return 0;\n    };\n    return ShimmedFontMetrics;\n}());\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\nvar ShimmedThread \u003d (function () {\n    function ShimmedThread(r) {\n    }\n    ShimmedThread.sleep$long \u003d function (ms) {\n    };\n    ShimmedThread.sleep$long$boolean \u003d function (ms, b) {\n    };\n    ShimmedThread.sleep \u003d function (ms, b) {\n        if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return ShimmedThread.sleep$long$boolean(ms, b);\n        }\n        else if (((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return ShimmedThread.sleep$long(ms);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    ShimmedThread.prototype.start \u003d function () {\n    };\n    ShimmedThread.prototype.stop \u003d function () {\n    };\n    return ShimmedThread;\n}());\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\nvar ShimmedAppletContext \u003d (function () {\n    function ShimmedAppletContext() {\n    }\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL \u003d function (u) {\n    };\n    ShimmedAppletContext.prototype.showDocument$ShimmedURL$java_lang_String \u003d function (u, s) {\n    };\n    ShimmedAppletContext.prototype.showDocument \u003d function (u, s) {\n        if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return this.showDocument$ShimmedURL$java_lang_String(u, s);\n        }\n        else if (((u !\u003d null \u0026\u0026 u instanceof ShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return this.showDocument$ShimmedURL(u);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedAppletContext;\n}());\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\nvar ShimmedDocumentBase \u003d (function () {\n    function ShimmedDocumentBase() {\n    }\n    ShimmedDocumentBase.prototype.getHost \u003d function () {\n        return null;\n    };\n    return ShimmedDocumentBase;\n}());\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\nvar ShimmedURL \u003d (function () {\n    function ShimmedURL(s) {\n    }\n    ShimmedURL.prototype.openStream \u003d function () {\n        return null;\n    };\n    return ShimmedURL;\n}());\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\nvar ShimmedPrintStream \u003d (function () {\n    function ShimmedPrintStream() {\n    }\n    ShimmedPrintStream.prototype.print \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$ \u003d function () {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println$java_lang_Object \u003d function (s) {\n        return null;\n    };\n    ShimmedPrintStream.prototype.println \u003d function (s) {\n        if (((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return this.println$java_lang_Object(s);\n        }\n        else if (s \u003d\u003d\u003d undefined) {\n            return this.println$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    return ShimmedPrintStream;\n}());\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\nvar ShimmedSystem \u003d (function () {\n    function ShimmedSystem() {\n    }\n    ShimmedSystem.currentTimeMillis \u003d function () {\n        return 0;\n    };\n    return ShimmedSystem;\n}());\nShimmedSystem.out \u003d null;\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\nvar ShimmedVector \u003d (function () {\n    function ShimmedVector(n) {\n    }\n    ShimmedVector.prototype.removeAllElements \u003d function () {\n    };\n    ShimmedVector.prototype.get \u003d function (i) {\n        return null;\n    };\n    ShimmedVector.prototype.size \u003d function () {\n        return 0;\n    };\n    ShimmedVector.prototype.add \u003d function (x) {\n    };\n    return ShimmedVector;\n}());\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\nvar ShimmedElement \u003d (function () {\n    function ShimmedElement() {\n    }\n    ShimmedElement.prototype.add \u003d function (e) {\n    };\n    return ShimmedElement;\n}());\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\nvar ShimmedPolygon \u003d (function () {\n    function ShimmedPolygon(xs, ys, n) {\n    }\n    return ShimmedPolygon;\n}());\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\nvar ShimmedInputStream \u003d (function () {\n    function ShimmedInputStream() {\n    }\n    ShimmedInputStream.prototype.close \u003d function () {\n    };\n    return ShimmedInputStream;\n}());\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\nvar ShimmedBufferedReader \u003d (function () {\n    function ShimmedBufferedReader(i) {\n    }\n    ShimmedBufferedReader.prototype.readLine \u003d function () {\n        return null;\n    };\n    ShimmedBufferedReader.prototype.close \u003d function () {\n    };\n    return ShimmedBufferedReader;\n}());\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\nvar ShimmedInputStreamReader \u003d (function () {\n    function ShimmedInputStreamReader(is) {\n    }\n    return ShimmedInputStreamReader;\n}());\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\nvar ShimmedGridLayout \u003d (function () {\n    function ShimmedGridLayout(x, y) {\n    }\n    return ShimmedGridLayout;\n}());\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\nvar ShimmedLong \u003d (function () {\n    function ShimmedLong() {\n    }\n    ShimmedLong.parseLong \u003d function (s) {\n        return 0;\n    };\n    return ShimmedLong;\n}());\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\nvar ShimmedChars \u003d (function () {\n    function ShimmedChars() {\n    }\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    ShimmedChars.charCodeArray \u003d function (s) {\n        return null;\n    };\n    return ShimmedChars;\n}());\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\nvar ShimmedImageObserver \u003d (function () {\n    function ShimmedImageObserver() {\n    }\n    return ShimmedImageObserver;\n}());\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\nvar ShimmedRandom \u003d (function () {\n    function ShimmedRandom() {\n    }\n    ShimmedRandom.prototype.nextInt \u003d function (m) {\n        return 0;\n    };\n    return ShimmedRandom;\n}());\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\nvar ShimmedAudioClip \u003d (function () {\n    function ShimmedAudioClip() {\n    }\n    ShimmedAudioClip.prototype.play \u003d function () {\n    };\n    return ShimmedAudioClip;\n}());\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\nvar ShimmedStringBuffer \u003d (function () {\n    function ShimmedStringBuffer(i) {\n        if (((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else if (i \u003d\u003d\u003d undefined) {\n            var __args \u003d Array.prototype.slice.call(arguments);\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    }\n    ShimmedStringBuffer.prototype.append \u003d function (s) {\n        return null;\n    };\n    return ShimmedStringBuffer;\n}());\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\nvar EndOfShimDeclarations \u003d (function () {\n    function EndOfShimDeclarations() {\n    }\n    return EndOfShimDeclarations;\n}());\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\nvar Slime2P \u003d (function (_super) {\n    __extends(Slime2P, _super);\n    function Slime2P() {\n        var _this \u003d _super.call(this) || this;\n        /*private*/ _this.scoringRunForSuper \u003d 6;\n        /*private*/ _this.nightTime \u003d false;\n        /*private*/ _this.psycho \u003d false;\n        /*private*/ _this.backwards \u003d false;\n        /*private*/ _this.timer \u003d false;\n        /*private*/ _this.buffered \u003d false;\n        /*private*/ _this.nyt \u003d \"night\";\n        /*private*/ _this.psy \u003d \"super\";\n        /*private*/ _this.bck \u003d \"toast\";\n        /*private*/ _this.tim \u003d \"clock\";\n        /*private*/ _this.wnd \u003d \"windy\";\n        /*private*/ _this.hl2 \u003d \"2mins\";\n        /*private*/ _this.hl3 \u003d \"3mins\";\n        /*private*/ _this.hl4 \u003d \"4mins\";\n        /*private*/ _this.hl5 \u003d \"5mins\";\n        /*private*/ _this.bfr \u003d \"uffer\";\n        /*private*/ _this.GAME_LENGTH \u003d 120000;\n        /*private*/ _this.holdingOn \u003d false;\n        /*private*/ _this.HOLDING_LENGTH \u003d 5000;\n        /*private*/ _this.windOn \u003d false;\n        /*private*/ _this.maxWind \u003d 30;\n        /*private*/ _this.NUM_PARTICLES \u003d 60;\n        /*private*/ _this.particle_size \u003d 3;\n        _this.nWidth \u003d 0;\n        _this.nHeight \u003d 0;\n        _this.p1X \u003d 0;\n        _this.p1Y \u003d 0;\n        _this.p2X \u003d 0;\n        _this.p2Y \u003d 0;\n        _this.p1Col \u003d 0;\n        _this.p2Col \u003d 0;\n        _this.p1OldX \u003d 0;\n        _this.p1OldY \u003d 0;\n        _this.p2OldX \u003d 0;\n        _this.p2OldY \u003d 0;\n        _this.p1XV \u003d 0;\n        _this.p1YV \u003d 0;\n        _this.p2XV \u003d 0;\n        _this.p2YV \u003d 0;\n        _this.ballX \u003d 0;\n        _this.ballY \u003d 0;\n        _this.ballVX \u003d 0;\n        _this.ballVY \u003d 0;\n        _this.ballOldX \u003d 0;\n        _this.ballOldY \u003d 0;\n        _this.screen \u003d null;\n        _this.promptMsg \u003d null;\n        _this.replayData \u003d null;\n        _this.replayPos \u003d 0;\n        _this.replayStart \u003d 0;\n        _this.mousePressed \u003d false;\n        _this.fInPlay \u003d false;\n        _this.p1Blink \u003d 0;\n        _this.p2Blink \u003d 0;\n        _this.fP1Fire \u003d false;\n        _this.fP2Fire \u003d false;\n        _this.superFlash \u003d false;\n        _this.fP1Touched \u003d false;\n        _this.fP2Touched \u003d false;\n        _this.fP1Touches \u003d 0;\n        _this.fP2Touches \u003d 0;\n        _this.fP1TouchesTot \u003d 0;\n        _this.fP2TouchesTot \u003d 0;\n        _this.fP1Clangers \u003d 0;\n        _this.fP2Clangers \u003d 0;\n        _this.fP1Aces \u003d 0;\n        _this.fP2Aces \u003d 0;\n        _this.fP1Winners \u003d 0;\n        _this.fP2Winners \u003d 0;\n        _this.fP1PointsWon \u003d 0;\n        _this.fP2PointsWon \u003d 0;\n        _this.fP1HitStill \u003d false;\n        _this.fP2HitStill \u003d false;\n        _this.fP1Frames \u003d 0;\n        _this.fP2Frames \u003d 0;\n        _this.fP1Super \u003d 0;\n        _this.fP2Super \u003d 0;\n        _this.fP1Streak \u003d 0;\n        _this.fP2Streak \u003d 0;\n        _this.fSelectedColours \u003d false;\n        _this.fServerMoved \u003d false;\n        _this.hitNetSinceTouched \u003d false;\n        _this.gameThread \u003d null;\n        _this.fEndGame \u003d false;\n        _this.startTime \u003d 0;\n        _this.gameTime \u003d 0;\n        _this.realStartTime \u003d 0;\n        _this.crossedNetTime \u003d 0;\n        _this.scoringRun \u003d 0;\n        _this.oldScoringRun \u003d 0;\n        _this.slimeColText \u003d null;\n        _this.slimeColours \u003d null;\n        _this.slimeColours2 \u003d null;\n        _this.SKY_COL \u003d null;\n        _this.COURT_COL \u003d null;\n        _this.BALL_COL \u003d null;\n        _this.field_rn_Slime2P_pw_1 \u003d null;\n        _this.firstHalf \u003d false;\n        _this.wind \u003d 0;\n        _this.particle_x \u003d null;\n        _this.particle_y \u003d null;\n        _this.particle_weight \u003d null;\n        _this.floor \u003d 0;\n        _this.buffer \u003d null;\n        _this.baseFont \u003d null;\n        _this.particle_x \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n            a.push(0); return a; })(_this.NUM_PARTICLES);\n        _this.particle_y \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n            a.push(0); return a; })(_this.NUM_PARTICLES);\n        _this.particle_weight \u003d (function (s) { var a \u003d []; while (s-- \u003e 0)\n            a.push(0); return a; })(_this.NUM_PARTICLES);\n        _this.floor \u003d 280;\n        return _this;\n    }\n    Slime2P.prototype.init \u003d function () {\n        var var1 \u003d this.getDocumentBase().getHost();\n        if (!(function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var1, \"footyslime.com\")) {\n            try {\n                this.getAppletContext().showDocument$ShimmedURL$java_lang_String(new ShimmedURL(\"http://footyslime.com/\"), \"_self\");\n            }\n            catch (var6) {\n                ShimmedSystem.out.println$java_lang_Object(\"Couldn\\\u0027t initialise!\");\n                throw Object.defineProperty(new Error(\"Couldn\\\u0027t initialise!\"), \u0027__classes\u0027, { configurable: true, value: [\u0027java.lang.Throwable\u0027, \u0027java.lang.Object\u0027, \u0027java.lang.RuntimeException\u0027, \u0027java.lang.Exception\u0027] });\n            }\n            ;\n        }\n        this.SKY_COL \u003d new ShimmedColor(85, 85, 255);\n        this.COURT_COL \u003d new ShimmedColor(0, 168, 0);\n        this.BALL_COL \u003d ShimmedColor.yellow;\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.fInPlay \u003d this.fEndGame \u003d false;\n        this.promptMsg \u003d \"Click the mouse to play...\";\n        this.screen \u003d this.getGraphics();\n        this.baseFont \u003d this.screen.getFont();\n        this.screen.setFont(new ShimmedFont(this.baseFont.getName(), 1, 15));\n        this.replayData \u003d (function (dims) { var allocate \u003d function (dims) { if (dims.length \u003d\u003d 0) {\n            return 0;\n        }\n        else {\n            var array \u003d [];\n            for (var i \u003d 0; i \u003c dims[0]; i++) {\n                array.push(allocate(dims.slice(1)));\n            }\n            return array;\n        } }; return allocate(dims); })([200, 6]);\n        this.firstHalf \u003d true;\n        var var2 \u003d (this.nWidth / 10 | 0);\n        var var3 \u003d (2 * this.nHeight / 10 | 0);\n        for (var var4 \u003d 0; var4 \u003c this.NUM_PARTICLES; ++var4) {\n            this.particle_x[var4] \u003d ((Math.random() * this.nWidth) | 0);\n            this.particle_y[var4] \u003d ((-Math.random() * 50.0) | 0);\n            this.particle_weight[var4] \u003d (Math.random() * 0.95 + 0.05);\n        }\n        ;\n        this.slimeColText \u003d [\"Bronco Slime \", \"Canterbury Bullslime \", \"Cowboy Slime \", \"Dragon McSlimer \", \"Slimy Eel Slime \", \"Knight Slimer \", \"Panther Slime \", \"Rabbitoh Slime \", \"Raider of the Lost Slime \", \"Rooster Slime \", \"Womanly Slime \", \"Shark Slime \", \"Stormy Slime \", \"Tiger Slime \", \"Warrior Slime \"];\n        this.slimeColours \u003d [new ShimmedColor(96, 10, 44), ShimmedColor.white, ShimmedColor.white, ShimmedColor.white, ShimmedColor.yellow, new ShimmedColor(0, 48, 149), ShimmedColor.black, new ShimmedColor(140, 78, 0), new ShimmedColor(167, 216, 11), new ShimmedColor(23, 33, 86), new ShimmedColor(106, 10, 35), new ShimmedColor(0, 173, 227), new ShimmedColor(117, 22, 158), new ShimmedColor(25, 25, 25), new ShimmedColor(48, 34, 37)];\n        this.slimeColours2 \u003d [new ShimmedColor(231, 155, 36), new ShimmedColor(0, 34, 135), new ShimmedColor(6, 40, 79), new ShimmedColor(185, 0, 0), new ShimmedColor(0, 30, 76), new ShimmedColor(237, 37, 64), new ShimmedColor(0, 133, 152), new ShimmedColor(225, 8, 30), new ShimmedColor(0, 35, 154), ShimmedColor.red, ShimmedColor.white, new ShimmedColor(31, 28, 28), new ShimmedColor(161, 161, 162), new ShimmedColor(255, 135, 10), new ShimmedColor(212, 211, 205)];\n        this.field_rn_Slime2P_pw_1 \u003d (\".....\").split(\u0027\u0027);\n        this.buffer \u003d this.createImage(this.nWidth, this.nHeight);\n        if (this.buffered) {\n            this.buffered \u003d false;\n            for (var var5 \u003d 0; var5 \u003c this.bfr.length; ++var5) {\n                this.pwAddChar(/* toCharArray */ (this.bfr).split(\u0027\u0027)[var5]);\n            }\n            ;\n        }\n    };\n    Slime2P.prototype.paint \u003d function (var1) {\n        var var2 \u003d this.buffered ? this.buffer.getGraphics() : this.getGraphics();\n        var2.setColor(this.SKY_COL);\n        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));\n        var2.setColor(this.COURT_COL);\n        var2.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));\n        var2.setColor(ShimmedColor.white);\n        var2.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);\n        this.drawScores();\n        this.drawPrompt();\n        if (!this.fInPlay) {\n            var var3 \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            if (this.fP1PointsWon + this.fP2PointsWon \u003e 0) {\n                if (this.firstHalf) {\n                    this.screen.drawString(\"NRL Slime Volleyball!\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"NRL Slime Volleyball!\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 5);\n                }\n                var2.setColor(ShimmedColor.white);\n                var3 \u003d var2.getFontMetrics();\n                if (!this.firstHalf) {\n                    var2.drawString(\"First half stats:\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"First half stats:\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 4);\n                }\n                else {\n                    var2.drawString(\"Last game\\\u0027s stats:\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Last game\\\u0027s stats:\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight() * 4);\n                }\n                var var4 \u003d [\"Possession\", \"Touches\", \"Points won\", \"Winners\", \"Aces\", \"Clangers\", \"Super Slimes\", \"Longest streak\"];\n                var var5 \u003d [[\"\" + Math.floor(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames)) + \"%\", \"\" + this.fP1TouchesTot, \"\" + this.fP1PointsWon, \"\" + this.fP1Winners, \"\" + this.fP1Aces, \"\" + this.fP1Clangers, \"\" + this.fP1Super, \"\" + this.fP1Streak], [\"\" + (100 - Math.floor(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames))) + \"%\", \"\" + this.fP2TouchesTot, \"\" + this.fP2PointsWon, \"\" + this.fP2Winners, \"\" + this.fP2Aces, \"\" + this.fP2Clangers, \"\" + this.fP2Super, \"\" + this.fP2Streak]];\n                var var6 \u003d 0;\n                for (var var7 \u003d 0; var7 \u003c var4.length; ++var7) {\n                    var6 \u003d Math.max(var6, var3.stringWidth(var4[var7]));\n                }\n                ;\n                for (var var8 \u003d 0; var8 \u003c var4.length; ++var8) {\n                    var2.drawString(var4[var8], (this.nWidth / 2 | 0) - (var3.stringWidth(var4[var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));\n                    var2.drawString(var5[0][var8], (this.nWidth / 2 | 0) - var6 - (var3.stringWidth(var5[0][var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));\n                    var2.drawString(var5[1][var8], (this.nWidth / 2 | 0) + var6 - (var3.stringWidth(var5[1][var8]) / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * (var8 - 2));\n                }\n                ;\n                this.drawPrompt$java_lang_String$int(!this.firstHalf ? \"Swap sides and click the mouse to continue...\" : \"Click the mouse to start another game!\", 0);\n            }\n            else {\n                this.screen.drawString(\"NRL Slime Volleyball!\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"NRL Slime Volleyball!\") / 2 | 0), (this.nHeight / 2 | 0) - var3.getHeight());\n                var2.setColor(ShimmedColor.white);\n                var3 \u003d var2.getFontMetrics();\n                var2.drawString(\"Code base by Quin Pendragon\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Code base by Quin Pendragon\") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 2);\n                var2.drawString(\"Mod by Daniel Wedge\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Mod by Daniel Wedge\") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 3);\n                var2.drawString(\"Wind particles by Tim Lightfoot\", (this.nWidth / 2 | 0) - (var3.stringWidth(\"Wind particles by Tim Lightfoot\") / 2 | 0), (this.nHeight / 2 | 0) + var3.getHeight() * 4);\n            }\n        }\n        if (this.buffered) {\n            var1.drawImage(this.buffer, 0, 0, this);\n        }\n    };\n    Slime2P.prototype.handleEvent \u003d function (var1) {\n        switch ((var1.id)) {\n            case 401:\n            case 403:\n                if (!this.fEndGame) {\n                    if (!this.fSelectedColours) {\n                        this.pwAddChar(String.fromCharCode(var1.key));\n                    }\n                    switch ((var1.key)) {\n                        case 32:\n                            this.mousePressed \u003d true;\n                            break;\n                        case 65:\n                        case 97:\n                            if (!this.backwards) {\n                                this.moveP1Left();\n                            }\n                            else {\n                                this.moveP1Right();\n                            }\n                            break;\n                        case 68:\n                        case 100:\n                            if (!this.backwards) {\n                                this.moveP1Right();\n                            }\n                            else {\n                                this.moveP1Left();\n                            }\n                            break;\n                        case 73:\n                        case 105:\n                            this.moveP2Jump();\n                            break;\n                        case 74:\n                        case 106:\n                            if (!this.backwards) {\n                                this.moveP2Left();\n                            }\n                            else {\n                                this.moveP2Right();\n                            }\n                            break;\n                        case 75:\n                        case 107:\n                            if (!this.fSelectedColours) {\n                                this.changeP2Col();\n                            }\n                            break;\n                        case 76:\n                        case 108:\n                            if (!this.backwards) {\n                                this.moveP2Right();\n                            }\n                            else {\n                                this.moveP2Left();\n                            }\n                            break;\n                        case 83:\n                        case 115:\n                            if (!this.fSelectedColours) {\n                                this.changeP1Col();\n                            }\n                            break;\n                        case 87:\n                        case 119:\n                            this.moveP1Jump();\n                    }\n                }\n                break;\n            case 402:\n            case 404:\n                switch ((var1.key)) {\n                    case 65:\n                    case 97:\n                        if (this.p1XV * (this.backwards ? -1 : 1) \u003c 0) {\n                            this.moveP1Stop();\n                        }\n                        return false;\n                    case 68:\n                    case 100:\n                        if (this.p1XV * (this.backwards ? -1 : 1) \u003e 0) {\n                            this.moveP1Stop();\n                        }\n                        return false;\n                    case 74:\n                    case 106:\n                        if (this.p2XV * (this.backwards ? -1 : 1) \u003c 0) {\n                            this.moveP2Stop();\n                        }\n                        return false;\n                    case 76:\n                    case 108:\n                        if (this.p2XV * (this.backwards ? -1 : 1) \u003e 0) {\n                            this.moveP2Stop();\n                        }\n                        return false;\n                    default:\n                        return false;\n                }\n            case 501:\n                this.mousePressed \u003d true;\n                if (!this.fInPlay) {\n                    this.fEndGame \u003d false;\n                    this.fInPlay \u003d true;\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d 200;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.hitNetSinceTouched \u003d false;\n                    this.promptMsg \u003d \"\";\n                    this.repaint();\n                    this.gameThread \u003d new ShimmedThread(this);\n                    this.gameThread.start();\n                }\n                else if (!this.fSelectedColours) {\n                    this.fInPlay \u003d true;\n                    this.replayStart \u003d 0;\n                    this.replayPos \u003d 0;\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d 200;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.hitNetSinceTouched \u003d false;\n                    this.promptMsg \u003d \"\";\n                    this.fP1Touched \u003d false;\n                    this.fP2Touched \u003d false;\n                    this.fServerMoved \u003d false;\n                    this.drawPrompt();\n                    this.DrawStatus();\n                    this.repaint();\n                    this.startTime \u003d ShimmedSystem.currentTimeMillis();\n                    this.realStartTime \u003d this.startTime;\n                    this.fSelectedColours \u003d true;\n                }\n                break;\n            case 503:\n                this.showStatus(\"NRL Slime Volleyball: http://footyslime.com/nrl/\");\n        }\n        return false;\n    };\n    /*private*/ Slime2P.prototype.pwAddChar \u003d function (var1) {\n        for (var var2 \u003d 0; var2 \u003c 4; this.field_rn_Slime2P_pw_1[var2++] \u003d this.field_rn_Slime2P_pw_1[var2]) {\n        }\n        ;\n        this.field_rn_Slime2P_pw_1[4] \u003d var1;\n        var var3 \u003d (this.field_rn_Slime2P_pw_1.join(\u0027\u0027)).toLowerCase();\n        var var4 \u003d false;\n        if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.nyt)) {\n            var4 \u003d true;\n            this.nightTime \u003d !this.nightTime;\n            this.SKY_COL \u003d this.nightTime ? new ShimmedColor(0, 0, 70) : new ShimmedColor(85, 85, 255);\n            this.COURT_COL \u003d this.nightTime ? new ShimmedColor(0, 100, 0) : new ShimmedColor(0, 168, 0);\n            this.BALL_COL \u003d this.nightTime ? ShimmedColor.white : ShimmedColor.yellow;\n            this.repaint();\n            this.promptMsg \u003d this.nightTime ? \"... and the lights come on at Slime Stadium!\" : \"The Slime Sun has risen!\";\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.psy)) {\n            var4 \u003d true;\n            this.psycho \u003d !this.psycho;\n            this.promptMsg \u003d this.psycho ? \"Can\\\u0027t get to the ball fast enough?\" : \"Can\\\u0027t handle the pace?\";\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.bck)) {\n            var4 \u003d true;\n            this.backwards \u003d !this.backwards;\n            this.promptMsg \u003d this.backwards ? \"Slime God Clive blesses you!\" : \"Don\\\u0027t like challenges, huh?\";\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.tim)) {\n            var4 \u003d true;\n            this.timer \u003d !this.timer;\n            this.promptMsg \u003d this.timer ? \"Don\\\u0027t like the uncertainty of time on? Pathetic.\" : \"Welcome back from the other side.\";\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.wnd)) {\n            var4 \u003d true;\n            this.windOn \u003d !this.windOn;\n            this.promptMsg \u003d !this.windOn ? \"Can\\\u0027t handle the challenge?\" : \"Yeah, wind is good.\";\n            if (!this.windOn) {\n                this.unDrawParticles();\n            }\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.bfr)) {\n            var4 \u003d true;\n            this.buffered \u003d !this.buffered;\n            this.screen \u003d this.buffered ? this.buffer.getGraphics() : this.getGraphics();\n            this.screen.setFont(new ShimmedFont(this.baseFont.getName(), 1, 15));\n            if (this.fInPlay) {\n                this.promptMsg \u003d this.buffered ? \"Double buffering is on.\" : \"Do not adjust your set... the Slimes are flickery.\";\n            }\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.hl2)) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 120000;\n            this.promptMsg \u003d \"Halves now two minutes long.\";\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.hl3)) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 180000;\n            this.promptMsg \u003d \"Halves now three minutes long.\";\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.hl4)) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 240000;\n            this.promptMsg \u003d \"Halves now four minutes long.\";\n        }\n        else if ((function (o1, o2) { if (o1 \u0026\u0026 o1.equals) {\n            return o1.equals(o2);\n        }\n        else {\n            return o1 \u003d\u003d\u003d o2;\n        } })(var3, this.hl5)) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 300000;\n            this.promptMsg \u003d \"Halves now five minutes long.\";\n        }\n        if (var4) {\n            this.fServerMoved \u003d true;\n            this.drawPrompt();\n        }\n    };\n    Slime2P.prototype.moveP1Left \u003d function () {\n        this.p1XV \u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho ? -8 : -16;\n        if (this.p1X \u003d\u003d\u003d 200 \u0026\u0026 this.ballX \u003d\u003d\u003d 200 \u0026\u0026 !this.fP2Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    };\n    Slime2P.prototype.moveP1Right \u003d function () {\n        this.p1XV \u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho ? 8 : 16;\n        if (this.p1X \u003d\u003d\u003d 200 \u0026\u0026 this.ballX \u003d\u003d\u003d 200 \u0026\u0026 !this.fP2Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    };\n    Slime2P.prototype.moveP1Stop \u003d function () {\n        this.p1XV \u003d 0;\n    };\n    Slime2P.prototype.moveP1Jump \u003d function () {\n        if (this.p1Y \u003d\u003d\u003d 0) {\n            this.p1YV \u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho ? 31 : 45;\n        }\n    };\n    Slime2P.prototype.changeP1Col \u003d function () {\n        do {\n            this.p1Col \u003d (this.p1Col + 1) % this.slimeColText.length;\n        } while ((this.p1Col \u003d\u003d\u003d this.p2Col));\n    };\n    Slime2P.prototype.moveP2Left \u003d function () {\n        this.p2XV \u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho ? -8 : -16;\n        if (this.p2X \u003d\u003d\u003d 800 \u0026\u0026 this.ballX \u003d\u003d\u003d 800 \u0026\u0026 !this.fP1Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    };\n    Slime2P.prototype.moveP2Right \u003d function () {\n        this.p2XV \u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho ? 8 : 16;\n        if (this.p2X \u003d\u003d\u003d 800 \u0026\u0026 this.ballX \u003d\u003d\u003d 800 \u0026\u0026 !this.fP1Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    };\n    Slime2P.prototype.moveP2Stop \u003d function () {\n        this.p2XV \u003d 0;\n    };\n    Slime2P.prototype.moveP2Jump \u003d function () {\n        if (this.p2Y \u003d\u003d\u003d 0) {\n            this.p2YV \u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho ? 31 : 45;\n        }\n    };\n    /*private*/ Slime2P.prototype.changeP2Col \u003d function () {\n        do {\n            this.p2Col \u003d (this.p2Col + 1) % this.slimeColText.length;\n        } while ((this.p2Col \u003d\u003d\u003d this.p1Col));\n    };\n    /*private*/ Slime2P.prototype.MoveSlimers \u003d function () {\n        this.p1X +\u003d this.p1XV;\n        if (this.p1X \u003c 50) {\n            this.p1X \u003d 50;\n        }\n        if (this.p1X \u003e 445) {\n            this.p1X \u003d 445;\n        }\n        if (this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho ? 2 : 4;\n            if (this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        this.p2X +\u003d this.p2XV;\n        if (this.p2X \u003e 950) {\n            this.p2X \u003d 950;\n        }\n        if (this.p2X \u003c 555) {\n            this.p2X \u003d 555;\n        }\n        if (this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho ? 2 : 4;\n            if (this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n    };\n    /*private*/ Slime2P.prototype.DrawSlimers \u003d function () {\n        var var1 \u003d (this.nWidth / 10 | 0);\n        var var2 \u003d (this.nHeight / 10 | 0);\n        var var3 \u003d (this.nWidth / 50 | 0);\n        var var4 \u003d (this.nHeight / 25 | 0);\n        var var5 \u003d (this.ballX * this.nWidth / 1000 | 0);\n        var var6 \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        var var7 \u003d (this.p1OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);\n        var var8 \u003d (7 * this.nHeight / 10 | 0) - (this.p1OldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillRect(var7, var8, var1, var2);\n        var7 \u003d (this.p2OldX * this.nWidth / 1000 | 0) - (var1 / 2 | 0);\n        var8 \u003d (7 * this.nHeight / 10 | 0) - (this.p2OldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillRect(var7, var8, var1, var2);\n        this.MoveBall();\n        var7 \u003d (this.p1X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);\n        var8 \u003d (7 * this.nHeight / 10 | 0) - (this.p1Y * this.nHeight / 1000 | 0);\n        this.fP1Fire \u003d this.scoringRun \u003c\u003d -6 || this.psycho;\n        this.fP2Fire \u003d this.scoringRun \u003e\u003d 6 || this.psycho;\n        if (this.fP1Fire || this.fP2Fire || this.psycho) {\n            this.superFlash \u003d !this.superFlash;\n        }\n        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p1Col);\n        var var9 \u003d this.p1X + 38;\n        var var10 \u003d this.p1Y - 60;\n        var7 \u003d (var9 * this.nWidth / 1000 | 0);\n        var8 \u003d (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);\n        var var11 \u003d var7 - var5;\n        var var12 \u003d var8 - var6;\n        var var13 \u003d (Math.sqrt((var11 * var11 + var12 * var12)) | 0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);\n        if (var13 \u003e 0) {\n            this.screen.setColor(ShimmedColor.black);\n            this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));\n        }\n        var7 \u003d (this.p2X * this.nWidth / 1000 | 0) - (var1 / 2 | 0);\n        var8 \u003d (7 * this.nHeight / 10 | 0) - (this.p2Y * this.nHeight / 1000 | 0);\n        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p2Col);\n        var9 \u003d this.p2X - 18;\n        var10 \u003d this.p2Y - 60;\n        var7 \u003d (var9 * this.nWidth / 1000 | 0);\n        var8 \u003d (7 * this.nHeight / 10 | 0) - (var10 * this.nHeight / 1000 | 0);\n        var11 \u003d var7 - var5;\n        var12 \u003d var8 - var6;\n        var13 \u003d (Math.sqrt((var11 * var11 + var12 * var12)) | 0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);\n        if (var13 \u003e 0) {\n            this.screen.setColor(ShimmedColor.black);\n            this.screen.fillOval(var7 - (4 * var11 / var13 | 0) - (3 * var3 / 4 | 0), var8 - (4 * var12 / var13 | 0) - (3 * var4 / 4 | 0), (var3 / 2 | 0), (var4 / 2 | 0));\n        }\n        if (Math.abs(this.scoringRun) \u003c 6 \u0026\u0026 !this.psycho) {\n            this.superFlash \u003d false;\n        }\n    };\n    /*private*/ Slime2P.prototype.DrawStrip \u003d function (var1, var2, var3, var4, var5, var6) {\n        var var7 \u003d false;\n        if (var6 \u003d\u003d\u003d this.p1Col \u0026\u0026 (this.fP1Fire || this.psycho) || var6 \u003d\u003d\u003d this.p2Col \u0026\u0026 (this.fP2Fire || this.psycho)) {\n            var7 \u003d this.superFlash;\n        }\n        var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);\n        var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);\n        var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);\n        switch ((var6)) {\n            case 0:\n            case 2:\n            case 4:\n            case 5:\n            case 6:\n            case 8:\n            case 11:\n            case 13:\n                var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);\n                var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);\n                var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);\n                var1.fillPolygon$ShimmedPolygon(new ShimmedPolygon([var2 + (var4 / 5 | 0), var2 + (4 * var4 / 5 | 0), var2 + (4 * var4 / 5 | 0), var2 + (var4 / 5 | 0)], [((0.2 * var5 + var3) | 0), ((0.2 * var5 + var3) | 0), var3 + var5, var3 + var5], 4));\n                var1.fillArc(var2, var3, var4, 2 * var5, 53, 74);\n                if (var6 \u003d\u003d\u003d 2) {\n                    var1.setColor(var7 ? this.slimeColours[var6] : this.slimeColours2[var6]);\n                    var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);\n                    var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);\n                    var1.fillRect(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.942 * var4) | 0), (var5 / 3 | 0));\n                }\n                break;\n            case 1:\n            case 3:\n            case 9:\n            case 12:\n            case 14:\n                var1.fillArc(var2, var3, var4, 2 * var5, 40, 100);\n                if (var6 \u003d\u003d\u003d 9) {\n                    var1.setColor(ShimmedColor.white);\n                }\n                else if (var6 \u003d\u003d\u003d 12) {\n                    var1.setColor(new ShimmedColor(0, 28, 87));\n                }\n                else {\n                    var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);\n                }\n                var1.fillArc(var2, var3, var4, 2 * var5, 70, 40);\n                break;\n            case 7:\n                var1.fillArc(var2, var3, var4, 2 * var5, 19, 23);\n                var1.fillArc(var2, var3, var4, 2 * var5, 138, 23);\n                var1.fillRect(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.744 * var4) | 0), (2 * var5 / 3 | 0));\n                var1.setColor(var7 ? this.slimeColours2[var6] : this.slimeColours[var6]);\n                var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);\n                var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);\n                var1.fillRect(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.942 * var4) | 0), (var5 / 3 | 0));\n                break;\n            case 10:\n                var1.setColor(ShimmedColor.white);\n                var1.drawLine(((0.128 * var4 + var2) | 0), var3 + (var5 / 3 | 0), ((0.872 * var4 + var2) | 0), var3 + (var5 / 3 | 0));\n                var1.drawLine(((0.029 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0), ((0.971 * var4 + var2) | 0), var3 + (2 * var5 / 3 | 0));\n        }\n    };\n    /*private*/ Slime2P.prototype.doWind \u003d function () {\n        if (this.windOn \u0026\u0026 Math.random() \u003e\u003d 0.9) {\n            this.wind +\u003d ((2.0 - 4.0 * Math.random()) | 0);\n            if (this.wind \u003e 30) {\n                this.wind \u003d 30;\n            }\n            else if (this.wind \u003c -30) {\n                this.wind \u003d -30;\n            }\n        }\n    };\n    /*private*/ Slime2P.prototype.MoveBall \u003d function () {\n        var var1 \u003d (30 * this.nHeight / 1000 | 0);\n        var var2 \u003d (this.ballOldX * this.nWidth / 1000 | 0);\n        var var3 \u003d (4 * this.nHeight / 5 | 0) - (this.ballOldY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        if (this.windOn \u0026\u0026 this.fServerMoved) {\n            this.ballX *\u003d 10;\n            this.ballX +\u003d this.wind;\n            this.ballX /\u003d 10;\n        }\n        if (!this.fEndGame) {\n            var var4 \u003d (this.ballX - this.p1X) * 2;\n            var var5 \u003d this.ballY - this.p1Y;\n            var var6 \u003d var4 * var4 + var5 * var5;\n            var var7 \u003d this.ballVX - this.p1XV;\n            var var8 \u003d this.ballVY - this.p1YV;\n            var var9 \u003d void 0;\n            var var10 \u003d void 0;\n            if (var5 \u003e 0 \u0026\u0026 var6 \u003c 15625 \u0026\u0026 var6 \u003e 25) {\n                var9 \u003d (Math.sqrt(var6) | 0);\n                var10 \u003d ((var4 * var7 + var5 * var8) / var9 | 0);\n                this.ballX \u003d this.p1X + (var4 * 63 / var9 | 0);\n                this.ballY \u003d this.p1Y + (var5 * 125 / var9 | 0);\n                if (var10 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p1XV - (2 * var4 * var10 / var9 | 0);\n                    if (this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if (this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p1YV - (2 * var5 * var10 / var9 | 0);\n                    if (this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if (this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                if (this.fServerMoved) {\n                    this.fP1Touched \u003d true;\n                    ++this.fP1Touches;\n                    ++this.fP1TouchesTot;\n                    this.fP2Touches \u003d 0;\n                    this.fP1HitStill \u003d this.p1YV \u003d\u003d\u003d 0 \u0026\u0026 this.p1XV \u003d\u003d\u003d 0;\n                    this.hitNetSinceTouched \u003d false;\n                }\n            }\n            var4 \u003d (this.ballX - this.p2X) * 2;\n            var5 \u003d this.ballY - this.p2Y;\n            var6 \u003d var4 * var4 + var5 * var5;\n            var7 \u003d this.ballVX - this.p2XV;\n            var8 \u003d this.ballVY - this.p2YV;\n            if (var5 \u003e 0 \u0026\u0026 var6 \u003c 15625 \u0026\u0026 var6 \u003e 25) {\n                var9 \u003d (Math.sqrt(var6) | 0);\n                var10 \u003d ((var4 * var7 + var5 * var8) / var9 | 0);\n                this.ballX \u003d this.p2X + (var4 * 63 / var9 | 0);\n                this.ballY \u003d this.p2Y + (var5 * 125 / var9 | 0);\n                if (var10 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p2XV - (2 * var4 * var10 / var9 | 0);\n                    if (this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if (this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p2YV - (2 * var5 * var10 / var9 | 0);\n                    if (this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if (this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                if (this.fServerMoved) {\n                    this.fP2Touched \u003d true;\n                    this.fP1Touches \u003d 0;\n                    ++this.fP2Touches;\n                    ++this.fP2TouchesTot;\n                    this.fP2HitStill \u003d this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.p2XV \u003d\u003d\u003d 0;\n                    this.hitNetSinceTouched \u003d false;\n                }\n            }\n            if (this.ballX \u003c 15) {\n                this.ballX \u003d 15;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if (this.ballX \u003e 985) {\n                this.ballX \u003d 985;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if (this.ballX \u003e 480 \u0026\u0026 this.ballX \u003c 520 \u0026\u0026 this.ballY \u003c 140) {\n                if (this.ballVY \u003c 0 \u0026\u0026 this.ballY \u003e 130) {\n                    this.ballVY *\u003d -1;\n                    this.ballY \u003d 130;\n                }\n                else if (this.ballX \u003c 500) {\n                    this.ballX \u003d 480;\n                    this.ballVX \u003d this.ballVX \u003e\u003d 0 ? -this.ballVX : this.ballVX;\n                    this.hitNetSinceTouched \u003d true;\n                }\n                else {\n                    this.ballX \u003d 520;\n                    this.ballVX \u003d this.ballVX \u003c\u003d 0 ? -this.ballVX : this.ballVX;\n                    this.hitNetSinceTouched \u003d true;\n                }\n            }\n        }\n        var2 \u003d (this.ballX * this.nWidth / 1000 | 0);\n        var3 \u003d (4 * this.nHeight / 5 | 0) - (this.ballY * this.nHeight / 1000 | 0);\n        this.screen.setColor(this.BALL_COL);\n        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);\n    };\n    /*private*/ Slime2P.prototype.drawScores \u003d function () {\n        var var1 \u003d this.screen;\n        var var2 \u003d var1.getFontMetrics();\n        var var3 \u003d (this.nHeight / 25 | 0);\n        var var4 \u003d (this.nHeight / 15 | 0);\n        var1.setColor(this.SKY_COL);\n        var1.fillRect(0, 0, this.nWidth, var4 + 22);\n        var var5 \u003d 20;\n        for (var var6 \u003d 0; var6 \u003c (this.fP1PointsWon / 10 | 0); ++var6) {\n            var1.setColor(this.slimeColours[this.p1Col]);\n            var1.fillOval(var5, 30 - (var4 / 2 | 0), var4, var4);\n            var1.setColor(this.slimeColours2[this.p1Col]);\n            var1.drawOval(var5, 30 - (var4 / 2 | 0), var4, var4);\n            var5 +\u003d (var4 / 2 | 0);\n        }\n        ;\n        if (this.fP1PointsWon \u003e\u003d 20) {\n            var1.drawString(\"\" + (this.fP1PointsWon / 10 | 0), var5 - (var2.stringWidth(\"\" + (this.fP1PointsWon / 10 | 0)) / 2 | 0), 30 + (var2.getAscent() / 2 | 0));\n        }\n        if (this.fP1PointsWon \u003e 10) {\n            var5 +\u003d (var4 / 2 | 0) + 10;\n        }\n        for (var var7 \u003d 0; var7 \u003c this.fP1PointsWon % 10; ++var7) {\n            var1.setColor(this.slimeColours[this.p1Col]);\n            var1.fillOval(var5, 30 - (var3 / 2 | 0), var3, var3);\n            var1.setColor(this.slimeColours2[this.p1Col]);\n            var1.drawOval(var5, 30 - (var3 / 2 | 0), var3, var3);\n            var5 +\u003d var3 + 5;\n        }\n        ;\n        var5 \u003d this.nWidth - 20 - ((this.fP2PointsWon / 10 | 0) * var4 / 2 | 0) - (this.fP2PointsWon % 10 \u003d\u003d\u003d 0 ? (var4 / 2 | 0) + 10 : 0) - this.fP2PointsWon % 10 * var3 - (this.fP2PointsWon % 10 \u003e 0 ? this.fP2PointsWon % 10 - 1 : 0) * 5;\n        if (this.fP2PointsWon \u003e 10 \u0026\u0026 this.fP2PointsWon % 10 !\u003d\u003d 0) {\n            var5 -\u003d (var4 / 2 | 0) + 10;\n        }\n        for (var var8 \u003d 0; var8 \u003c (this.fP2PointsWon / 10 | 0); ++var8) {\n            var1.setColor(this.slimeColours[this.p2Col]);\n            var1.fillOval(var5, 30 - (var4 / 2 | 0), var4, var4);\n            var1.setColor(this.slimeColours2[this.p2Col]);\n            var1.drawOval(var5, 30 - (var4 / 2 | 0), var4, var4);\n            var5 +\u003d (var4 / 2 | 0);\n        }\n        ;\n        if (this.fP2PointsWon \u003e\u003d 20) {\n            var1.drawString(\"\" + (this.fP2PointsWon / 10 | 0), var5 - (var2.stringWidth(\"\" + (this.fP2PointsWon / 10 | 0)) / 2 | 0), 30 + (var2.getAscent() / 2 | 0));\n        }\n        if (this.fP2PointsWon \u003e 10) {\n            var5 +\u003d (var4 / 2 | 0) + 10;\n        }\n        for (var var9 \u003d 0; var9 \u003c this.fP2PointsWon % 10; ++var9) {\n            var1.setColor(this.slimeColours[this.p2Col]);\n            var1.fillOval(var5, 30 - (var3 / 2 | 0), var3, var3);\n            var1.setColor(this.slimeColours2[this.p2Col]);\n            var1.drawOval(var5, 30 - (var3 / 2 | 0), var3, var3);\n            var5 +\u003d var3 + 5;\n        }\n        ;\n    };\n    /*private*/ Slime2P.prototype.MakeTime \u003d function (var1) {\n        var var3 \u003d \"\";\n        var1 \u003d Math.floor((2400000.0 * var1 / this.GAME_LENGTH));\n        var var4 \u003d Math.floor(var1 / 10) % 100;\n        var var6 \u003d Math.floor(var1 / 1000) % 60;\n        var var8 \u003d Math.floor(var1 / 60000) % 60;\n        var var10 \u003d Math.floor(var1 / 3600000);\n        var3 \u003d var3 + var8 + \":\";\n        if (var6 \u003c 10) {\n            var3 \u003d var3 + \"0\";\n        }\n        var3 \u003d var3 + var6;\n        return var3;\n    };\n    /*private*/ Slime2P.prototype.DrawStatus \u003d function () {\n        var var1 \u003d this.screen;\n        var var2 \u003d var1.getFontMetrics();\n        var var3;\n        if (this.fSelectedColours) {\n            var3 \u003d (this.firstHalf ? \"1st\" : \"2nd\") + \" half: \" + this.MakeTime(this.timer ? this.GAME_LENGTH - this.gameTime : ShimmedSystem.currentTimeMillis() - this.realStartTime);\n        }\n        else {\n            var3 \u003d this.slimeColText[this.p1Col] + \"v \" + this.slimeColText[this.p2Col];\n        }\n        if (this.gameTime \u003e this.GAME_LENGTH) {\n            var3 \u003d (this.firstHalf ? \"1st\" : \"2nd\") + \" half: Final point!\";\n        }\n        var var4 \u003d var2.getHeight() * 3;\n        var var5 \u003d var2.stringWidth(var3);\n        var var6 \u003d (this.nWidth / 2 | 0) - (var5 / 2 | 0) - 10;\n        var1.setColor(this.SKY_COL);\n        if (this.fSelectedColours) {\n            var1.fillRect(var6, 0, var5 + 20, var4 + 22);\n        }\n        else {\n            var1.fillRect(0, 0, this.nWidth, var4 + 22);\n        }\n        var1.setColor(ShimmedColor.white);\n        var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 2);\n        if (this.windOn) {\n            if (this.wind \u003c 0) {\n                var3 \u003d \"\u003c\u003c \" + -this.wind + \" km/h\";\n            }\n            else if (this.wind \u003e 0) {\n                var3 \u003d this.wind + \" km/h \u003e\u003e\";\n            }\n            else {\n                var3 \u003d \"no wind\";\n            }\n            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 3);\n        }\n        if (!this.fSelectedColours) {\n            var1.setColor(ShimmedColor.red);\n            var3 \u003d \"WARM UP ONLY\";\n            var1.drawString(var3, (this.nWidth / 2 | 0) - (var2.stringWidth(var3) / 2 | 0), var2.getHeight() * 4);\n        }\n    };\n    Slime2P.prototype.drawPrompt$ \u003d function () {\n        this.screen.setColor(this.COURT_COL);\n        this.screen.fillRect(0, (4 * this.nHeight / 5 | 0) + 6, this.nWidth, (this.nHeight / 5 | 0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    };\n    Slime2P.prototype.drawPrompt$java_lang_String$int \u003d function (var1, var2) {\n        var var3 \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2 | 0), (this.nHeight * 4 / 5 | 0) + var3.getHeight() * (var2 + 1) + 10);\n    };\n    Slime2P.prototype.drawPrompt \u003d function (var1, var2) {\n        if (((typeof var1 \u003d\u003d\u003d \u0027string\u0027) || var1 \u003d\u003d\u003d null) \u0026\u0026 ((typeof var2 \u003d\u003d\u003d \u0027number\u0027) || var2 \u003d\u003d\u003d null)) {\n            return this.drawPrompt$java_lang_String$int(var1, var2);\n        }\n        else if (var1 \u003d\u003d\u003d undefined \u0026\u0026 var2 \u003d\u003d\u003d undefined) {\n            return this.drawPrompt$();\n        }\n        else\n            throw new Error(\u0027invalid overload\u0027);\n    };\n    /*private*/ Slime2P.prototype.SaveReplayData \u003d function () {\n        this.replayData[this.replayPos][0] \u003d this.p1X;\n        this.replayData[this.replayPos][1] \u003d this.p1Y;\n        this.replayData[this.replayPos][2] \u003d this.p2X;\n        this.replayData[this.replayPos][3] \u003d this.p2Y;\n        this.replayData[this.replayPos][4] \u003d this.ballX;\n        this.replayData[this.replayPos][5] \u003d this.ballY;\n        ++this.replayPos;\n        if (this.replayPos \u003e\u003d 200) {\n            this.replayPos \u003d 0;\n        }\n        if (this.replayStart \u003d\u003d\u003d this.replayPos) {\n            ++this.replayStart;\n        }\n        if (this.replayStart \u003e\u003d 200) {\n            this.replayStart \u003d 0;\n        }\n    };\n    /*private*/ Slime2P.prototype.ReplayFrame \u003d function (var1) {\n        var var2 \u003d var1 !\u003d\u003d 0 ? var1 - 1 : 199;\n        this.p1OldX \u003d this.replayData[var2][0];\n        this.p1OldY \u003d this.replayData[var2][1];\n        this.p2OldX \u003d this.replayData[var2][2];\n        this.p2OldY \u003d this.replayData[var2][3];\n        this.ballOldX \u003d this.replayData[var2][4];\n        this.ballOldY \u003d this.replayData[var2][5];\n        this.p1X \u003d this.replayData[var1][0];\n        this.p1Y \u003d this.replayData[var1][1];\n        this.p2X \u003d this.replayData[var1][2];\n        this.p2Y \u003d this.replayData[var1][3];\n        this.ballX \u003d this.replayData[var1][4];\n        this.ballY \u003d this.replayData[var1][5];\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 1;\n        this.DrawSlimers();\n        if (this.buffered) {\n            this.getGraphics().drawImage(this.buffer, 0, 0, null);\n        }\n    };\n    Slime2P.prototype.run \u003d function () {\n        this.replayPos \u003d this.replayStart \u003d 0;\n        if (this.firstHalf) {\n            this.fSelectedColours \u003d false;\n            this.p1Col \u003d 0;\n            this.p2Col \u003d 1;\n            this.promptMsg \u003d \"Select a slime and click the mouse when warmed up.\";\n            this.drawPrompt();\n            this.superFlash \u003d false;\n            this.scoringRun \u003d 0;\n            this.fP1Touches \u003d 0;\n            this.fP2Touches \u003d 0;\n            this.fP1TouchesTot \u003d 0;\n            this.fP2TouchesTot \u003d 0;\n            this.fP1Clangers \u003d 0;\n            this.fP2Clangers \u003d 0;\n            this.fP1Aces \u003d 0;\n            this.fP2Aces \u003d 0;\n            this.fP1Winners \u003d 0;\n            this.fP2Winners \u003d 0;\n            this.fP1PointsWon \u003d 0;\n            this.fP2PointsWon \u003d 0;\n            this.fP1Frames \u003d 0;\n            this.fP2Frames \u003d 0;\n            this.fP1Super \u003d 0;\n            this.fP2Super \u003d 0;\n            this.fP1Streak \u003d 0;\n            this.fP2Streak \u003d 0;\n            this.wind \u003d ((30.0 - 60.0 * Math.random()) | 0);\n        }\n        else {\n            this.ballX \u003d 200;\n            this.scoringRun \u003d 0;\n            this.superFlash \u003d false;\n            var var1 \u003d this.p1Col;\n            this.p1Col \u003d this.p2Col;\n            this.p2Col \u003d var1;\n            var1 \u003d this.fP1Touches;\n            this.fP1Touches \u003d this.fP2Touches;\n            this.fP2Touches \u003d var1;\n            var1 \u003d this.fP1TouchesTot;\n            this.fP1TouchesTot \u003d this.fP2TouchesTot;\n            this.fP2TouchesTot \u003d var1;\n            var1 \u003d this.fP1Clangers;\n            this.fP1Clangers \u003d this.fP2Clangers;\n            this.fP2Clangers \u003d var1;\n            var1 \u003d this.fP1Aces;\n            this.fP1Aces \u003d this.fP2Aces;\n            this.fP2Aces \u003d var1;\n            var1 \u003d this.fP1Winners;\n            this.fP1Winners \u003d this.fP2Winners;\n            this.fP2Winners \u003d var1;\n            var1 \u003d this.fP1PointsWon;\n            this.fP1PointsWon \u003d this.fP2PointsWon;\n            this.fP2PointsWon \u003d var1;\n            var var2 \u003d this.fP1Frames;\n            this.fP1Frames \u003d this.fP2Frames;\n            this.fP2Frames \u003d var2;\n            var1 \u003d this.fP1Super;\n            this.fP1Super \u003d this.fP2Super;\n            this.fP2Super \u003d var1;\n            var1 \u003d this.fP1Streak;\n            this.fP1Streak \u003d this.fP2Streak;\n            this.fP2Streak \u003d var1;\n            this.repaint();\n        }\n        this.fP1HitStill \u003d false;\n        this.fP2HitStill \u003d false;\n        this.fServerMoved \u003d false;\n        this.crossedNetTime \u003d 0;\n        this.drawScores();\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.hitNetSinceTouched \u003d false;\n        var var9 \u003d false;\n        var var8 \u003d false;\n        var var3 \u003d false;\n        this.startTime \u003d ShimmedSystem.currentTimeMillis();\n        this.realStartTime \u003d this.startTime;\n        while ((this.gameThread !\u003d null)) {\n            if (!this.fSelectedColours) {\n                this.startTime \u003d ShimmedSystem.currentTimeMillis() - this.gameTime;\n                this.realStartTime \u003d this.startTime;\n            }\n            else {\n                this.gameTime \u003d ShimmedSystem.currentTimeMillis() - this.startTime;\n            }\n            this.SaveReplayData();\n            if (!this.fServerMoved) {\n                this.crossedNetTime \u003d ShimmedSystem.currentTimeMillis();\n            }\n            else if (this.crossedNetTime \u003c 0 \u0026\u0026 this.ballX \u003e 500 - (3 * this.nHeight / 50 | 0) || this.crossedNetTime \u003e 0 \u0026\u0026 this.ballX \u003c 500 + (3 * this.nHeight / 50 | 0)) {\n                this.crossedNetTime \u003d this.ballX \u003c\u003d 500 ? -ShimmedSystem.currentTimeMillis() : ShimmedSystem.currentTimeMillis();\n                this.drawPrompt();\n            }\n            this.p1OldX \u003d this.p1X;\n            this.p1OldY \u003d this.p1Y;\n            this.p2OldX \u003d this.p2X;\n            this.p2OldY \u003d this.p2Y;\n            this.ballOldX \u003d this.ballX;\n            this.ballOldY \u003d this.ballY;\n            this.DrawStatus();\n            if (this.windOn) {\n                this.doWind();\n                this.unDrawParticles();\n                this.updateParticles();\n                this.drawParticles();\n                this.screen.setColor(ShimmedColor.white);\n                this.screen.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);\n            }\n            this.MoveSlimers();\n            this.DrawSlimers();\n            if (this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, null);\n            }\n            if (this.fServerMoved \u0026\u0026 this.fSelectedColours) {\n                if (this.ballX \u003c 500 - (3 * this.nHeight / 50 | 0)) {\n                    ++this.fP1Frames;\n                }\n                else if (this.ballX \u003e 500 + (3 * this.nHeight / 50 | 0)) {\n                    ++this.fP2Frames;\n                }\n            }\n            if (!this.fSelectedColours \u0026\u0026 this.ballY \u003c 35) {\n                ShimmedThread.sleep$long$boolean(1000, false);\n                this.p1X \u003d 200;\n                this.p1Y \u003d 0;\n                this.p2X \u003d 800;\n                this.p2Y \u003d 0;\n                this.p1XV \u003d 0;\n                this.p1YV \u003d 0;\n                this.p2XV \u003d 0;\n                this.p2YV \u003d 0;\n                this.ballX \u003d this.ballX \u003e\u003d 500 ? 200 : 800;\n                this.ballY \u003d 400;\n                this.ballVX \u003d 0;\n                this.ballVY \u003d 0;\n                this.fServerMoved \u003d false;\n                this.fP1Touched \u003d this.fP2Touched \u003d false;\n                this.repaint();\n            }\n            else {\n                var var4 \u003d void 0;\n                if (this.fSelectedColours \u0026\u0026 this.holdingOn \u0026\u0026 Math.abs(this.crossedNetTime) + 5000 \u003c ShimmedSystem.currentTimeMillis() \u0026\u0026 this.ballY \u003e\u003d 35) {\n                    var4 \u003d ShimmedSystem.currentTimeMillis();\n                    this.promptMsg \u003d \"BALL... YES!\";\n                    this.drawPrompt();\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt$java_lang_String$int(\"Holding the ball against \" + (this.ballX \u003c\u003d 500 ? this.slimeColText[this.p1Col] : this.slimeColText[this.p2Col]) + \"!!\", 1);\n                    this.drawPrompt$java_lang_String$int(\"Press space for replay...\", 2);\n                    if (this.buffered) {\n                        this.getGraphics().drawImage(this.buffer, 0, 0, null);\n                    }\n                    this.mousePressed \u003d false;\n                    if (this.ballX \u003e 500) {\n                        ++this.fP1PointsWon;\n                        ++this.fP2Clangers;\n                    }\n                    else {\n                        ++this.fP2PointsWon;\n                        ++this.fP1Clangers;\n                    }\n                    this.oldScoringRun \u003d this.scoringRun;\n                    if (this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        ++this.scoringRun;\n                        if (this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    }\n                    else if (this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        --this.scoringRun;\n                        if (-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    }\n                    else if (this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        this.scoringRun \u003d 1;\n                        if (this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    }\n                    else if (this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        this.scoringRun \u003d -1;\n                        if (-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    }\n                    this.drawScores();\n                    this.DrawStatus();\n                    ShimmedThread.sleep$long$boolean(1000, true);\n                    if (this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt();\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d this.ballX \u003e\u003d 500 ? 200 : 800;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.fP1Touched \u003d this.fP2Touched \u003d false;\n                    this.fServerMoved \u003d false;\n                    if (this.GAME_LENGTH \u003c\u003d this.gameTime) {\n                        this.endHalf();\n                    }\n                    this.repaint();\n                }\n                else if (this.fSelectedColours \u0026\u0026 this.holdingOn \u0026\u0026 Math.abs(this.crossedNetTime) + 5000 - 1000 \u003c ShimmedSystem.currentTimeMillis() \u0026\u0026 this.ballY \u003e\u003d 35) {\n                    this.promptMsg \u003d \"BALL...\";\n                    if (this.buffered) {\n                        this.getGraphics().drawImage(this.buffer, 0, 0, null);\n                    }\n                    this.drawPrompt();\n                    this.promptMsg \u003d \"\";\n                }\n                else if (this.ballY \u003c 35) {\n                    var4 \u003d ShimmedSystem.currentTimeMillis();\n                    if (this.ballX \u003e 500) {\n                        ++this.fP1PointsWon;\n                    }\n                    else {\n                        ++this.fP2PointsWon;\n                    }\n                    this.oldScoringRun \u003d this.scoringRun;\n                    if (this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        ++this.scoringRun;\n                        if (this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    }\n                    else if (this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        --this.scoringRun;\n                        if (-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    }\n                    else if (this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        this.scoringRun \u003d 1;\n                        if (this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    }\n                    else if (this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        this.scoringRun \u003d -1;\n                        if (-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    }\n                    if (this.ballX \u003e 500 || this.fP1Touches \u003c 3 \u0026\u0026 (!this.hitNetSinceTouched || this.fP1Touches \u003c\u003d 0) \u0026\u0026 this.fP2Touched \u0026\u0026 (!this.fP1HitStill || this.fP1Touches \u003c\u003d 0)) {\n                        if (this.ballX \u003e 500 \u0026\u0026 (this.fP2Touches \u003e\u003d 3 || this.hitNetSinceTouched \u0026\u0026 this.fP2Touches \u003e 0 || !this.fP1Touched || this.fP2HitStill \u0026\u0026 this.fP2Touches \u003e 0)) {\n                            ++this.fP2Clangers;\n                            var9 \u003d true;\n                        }\n                    }\n                    else {\n                        ++this.fP1Clangers;\n                        var9 \u003d true;\n                    }\n                    if (this.fP1Touched \u0026\u0026 !this.fP2Touched \u0026\u0026 this.ballX \u003e\u003d 500) {\n                        ++this.fP1Aces;\n                        var8 \u003d true;\n                    }\n                    else if (this.fP2Touched \u0026\u0026 !this.fP1Touched \u0026\u0026 this.ballX \u003c 500) {\n                        ++this.fP2Aces;\n                        var8 \u003d true;\n                    }\n                    else if (this.ballX \u003e 500 \u0026\u0026 this.fP1Touches \u003e 0) {\n                        ++this.fP1Winners;\n                        var3 \u003d true;\n                    }\n                    else if (this.ballX \u003c\u003d 500 \u0026\u0026 this.fP2Touches \u003e 0) {\n                        ++this.fP2Winners;\n                        var3 \u003d true;\n                    }\n                    if (Math.abs(this.scoringRun) \u003e 6) {\n                        this.promptMsg \u003d \"Super \" + (this.ballX \u003c\u003d 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col]);\n                    }\n                    else {\n                        this.promptMsg \u003d this.ballX \u003c\u003d 500 ? this.slimeColText[this.p2Col] : this.slimeColText[this.p1Col];\n                    }\n                    if (!this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                        this.promptMsg \u003d \"What can I say?\";\n                    }\n                    else if ((this.scoringRun \u003c 0 ? -this.scoringRun : this.scoringRun) \u003d\u003d\u003d 5) {\n                        this.promptMsg \u003d this.promptMsg + \"is heating up!\";\n                    }\n                    else if ((this.scoringRun \u003c 0 ? -this.scoringRun : this.scoringRun) \u003d\u003d\u003d 6) {\n                        this.promptMsg \u003d this.promptMsg + \"is on fire!\";\n                        if (this.scoringRun \u003c 0) {\n                            ++this.fP1Super;\n                        }\n                        else {\n                            ++this.fP2Super;\n                        }\n                    }\n                    else if ((this.ballX \u003c\u003d 500 || !this.fP1Touched || this.fP2Touched) \u0026\u0026 (this.ballX \u003e 500 || this.fP1Touched || !this.fP2Touched)) {\n                        if (this.ballX \u003e 500 \u0026\u0026 !this.fP1Touched \u0026\u0026 this.fP2Touched || this.ballX \u003c\u003d 500 \u0026\u0026 this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                            this.promptMsg \u003d (this.ballX \u003c 500 ? this.slimeColText[this.p1Col] : this.slimeColText[this.p2Col]) + \"can\\\u0027t serve!\";\n                        }\n                        else if (this.fP1PointsWon \u003d\u003d\u003d this.fP2PointsWon) {\n                            this.promptMsg \u003d this.promptMsg + \"draws level!\";\n                        }\n                        else if ((this.ballX \u003c\u003d 500 || this.fP1PointsWon !\u003d\u003d this.fP2PointsWon + 1) \u0026\u0026 (this.ballX \u003e 500 || this.fP1PointsWon + 1 !\u003d\u003d this.fP2PointsWon)) {\n                            this.promptMsg \u003d this.promptMsg + \"scores!\";\n                        }\n                        else {\n                            this.promptMsg \u003d this.promptMsg + \"takes the lead!\";\n                        }\n                    }\n                    else {\n                        this.promptMsg \u003d this.promptMsg + \"aces the serve!\";\n                    }\n                    var var6 \u003d this.ballX;\n                    this.drawPrompt();\n                    if ((-this.scoringRun \u003e\u003d this.fP1Streak || this.scoringRun \u003e\u003d this.fP2Streak) \u0026\u0026 Math.abs(this.scoringRun) \u003e\u003d 3) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Streak + \" \u003c\u003c Longest streak \u003e\u003e \" + this.fP2Streak, 2);\n                    }\n                    else if (var9) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Clangers + \" \u003c\u003c Clangers \u003e\u003e \" + this.fP2Clangers, 2);\n                    }\n                    else if (var8) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Aces + \" \u003c\u003c Aces \u003e\u003e \" + this.fP2Aces, 2);\n                    }\n                    else if (var3) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Winners + \" \u003c\u003c Winners \u003e\u003e \" + this.fP2Winners, 2);\n                    }\n                    else {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1PointsWon + \" \u003c\u003c Points won \u003e\u003e \" + this.fP2PointsWon, 2);\n                    }\n                    var9 \u003d false;\n                    var8 \u003d false;\n                    var3 \u003d false;\n                    this.drawPrompt$java_lang_String$int(\"Press space for replay...\", 1);\n                    this.mousePressed \u003d false;\n                    this.drawScores();\n                    this.DrawStatus();\n                    if (this.buffered) {\n                        this.getGraphics().drawImage(this.buffer, 0, 0, null);\n                    }\n                    ShimmedThread.sleep$long$boolean(1000, true);\n                    if (this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt();\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d var6 \u003e\u003d 500 ? 200 : 800;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.fP1Touched \u003d this.fP2Touched \u003d false;\n                    this.fServerMoved \u003d false;\n                    if (this.GAME_LENGTH \u003c\u003d this.gameTime) {\n                        this.endHalf();\n                    }\n                    this.repaint();\n                }\n            }\n            if (this.gameThread !\u003d null) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                }\n                catch (var7) {\n                }\n                ;\n            }\n        }\n        ;\n        this.fEndGame \u003d true;\n        this.fInPlay \u003d false;\n        this.promptMsg \u003d \"\";\n        this.repaint();\n    };\n    /*private*/ Slime2P.prototype.endHalf \u003d function () {\n        if (this.firstHalf) {\n            this.gameTime \u003d 0;\n            this.firstHalf \u003d false;\n            this.promptMsg \u003d \"It\\\u0027s half time.\";\n            this.drawPrompt();\n            if (this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, null);\n            }\n            this.promptMsg \u003d \"\";\n        }\n        else {\n            this.promptMsg \u003d \"\";\n            this.drawPrompt();\n            this.drawPrompt$java_lang_String$int(\"... and that\\\u0027s the game.\", 0);\n            if (this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, null);\n            }\n            this.promptMsg \u003d \"\";\n            ShimmedThread.sleep$long$boolean(1000, false);\n            if (this.fP1PointsWon \u003e this.fP2PointsWon) {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \"Wins!\", 1);\n            }\n            else if (this.fP2PointsWon \u003e this.fP1PointsWon) {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p2Col] + \"Wins!\", 1);\n            }\n            else {\n                this.drawPrompt$java_lang_String$int(\"It\\\u0027s a draw!\", 1);\n            }\n            if (this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, null);\n            }\n            this.gameTime \u003d 0;\n            this.firstHalf \u003d true;\n        }\n        ShimmedThread.sleep$long$boolean(3000, false);\n        this.p1X \u003d 200;\n        this.p1Y \u003d 0;\n        this.p2X \u003d 800;\n        this.p2Y \u003d 0;\n        this.p1XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p2YV \u003d 0;\n        this.ballX \u003d this.firstHalf ? 200 : 800;\n        this.ballY \u003d 400;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.replayStart \u003d this.replayPos \u003d 0;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.fServerMoved \u003d false;\n        this.repaint();\n        this.gameThread \u003d null;\n    };\n    /*private*/ Slime2P.prototype.DoReplay \u003d function () {\n        var var1 \u003d this.screen.getFontMetrics();\n        var var2 \u003d var1.getHeight();\n        this.promptMsg \u003d \"Press space to continue...\";\n        this.mousePressed \u003d false;\n        var var3 \u003d this.scoringRun;\n        this.scoringRun \u003d this.oldScoringRun;\n        var var4 \u003d this.replayStart;\n        var var5 \u003d false;\n        this.drawCourt(this.screen);\n        while ((!this.mousePressed)) {\n            ++var4;\n            if (var4 \u003e\u003d 200) {\n                var4 \u003d 0;\n            }\n            if (var4 \u003d\u003d\u003d this.replayPos) {\n                this.screen.setColor(ShimmedColor.white);\n                this.screen.fillRect(20, 20, 20, 20);\n                ShimmedThread.sleep$long$boolean(1000, false);\n                var5 \u003d !var5;\n                this.paint(this.screen);\n                this.screen.setColor(this.SKY_COL);\n                this.screen.fillRect(0, 0, this.nWidth, (this.nHeight / 20 | 0) + 22);\n                if (this.replayPos \u003c this.replayStart) {\n                    var4 +\u003d 200;\n                }\n                while ((var4 \u003e this.replayStart)) {\n                    var4 -\u003d 5;\n                    this.drawCourt(this.screen);\n                    this.screen.setColor(ShimmedColor.white);\n                    this.screen.fillPolygon$ShimmedPolygon(new ShimmedPolygon([20, 35, 35, 50, 50, 35, 35, 20], [30, 20, 30, 20, 40, 30, 40, 30], 8));\n                    if (var4 \u003c this.replayStart) {\n                        var4 \u003d this.replayStart;\n                    }\n                    this.ReplayFrame(var4 % 200);\n                    ShimmedThread.sleep$long$boolean(20, false);\n                }\n                ;\n                this.drawCourt(this.screen);\n                this.screen.setColor(ShimmedColor.white);\n                this.screen.fillRect(20, 20, 20, 20);\n                this.ReplayFrame(this.replayStart);\n                ShimmedThread.sleep$long$boolean(500, false);\n                this.drawCourt(this.screen);\n            }\n            this.ReplayFrame(var4);\n            try {\n                ShimmedThread.sleep$long(var5 ? 60 : 20);\n            }\n            catch (var7) {\n            }\n            ;\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.fillPolygon$ShimmedPolygon(new ShimmedPolygon([20, 35, 20], [20, 30, 40], 3));\n            this.screen.drawString(var5 ? \"Slow motion replay\" : \"Replay\", 60, 35 - (var2 / 2 | 0));\n        }\n        ;\n        this.scoringRun \u003d var3;\n        this.promptMsg \u003d \"\";\n        this.paint(this.screen);\n    };\n    /*private*/ Slime2P.prototype.drawCourt \u003d function (var1) {\n        var1.setColor(this.SKY_COL);\n        var1.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5 | 0));\n        var1.setColor(this.COURT_COL);\n        var1.fillRect(0, (4 * this.nHeight / 5 | 0), this.nWidth, (this.nHeight / 5 | 0));\n        var1.setColor(ShimmedColor.white);\n        var1.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);\n        this.drawPrompt();\n    };\n    /*private*/ Slime2P.prototype.unDrawParticles \u003d function () {\n        this.screen.setColor(this.SKY_COL);\n        for (var var1 \u003d 0; var1 \u003c this.NUM_PARTICLES; ++var1) {\n            this.screen.fillOval(this.particle_x[var1], this.particle_y[var1], this.particle_size, this.particle_size);\n        }\n        ;\n    };\n    /*private*/ Slime2P.prototype.updateParticles \u003d function () {\n        for (var var1 \u003d 0; var1 \u003c this.NUM_PARTICLES; ++var1) {\n            this.particle_x[var1] \u003d ((this.particle_x[var1] + this.particle_weight[var1] * this.wind / 3.0) | 0);\n            var var2 \u003d ((this.particle_weight[var1] * 3.0) | 0);\n            this.particle_y[var1] +\u003d var2 \u003e 0 ? var2 : 1;\n            if (this.particle_x[var1] \u003c 0 || this.particle_x[var1] \u003e this.nWidth || this.particle_y[var1] \u003e this.floor) {\n                if (Math.random() \u003e Math.abs(this.wind / 60.0)) {\n                    this.particle_x[var1] \u003d ((Math.random() * this.nWidth) | 0);\n                    this.particle_y[var1] \u003d 0;\n                }\n                else if (this.wind \u003e 0) {\n                    this.particle_x[var1] \u003d -1;\n                    this.particle_y[var1] \u003d ((Math.random() * this.floor) | 0);\n                }\n                else {\n                    this.particle_x[var1] \u003d this.nWidth + 1;\n                    this.particle_y[var1] \u003d ((Math.random() * this.floor) | 0);\n                }\n            }\n        }\n        ;\n    };\n    /*private*/ Slime2P.prototype.drawParticles \u003d function () {\n        for (var var2 \u003d 0; var2 \u003c this.NUM_PARTICLES; ++var2) {\n            var var1 \u003d ((170.0 * this.particle_weight[var2]) | 0);\n            this.screen.setColor(new ShimmedColor(85 + var1, 85 + var1, 255));\n            this.screen.fillOval(this.particle_x[var2], this.particle_y[var2], this.particle_size, this.particle_size);\n        }\n        ;\n    };\n    /*private*/ Slime2P.prototype.sleep \u003d function (var1, var3) {\n        if (this.gameThread !\u003d null) {\n            for (var var4 \u003d 0; Math.floor(var4) \u003c Math.floor(var1 / 20); ++var4) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                }\n                catch (var6) {\n                }\n                ;\n                if (var3) {\n                    this.DrawStatus();\n                    if (this.windOn) {\n                        this.doWind();\n                        this.unDrawParticles();\n                        this.updateParticles();\n                        this.drawParticles();\n                        this.screen.setColor(ShimmedColor.white);\n                        this.screen.fillRect((this.nWidth / 2 | 0) - 2, (7 * this.nHeight / 10 | 0), 4, (this.nHeight / 10 | 0) + 5);\n                    }\n                }\n            }\n            ;\n        }\n    };\n    Slime2P.prototype.destroy \u003d function () {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    };\n    return Slime2P;\n}(ShimmedApplet));\nSlime2P[\"__class\"] \u003d \"Slime2P\";\nSlime2P[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\nvar ShimmedBufferedImage \u003d (function (_super) {\n    __extends(ShimmedBufferedImage, _super);\n    function ShimmedBufferedImage(x, y, z) {\n        return _super.call(this) || this;\n    }\n    ShimmedBufferedImage.prototype.getSubimage \u003d function (a, b, c, d) {\n        return null;\n    };\n    return ShimmedBufferedImage;\n}(ShimmedImage));\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\nvar ShimmedFrame \u003d (function (_super) {\n    __extends(ShimmedFrame, _super);\n    function ShimmedFrame() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    ShimmedFrame.prototype.setTitle \u003d function (s) {\n    };\n    ShimmedFrame.prototype.pack \u003d function () {\n    };\n    ShimmedFrame.prototype.show \u003d function () {\n    };\n    ShimmedFrame.prototype.dispose \u003d function () {\n    };\n    ShimmedFrame.prototype.setLayout \u003d function (g) {\n    };\n    return ShimmedFrame;\n}(ShimmedElement));\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\nvar ShimmedTextField \u003d (function (_super) {\n    __extends(ShimmedTextField, _super);\n    function ShimmedTextField(s) {\n        return _super.call(this) || this;\n    }\n    ShimmedTextField.prototype.getText \u003d function () {\n        return null;\n    };\n    return ShimmedTextField;\n}(ShimmedElement));\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\nvar ShimmedButton \u003d (function (_super) {\n    __extends(ShimmedButton, _super);\n    function ShimmedButton(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedButton;\n}(ShimmedElement));\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\nvar ShimmedPanel \u003d (function (_super) {\n    __extends(ShimmedPanel, _super);\n    function ShimmedPanel() {\n        return _super !\u003d\u003d null \u0026\u0026 _super.apply(this, arguments) || this;\n    }\n    return ShimmedPanel;\n}(ShimmedElement));\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\nvar ShimmedLabel \u003d (function (_super) {\n    __extends(ShimmedLabel, _super);\n    function ShimmedLabel(s) {\n        return _super.call(this) || this;\n    }\n    return ShimmedLabel;\n}(ShimmedElement));\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n",
  "tsout": "/* Generated from Java with JSweet 2.0.0 - http://www.jsweet.org */\nclass ShimmedSize {\n    public width : number;\n\n    public height : number;\n\n    constructor() {\n        this.width \u003d 0;\n        this.height \u003d 0;\n    }\n}\nShimmedSize[\"__class\"] \u003d \"ShimmedSize\";\n\n\nclass ShimmedApplet {\n    public size() : ShimmedSize {\n        return null;\n    }\n\n    public createImage(x : number, y : number) : ShimmedImage {\n        return null;\n    }\n\n    public showStatus(s : string) {\n    }\n\n    public repaint() {\n    }\n\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public requestFocus() {\n    }\n\n    public getWidth() : number {\n        return 0;\n    }\n\n    public getHeight() : number {\n        return 0;\n    }\n\n    public getDocumentBase() : ShimmedDocumentBase {\n        return null;\n    }\n\n    public getAppletContext() : ShimmedAppletContext {\n        return null;\n    }\n\n    public getCodeBase() : ShimmedURL {\n        return null;\n    }\n\n    public getAudioClip(u : ShimmedURL, s : string) : ShimmedAudioClip {\n        return null;\n    }\n\n    public getImage(u : ShimmedURL, s : string) : ShimmedImage {\n        return null;\n    }\n}\nShimmedApplet[\"__class\"] \u003d \"ShimmedApplet\";\n\n\nclass ShimmedColor {\n    public static yellow : ShimmedColor \u003d null;\n\n    public static black : ShimmedColor \u003d null;\n\n    public static red : ShimmedColor \u003d null;\n\n    public static gray : ShimmedColor \u003d null;\n\n    public static white : ShimmedColor \u003d null;\n\n    public static blue : ShimmedColor \u003d null;\n\n    public static green : ShimmedColor \u003d null;\n\n    public static pink : ShimmedColor \u003d null;\n\n    public static cyan : ShimmedColor \u003d null;\n\n    public static lightGray : ShimmedColor \u003d null;\n\n    public static darkGray : ShimmedColor \u003d null;\n\n    public static orange : ShimmedColor \u003d null;\n\n    public constructor(r : number, g : number, b : number) {\n    }\n}\nShimmedColor[\"__class\"] \u003d \"ShimmedColor\";\n\n\nclass ShimmedGraphics {\n    public getFont() : ShimmedFont {\n        return null;\n    }\n\n    public setFont(f : ShimmedFont) {\n    }\n\n    public setColor(c : ShimmedColor) {\n    }\n\n    public fillRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public getFontMetrics() : ShimmedFontMetrics {\n        return null;\n    }\n\n    public drawString(s : string, x : number, y : number) {\n    }\n\n    public drawImage(i : ShimmedImage, x : number, y : number, o : any) {\n    }\n\n    public drawOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillOval(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n\n    public drawLine(x : number, y : number, w : number, h : number) {\n    }\n\n    public drawRect(x : number, y : number, w : number, h : number) {\n    }\n\n    public fillPolygon$int_A$int_A$int(xs : number[], ys : number[], n : number) {\n    }\n\n    public fillPolygon(xs? : any, ys? : any, n? : any) : any {\n        if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eArray \u0026\u0026 (xs.length\u003d\u003d0 || xs[0] \u003d\u003d null ||(typeof xs[0] \u003d\u003d\u003d \u0027number\u0027))) || xs \u003d\u003d\u003d null) \u0026\u0026 ((ys !\u003d null \u0026\u0026 ys instanceof \u003cany\u003eArray \u0026\u0026 (ys.length\u003d\u003d0 || ys[0] \u003d\u003d null ||(typeof ys[0] \u003d\u003d\u003d \u0027number\u0027))) || ys \u003d\u003d\u003d null) \u0026\u0026 ((typeof n \u003d\u003d\u003d \u0027number\u0027) || n \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.fillPolygon$int_A$int_A$int(xs, ys, n);\n        } else if(((xs !\u003d null \u0026\u0026 xs instanceof \u003cany\u003eShimmedPolygon) || xs \u003d\u003d\u003d null) \u0026\u0026 ys \u003d\u003d\u003d undefined \u0026\u0026 n \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.fillPolygon$ShimmedPolygon(xs);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public fillPolygon$ShimmedPolygon(p : ShimmedPolygon) {\n    }\n\n    public drawArc(x : number, y : number, w : number, h : number, s : number, e : number) {\n    }\n}\nShimmedGraphics[\"__class\"] \u003d \"ShimmedGraphics\";\n\n\nclass ShimmedImage {\n    public getGraphics() : ShimmedGraphics {\n        return null;\n    }\n\n    public getHeight(a : ShimmedApplet) : number {\n        return 0;\n    }\n}\nShimmedImage[\"__class\"] \u003d \"ShimmedImage\";\n\n\nclass ShimmedEvent {\n    public id : number;\n\n    public x : number;\n\n    public y : number;\n\n    public key : number;\n\n    public target : ShimmedButton;\n\n    public static KEY_ACTION : number \u003d 0;\n\n    public static LEFT : number \u003d 1;\n\n    public static RIGHT : number \u003d 2;\n\n    public static UP : number \u003d 3;\n\n    public static DOWN : number \u003d 4;\n\n    public static KEY_ACTION_RELEASE : number \u003d 5;\n\n    constructor() {\n        this.id \u003d 0;\n        this.x \u003d 0;\n        this.y \u003d 0;\n        this.key \u003d 0;\n        this.target \u003d null;\n    }\n}\nShimmedEvent[\"__class\"] \u003d \"ShimmedEvent\";\n\n\nclass ShimmedFont {\n    public getName() : string {\n        return null;\n    }\n\n    public constructor(name : string, w : number, h : number) {\n    }\n}\nShimmedFont[\"__class\"] \u003d \"ShimmedFont\";\n\n\nclass ShimmedFontMetrics {\n    public getHeight() : number {\n        return 0;\n    }\n\n    public stringWidth(s : string) : number {\n        return 0;\n    }\n\n    public getAscent() : number {\n        return 0;\n    }\n}\nShimmedFontMetrics[\"__class\"] \u003d \"ShimmedFontMetrics\";\n\n\nclass ShimmedThread {\n    public static sleep$long(ms : number) {\n    }\n\n    public static sleep$long$boolean(ms : number, b : boolean) {\n    }\n\n    public static sleep(ms? : any, b? : any) : any {\n        if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 ((typeof b \u003d\u003d\u003d \u0027boolean\u0027) || b \u003d\u003d\u003d null)) {\n            return \u003cany\u003eShimmedThread.sleep$long$boolean(ms, b);\n        } else if(((typeof ms \u003d\u003d\u003d \u0027number\u0027) || ms \u003d\u003d\u003d null) \u0026\u0026 b \u003d\u003d\u003d undefined) {\n            return \u003cany\u003eShimmedThread.sleep$long(ms);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public constructor(r : ShimmedRunnable) {\n    }\n\n    public start() {\n    }\n\n    public stop() {\n    }\n}\nShimmedThread[\"__class\"] \u003d \"ShimmedThread\";\n\n\ninterface ShimmedRunnable {}\n\nclass ShimmedAppletContext {\n    public showDocument$ShimmedURL(u : ShimmedURL) {\n    }\n\n    public showDocument$ShimmedURL$java_lang_String(u : ShimmedURL, s : string) {\n    }\n\n    public showDocument(u? : any, s? : any) : any {\n        if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 ((typeof s \u003d\u003d\u003d \u0027string\u0027) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL$java_lang_String(u, s);\n        } else if(((u !\u003d null \u0026\u0026 u instanceof \u003cany\u003eShimmedURL) || u \u003d\u003d\u003d null) \u0026\u0026 s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.showDocument$ShimmedURL(u);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedAppletContext[\"__class\"] \u003d \"ShimmedAppletContext\";\n\n\nclass ShimmedDocumentBase {\n    public getHost() : string {\n        return null;\n    }\n}\nShimmedDocumentBase[\"__class\"] \u003d \"ShimmedDocumentBase\";\n\n\nclass ShimmedURL {\n    public constructor(s : string) {\n    }\n\n    public openStream() : ShimmedInputStream {\n        return null;\n    }\n}\nShimmedURL[\"__class\"] \u003d \"ShimmedURL\";\n\n\nclass ShimmedPrintStream {\n    public print(s : any) : any {\n        return null;\n    }\n\n    public println$() : any {\n        return null;\n    }\n\n    public println$java_lang_Object(s : any) : any {\n        return null;\n    }\n\n    public println(s? : any) : any {\n        if(((s !\u003d null) || s \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.println$java_lang_Object(s);\n        } else if(s \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.println$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n}\nShimmedPrintStream[\"__class\"] \u003d \"ShimmedPrintStream\";\n\n\nclass ShimmedSystem {\n    public static out : ShimmedPrintStream \u003d null;\n\n    public static currentTimeMillis() : number {\n        return 0;\n    }\n}\nShimmedSystem[\"__class\"] \u003d \"ShimmedSystem\";\n\n\nclass ShimmedVector {\n    public constructor(n : number) {\n    }\n\n    public removeAllElements() {\n    }\n\n    public get(i : number) : any {\n        return null;\n    }\n\n    public size() : number {\n        return 0;\n    }\n\n    public add(x : number[]) {\n    }\n}\nShimmedVector[\"__class\"] \u003d \"ShimmedVector\";\n\n\nclass ShimmedElement {\n    public add(e : ShimmedElement) {\n    }\n}\nShimmedElement[\"__class\"] \u003d \"ShimmedElement\";\n\n\nclass ShimmedPolygon {\n    public constructor(xs : number[], ys : number[], n : number) {\n    }\n}\nShimmedPolygon[\"__class\"] \u003d \"ShimmedPolygon\";\n\n\nclass ShimmedInputStream {\n    public close() {\n    }\n}\nShimmedInputStream[\"__class\"] \u003d \"ShimmedInputStream\";\n\n\nclass ShimmedBufferedReader {\n    public constructor(i : ShimmedInputStreamReader) {\n    }\n\n    public readLine() : string {\n        return null;\n    }\n\n    public close() {\n    }\n}\nShimmedBufferedReader[\"__class\"] \u003d \"ShimmedBufferedReader\";\n\n\nclass ShimmedInputStreamReader {\n    public constructor(is : ShimmedInputStream) {\n    }\n}\nShimmedInputStreamReader[\"__class\"] \u003d \"ShimmedInputStreamReader\";\n\n\nclass ShimmedGridLayout {\n    public constructor(x : number, y : number) {\n    }\n}\nShimmedGridLayout[\"__class\"] \u003d \"ShimmedGridLayout\";\n\n\nclass ShimmedLong {\n    public static parseLong(s : string) : number {\n        return 0;\n    }\n}\nShimmedLong[\"__class\"] \u003d \"ShimmedLong\";\n\n\nclass ShimmedChars {\n    /**\n     * Replacement for .toCharArray() which returns chars, when actually we (probably/hopefully) want ints.\n     * @param {string} s\n     * @return {Array}\n     */\n    public static charCodeArray(s : string) : string[] {\n        return null;\n    }\n}\nShimmedChars[\"__class\"] \u003d \"ShimmedChars\";\n\n\nclass ShimmedImageObserver {}\nShimmedImageObserver[\"__class\"] \u003d \"ShimmedImageObserver\";\n\n\nclass ShimmedRandom {\n    public nextInt(m : number) : number {\n        return 0;\n    }\n}\nShimmedRandom[\"__class\"] \u003d \"ShimmedRandom\";\n\n\nclass ShimmedAudioClip {\n    public play() {\n    }\n}\nShimmedAudioClip[\"__class\"] \u003d \"ShimmedAudioClip\";\n\n\nclass ShimmedStringBuffer {\n    public constructor(i? : any) {\n        if(((i !\u003d null) || i \u003d\u003d\u003d null)) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else if(i \u003d\u003d\u003d undefined) {\n            let __args \u003d Array.prototype.slice.call(arguments);\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    public append(s : any) : ShimmedStringBuffer {\n        return null;\n    }\n}\nShimmedStringBuffer[\"__class\"] \u003d \"ShimmedStringBuffer\";\n\n\nclass EndOfShimDeclarations {}\nEndOfShimDeclarations[\"__class\"] \u003d \"EndOfShimDeclarations\";\n\n\nclass Slime2P extends ShimmedApplet implements ShimmedRunnable {\n    /*private*/ nWidth : number;\n\n    /*private*/ nHeight : number;\n\n    /*private*/ p1X : number;\n\n    /*private*/ p1Y : number;\n\n    /*private*/ p2X : number;\n\n    /*private*/ p2Y : number;\n\n    /*private*/ p1Col : number;\n\n    /*private*/ p2Col : number;\n\n    /*private*/ p1OldX : number;\n\n    /*private*/ p1OldY : number;\n\n    /*private*/ p2OldX : number;\n\n    /*private*/ p2OldY : number;\n\n    /*private*/ p1XV : number;\n\n    /*private*/ p1YV : number;\n\n    /*private*/ p2XV : number;\n\n    /*private*/ p2YV : number;\n\n    /*private*/ ballX : number;\n\n    /*private*/ ballY : number;\n\n    /*private*/ ballVX : number;\n\n    /*private*/ ballVY : number;\n\n    /*private*/ ballOldX : number;\n\n    /*private*/ ballOldY : number;\n\n    /*private*/ screen : ShimmedGraphics;\n\n    /*private*/ promptMsg : string;\n\n    /*private*/ replayData : number[][];\n\n    /*private*/ replayPos : number;\n\n    /*private*/ replayStart : number;\n\n    /*private*/ mousePressed : boolean;\n\n    /*private*/ fInPlay : boolean;\n\n    /*private*/ p1Blink : number;\n\n    /*private*/ p2Blink : number;\n\n    /*private*/ fP1Fire : boolean;\n\n    /*private*/ fP2Fire : boolean;\n\n    /*private*/ superFlash : boolean;\n\n    /*private*/ fP1Touched : boolean;\n\n    /*private*/ fP2Touched : boolean;\n\n    /*private*/ fP1Touches : number;\n\n    /*private*/ fP2Touches : number;\n\n    /*private*/ fP1TouchesTot : number;\n\n    /*private*/ fP2TouchesTot : number;\n\n    /*private*/ fP1Clangers : number;\n\n    /*private*/ fP2Clangers : number;\n\n    /*private*/ fP1Aces : number;\n\n    /*private*/ fP2Aces : number;\n\n    /*private*/ fP1Winners : number;\n\n    /*private*/ fP2Winners : number;\n\n    /*private*/ fP1PointsWon : number;\n\n    /*private*/ fP2PointsWon : number;\n\n    /*private*/ fP1HitStill : boolean;\n\n    /*private*/ fP2HitStill : boolean;\n\n    /*private*/ fP1Frames : number;\n\n    /*private*/ fP2Frames : number;\n\n    /*private*/ fP1Super : number;\n\n    /*private*/ fP2Super : number;\n\n    /*private*/ fP1Streak : number;\n\n    /*private*/ fP2Streak : number;\n\n    /*private*/ fSelectedColours : boolean;\n\n    /*private*/ fServerMoved : boolean;\n\n    /*private*/ hitNetSinceTouched : boolean;\n\n    /*private*/ gameThread : ShimmedThread;\n\n    /*private*/ fEndGame : boolean;\n\n    /*private*/ startTime : number;\n\n    /*private*/ gameTime : number;\n\n    /*private*/ realStartTime : number;\n\n    /*private*/ crossedNetTime : number;\n\n    /*private*/ scoringRun : number;\n\n    /*private*/ oldScoringRun : number;\n\n    /*private*/ scoringRunForSuper : number \u003d 6;\n\n    /*private*/ slimeColText : string[];\n\n    /*private*/ slimeColours : ShimmedColor[];\n\n    /*private*/ slimeColours2 : ShimmedColor[];\n\n    /*private*/ SKY_COL : ShimmedColor;\n\n    /*private*/ COURT_COL : ShimmedColor;\n\n    /*private*/ BALL_COL : ShimmedColor;\n\n    /*private*/ nightTime : boolean \u003d false;\n\n    /*private*/ psycho : boolean \u003d false;\n\n    /*private*/ backwards : boolean \u003d false;\n\n    /*private*/ timer : boolean \u003d false;\n\n    /*private*/ buffered : boolean \u003d false;\n\n    /*private*/ field_rn_Slime2P_pw_1 : string[];\n\n    /*private*/ nyt : string \u003d \"night\";\n\n    /*private*/ psy : string \u003d \"super\";\n\n    /*private*/ bck : string \u003d \"toast\";\n\n    /*private*/ tim : string \u003d \"clock\";\n\n    /*private*/ wnd : string \u003d \"windy\";\n\n    /*private*/ hl2 : string \u003d \"2mins\";\n\n    /*private*/ hl3 : string \u003d \"3mins\";\n\n    /*private*/ hl4 : string \u003d \"4mins\";\n\n    /*private*/ hl5 : string \u003d \"5mins\";\n\n    /*private*/ bfr : string \u003d \"uffer\";\n\n    /*private*/ GAME_LENGTH : number \u003d 120000;\n\n    /*private*/ holdingOn : boolean \u003d false;\n\n    /*private*/ HOLDING_LENGTH : number \u003d 5000;\n\n    /*private*/ firstHalf : boolean;\n\n    /*private*/ windOn : boolean \u003d false;\n\n    /*private*/ wind : number;\n\n    /*private*/ maxWind : number \u003d 30;\n\n    /*private*/ NUM_PARTICLES : number \u003d 60;\n\n    /*private*/ particle_size : number \u003d 3;\n\n    /*private*/ particle_x : number[];\n\n    /*private*/ particle_y : number[];\n\n    /*private*/ particle_weight : number[];\n\n    /*private*/ floor : number;\n\n    /*private*/ buffer : ShimmedImage;\n\n    /*private*/ baseFont : ShimmedFont;\n\n    public constructor() {\n        super();\n        this.nWidth \u003d 0;\n        this.nHeight \u003d 0;\n        this.p1X \u003d 0;\n        this.p1Y \u003d 0;\n        this.p2X \u003d 0;\n        this.p2Y \u003d 0;\n        this.p1Col \u003d 0;\n        this.p2Col \u003d 0;\n        this.p1OldX \u003d 0;\n        this.p1OldY \u003d 0;\n        this.p2OldX \u003d 0;\n        this.p2OldY \u003d 0;\n        this.p1XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p2YV \u003d 0;\n        this.ballX \u003d 0;\n        this.ballY \u003d 0;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.ballOldX \u003d 0;\n        this.ballOldY \u003d 0;\n        this.screen \u003d null;\n        this.promptMsg \u003d null;\n        this.replayData \u003d null;\n        this.replayPos \u003d 0;\n        this.replayStart \u003d 0;\n        this.mousePressed \u003d false;\n        this.fInPlay \u003d false;\n        this.p1Blink \u003d 0;\n        this.p2Blink \u003d 0;\n        this.fP1Fire \u003d false;\n        this.fP2Fire \u003d false;\n        this.superFlash \u003d false;\n        this.fP1Touched \u003d false;\n        this.fP2Touched \u003d false;\n        this.fP1Touches \u003d 0;\n        this.fP2Touches \u003d 0;\n        this.fP1TouchesTot \u003d 0;\n        this.fP2TouchesTot \u003d 0;\n        this.fP1Clangers \u003d 0;\n        this.fP2Clangers \u003d 0;\n        this.fP1Aces \u003d 0;\n        this.fP2Aces \u003d 0;\n        this.fP1Winners \u003d 0;\n        this.fP2Winners \u003d 0;\n        this.fP1PointsWon \u003d 0;\n        this.fP2PointsWon \u003d 0;\n        this.fP1HitStill \u003d false;\n        this.fP2HitStill \u003d false;\n        this.fP1Frames \u003d 0;\n        this.fP2Frames \u003d 0;\n        this.fP1Super \u003d 0;\n        this.fP2Super \u003d 0;\n        this.fP1Streak \u003d 0;\n        this.fP2Streak \u003d 0;\n        this.fSelectedColours \u003d false;\n        this.fServerMoved \u003d false;\n        this.hitNetSinceTouched \u003d false;\n        this.gameThread \u003d null;\n        this.fEndGame \u003d false;\n        this.startTime \u003d 0;\n        this.gameTime \u003d 0;\n        this.realStartTime \u003d 0;\n        this.crossedNetTime \u003d 0;\n        this.scoringRun \u003d 0;\n        this.oldScoringRun \u003d 0;\n        this.slimeColText \u003d null;\n        this.slimeColours \u003d null;\n        this.slimeColours2 \u003d null;\n        this.SKY_COL \u003d null;\n        this.COURT_COL \u003d null;\n        this.BALL_COL \u003d null;\n        this.field_rn_Slime2P_pw_1 \u003d null;\n        this.firstHalf \u003d false;\n        this.wind \u003d 0;\n        this.particle_x \u003d null;\n        this.particle_y \u003d null;\n        this.particle_weight \u003d null;\n        this.floor \u003d 0;\n        this.buffer \u003d null;\n        this.baseFont \u003d null;\n        this.particle_x \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.NUM_PARTICLES);\n        this.particle_y \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.NUM_PARTICLES);\n        this.particle_weight \u003d (s \u003d\u003e { let a\u003d[]; while(s--\u003e0) a.push(0); return a; })(this.NUM_PARTICLES);\n        this.floor \u003d 280;\n    }\n\n    public init() {\n        let var1 : string \u003d this.getDocumentBase().getHost();\n        if(!/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var1,\"footyslime.com\"))) {\n            try {\n                this.getAppletContext().showDocument$ShimmedURL$java_lang_String(new ShimmedURL(\"http://footyslime.com/\"), \"_self\");\n            } catch(var6) {\n                ShimmedSystem.out.println$java_lang_Object(\"Couldn\\\u0027t initialise!\");\n                throw Object.defineProperty(new Error(\"Couldn\\\u0027t initialise!\"), \u0027__classes\u0027, { configurable: true, value: [\u0027java.lang.Throwable\u0027,\u0027java.lang.Object\u0027,\u0027java.lang.RuntimeException\u0027,\u0027java.lang.Exception\u0027] });\n            };\n        }\n        this.SKY_COL \u003d new ShimmedColor(85, 85, 255);\n        this.COURT_COL \u003d new ShimmedColor(0, 168, 0);\n        this.BALL_COL \u003d ShimmedColor.yellow;\n        this.nWidth \u003d this.size().width;\n        this.nHeight \u003d this.size().height;\n        this.fInPlay \u003d this.fEndGame \u003d false;\n        this.promptMsg \u003d \"Click the mouse to play...\";\n        this.screen \u003d this.getGraphics();\n        this.baseFont \u003d this.screen.getFont();\n        this.screen.setFont(new ShimmedFont(this.baseFont.getName(), 1, 15));\n        this.replayData \u003d \u003cany\u003e (function(dims) { let allocate \u003d function(dims) { if(dims.length\u003d\u003d0) { return 0; } else { let array \u003d []; for(let i \u003d 0; i \u003c dims[0]; i++) { array.push(allocate(dims.slice(1))); } return array; }}; return allocate(dims);})([200, 6]);\n        this.firstHalf \u003d true;\n        let var2 : number \u003d (this.nWidth / 10|0);\n        let var3 : number \u003d (2 * this.nHeight / 10|0);\n        for(let var4 : number \u003d 0; var4 \u003c this.NUM_PARTICLES; ++var4) {\n            this.particle_x[var4] \u003d (\u003cnumber\u003e(Math.random() * \u003cnumber\u003ethis.nWidth)|0);\n            this.particle_y[var4] \u003d (\u003cnumber\u003e(-Math.random() * 50.0)|0);\n            this.particle_weight[var4] \u003d \u003cnumber\u003e(Math.random() * 0.95 + 0.05);\n        };\n        this.slimeColText \u003d [\"Bronco Slime \", \"Canterbury Bullslime \", \"Cowboy Slime \", \"Dragon McSlimer \", \"Slimy Eel Slime \", \"Knight Slimer \", \"Panther Slime \", \"Rabbitoh Slime \", \"Raider of the Lost Slime \", \"Rooster Slime \", \"Womanly Slime \", \"Shark Slime \", \"Stormy Slime \", \"Tiger Slime \", \"Warrior Slime \"];\n        this.slimeColours \u003d [new ShimmedColor(96, 10, 44), ShimmedColor.white, ShimmedColor.white, ShimmedColor.white, ShimmedColor.yellow, new ShimmedColor(0, 48, 149), ShimmedColor.black, new ShimmedColor(140, 78, 0), new ShimmedColor(167, 216, 11), new ShimmedColor(23, 33, 86), new ShimmedColor(106, 10, 35), new ShimmedColor(0, 173, 227), new ShimmedColor(117, 22, 158), new ShimmedColor(25, 25, 25), new ShimmedColor(48, 34, 37)];\n        this.slimeColours2 \u003d [new ShimmedColor(231, 155, 36), new ShimmedColor(0, 34, 135), new ShimmedColor(6, 40, 79), new ShimmedColor(185, 0, 0), new ShimmedColor(0, 30, 76), new ShimmedColor(237, 37, 64), new ShimmedColor(0, 133, 152), new ShimmedColor(225, 8, 30), new ShimmedColor(0, 35, 154), ShimmedColor.red, ShimmedColor.white, new ShimmedColor(31, 28, 28), new ShimmedColor(161, 161, 162), new ShimmedColor(255, 135, 10), new ShimmedColor(212, 211, 205)];\n        this.field_rn_Slime2P_pw_1 \u003d /* toCharArray */(\".....\").split(\u0027\u0027);\n        this.buffer \u003d this.createImage(this.nWidth, this.nHeight);\n        if(this.buffered) {\n            this.buffered \u003d false;\n            for(let var5 : number \u003d 0; var5 \u003c this.bfr.length; ++var5) {\n                this.pwAddChar(/* toCharArray */(this.bfr).split(\u0027\u0027)[var5]);\n            };\n        }\n    }\n\n    public paint(var1 : ShimmedGraphics) {\n        let var2 : ShimmedGraphics \u003d this.buffered?this.buffer.getGraphics():this.getGraphics();\n        var2.setColor(this.SKY_COL);\n        var2.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5|0));\n        var2.setColor(this.COURT_COL);\n        var2.fillRect(0, (4 * this.nHeight / 5|0), this.nWidth, (this.nHeight / 5|0));\n        var2.setColor(ShimmedColor.white);\n        var2.fillRect((this.nWidth / 2|0) - 2, (7 * this.nHeight / 10|0), 4, (this.nHeight / 10|0) + 5);\n        this.drawScores();\n        this.drawPrompt();\n        if(!this.fInPlay) {\n            let var3 : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n            this.screen.setColor(ShimmedColor.white);\n            if(this.fP1PointsWon + this.fP2PointsWon \u003e 0) {\n                if(this.firstHalf) {\n                    this.screen.drawString(\"NRL Slime Volleyball!\", (this.nWidth / 2|0) - (var3.stringWidth(\"NRL Slime Volleyball!\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 5);\n                }\n                var2.setColor(ShimmedColor.white);\n                var3 \u003d var2.getFontMetrics();\n                if(!this.firstHalf) {\n                    var2.drawString(\"First half stats:\", (this.nWidth / 2|0) - (var3.stringWidth(\"First half stats:\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 4);\n                } else {\n                    var2.drawString(\"Last game\\\u0027s stats:\", (this.nWidth / 2|0) - (var3.stringWidth(\"Last game\\\u0027s stats:\") / 2|0), (this.nHeight / 2|0) - var3.getHeight() * 4);\n                }\n                let var4 : string[] \u003d [\"Possession\", \"Touches\", \"Points won\", \"Winners\", \"Aces\", \"Clangers\", \"Super Slimes\", \"Longest streak\"];\n                let var5 : string[][] \u003d [[\"\" + Math.floor(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames)) + \"%\", \"\" + this.fP1TouchesTot, \"\" + this.fP1PointsWon, \"\" + this.fP1Winners, \"\" + this.fP1Aces, \"\" + this.fP1Clangers, \"\" + this.fP1Super, \"\" + this.fP1Streak], [\"\" + (100 - Math.floor(100 * this.fP1Frames / (this.fP1Frames + this.fP2Frames))) + \"%\", \"\" + this.fP2TouchesTot, \"\" + this.fP2PointsWon, \"\" + this.fP2Winners, \"\" + this.fP2Aces, \"\" + this.fP2Clangers, \"\" + this.fP2Super, \"\" + this.fP2Streak]];\n                let var6 : number \u003d 0;\n                for(let var7 : number \u003d 0; var7 \u003c var4.length; ++var7) {\n                    var6 \u003d Math.max(var6, var3.stringWidth(var4[var7]));\n                };\n                for(let var8 : number \u003d 0; var8 \u003c var4.length; ++var8) {\n                    var2.drawString(var4[var8], (this.nWidth / 2|0) - (var3.stringWidth(var4[var8]) / 2|0), (this.nHeight / 2|0) + var3.getHeight() * (var8 - 2));\n                    var2.drawString(var5[0][var8], (this.nWidth / 2|0) - var6 - (var3.stringWidth(var5[0][var8]) / 2|0), (this.nHeight / 2|0) + var3.getHeight() * (var8 - 2));\n                    var2.drawString(var5[1][var8], (this.nWidth / 2|0) + var6 - (var3.stringWidth(var5[1][var8]) / 2|0), (this.nHeight / 2|0) + var3.getHeight() * (var8 - 2));\n                };\n                this.drawPrompt$java_lang_String$int(!this.firstHalf?\"Swap sides and click the mouse to continue...\":\"Click the mouse to start another game!\", 0);\n            } else {\n                this.screen.drawString(\"NRL Slime Volleyball!\", (this.nWidth / 2|0) - (var3.stringWidth(\"NRL Slime Volleyball!\") / 2|0), (this.nHeight / 2|0) - var3.getHeight());\n                var2.setColor(ShimmedColor.white);\n                var3 \u003d var2.getFontMetrics();\n                var2.drawString(\"Code base by Quin Pendragon\", (this.nWidth / 2|0) - (var3.stringWidth(\"Code base by Quin Pendragon\") / 2|0), (this.nHeight / 2|0) + var3.getHeight() * 2);\n                var2.drawString(\"Mod by Daniel Wedge\", (this.nWidth / 2|0) - (var3.stringWidth(\"Mod by Daniel Wedge\") / 2|0), (this.nHeight / 2|0) + var3.getHeight() * 3);\n                var2.drawString(\"Wind particles by Tim Lightfoot\", (this.nWidth / 2|0) - (var3.stringWidth(\"Wind particles by Tim Lightfoot\") / 2|0), (this.nHeight / 2|0) + var3.getHeight() * 4);\n            }\n        }\n        if(this.buffered) {\n            var1.drawImage(this.buffer, 0, 0, this);\n        }\n    }\n\n    public handleEvent(var1 : ShimmedEvent) : boolean {\n        switch((var1.id)) {\n        case 401:\n        case 403:\n            if(!this.fEndGame) {\n                if(!this.fSelectedColours) {\n                    this.pwAddChar(String.fromCharCode(var1.key));\n                }\n                switch((var1.key)) {\n                case 32:\n                    this.mousePressed \u003d true;\n                    break;\n                case 65:\n                case 97:\n                    if(!this.backwards) {\n                        this.moveP1Left();\n                    } else {\n                        this.moveP1Right();\n                    }\n                    break;\n                case 68:\n                case 100:\n                    if(!this.backwards) {\n                        this.moveP1Right();\n                    } else {\n                        this.moveP1Left();\n                    }\n                    break;\n                case 73:\n                case 105:\n                    this.moveP2Jump();\n                    break;\n                case 74:\n                case 106:\n                    if(!this.backwards) {\n                        this.moveP2Left();\n                    } else {\n                        this.moveP2Right();\n                    }\n                    break;\n                case 75:\n                case 107:\n                    if(!this.fSelectedColours) {\n                        this.changeP2Col();\n                    }\n                    break;\n                case 76:\n                case 108:\n                    if(!this.backwards) {\n                        this.moveP2Right();\n                    } else {\n                        this.moveP2Left();\n                    }\n                    break;\n                case 83:\n                case 115:\n                    if(!this.fSelectedColours) {\n                        this.changeP1Col();\n                    }\n                    break;\n                case 87:\n                case 119:\n                    this.moveP1Jump();\n                }\n            }\n            break;\n        case 402:\n        case 404:\n            switch((var1.key)) {\n            case 65:\n            case 97:\n                if(this.p1XV * (this.backwards?-1:1) \u003c 0) {\n                    this.moveP1Stop();\n                }\n                return false;\n            case 68:\n            case 100:\n                if(this.p1XV * (this.backwards?-1:1) \u003e 0) {\n                    this.moveP1Stop();\n                }\n                return false;\n            case 74:\n            case 106:\n                if(this.p2XV * (this.backwards?-1:1) \u003c 0) {\n                    this.moveP2Stop();\n                }\n                return false;\n            case 76:\n            case 108:\n                if(this.p2XV * (this.backwards?-1:1) \u003e 0) {\n                    this.moveP2Stop();\n                }\n                return false;\n            default:\n                return false;\n            }\n        case 501:\n            this.mousePressed \u003d true;\n            if(!this.fInPlay) {\n                this.fEndGame \u003d false;\n                this.fInPlay \u003d true;\n                this.p1X \u003d 200;\n                this.p1Y \u003d 0;\n                this.p2X \u003d 800;\n                this.p2Y \u003d 0;\n                this.p1XV \u003d 0;\n                this.p1YV \u003d 0;\n                this.p2XV \u003d 0;\n                this.p2YV \u003d 0;\n                this.ballX \u003d 200;\n                this.ballY \u003d 400;\n                this.ballVX \u003d 0;\n                this.ballVY \u003d 0;\n                this.hitNetSinceTouched \u003d false;\n                this.promptMsg \u003d \"\";\n                this.repaint();\n                this.gameThread \u003d new ShimmedThread(this);\n                this.gameThread.start();\n            } else if(!this.fSelectedColours) {\n                this.fInPlay \u003d true;\n                this.replayStart \u003d 0;\n                this.replayPos \u003d 0;\n                this.p1X \u003d 200;\n                this.p1Y \u003d 0;\n                this.p2X \u003d 800;\n                this.p2Y \u003d 0;\n                this.p1XV \u003d 0;\n                this.p1YV \u003d 0;\n                this.p2XV \u003d 0;\n                this.p2YV \u003d 0;\n                this.ballX \u003d 200;\n                this.ballY \u003d 400;\n                this.ballVX \u003d 0;\n                this.ballVY \u003d 0;\n                this.hitNetSinceTouched \u003d false;\n                this.promptMsg \u003d \"\";\n                this.fP1Touched \u003d false;\n                this.fP2Touched \u003d false;\n                this.fServerMoved \u003d false;\n                this.drawPrompt();\n                this.DrawStatus();\n                this.repaint();\n                this.startTime \u003d ShimmedSystem.currentTimeMillis();\n                this.realStartTime \u003d this.startTime;\n                this.fSelectedColours \u003d true;\n            }\n            break;\n        case 503:\n            this.showStatus(\"NRL Slime Volleyball: http://footyslime.com/nrl/\");\n        }\n        return false;\n    }\n\n    /*private*/ pwAddChar(var1 : string) {\n        for(let var2 : number \u003d 0; var2 \u003c 4; this.field_rn_Slime2P_pw_1[var2++] \u003d this.field_rn_Slime2P_pw_1[var2]) {\n        };\n        this.field_rn_Slime2P_pw_1[4] \u003d var1;\n        let var3 : string \u003d (this.field_rn_Slime2P_pw_1.join(\u0027\u0027)).toLowerCase();\n        let var4 : boolean \u003d false;\n        if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.nyt))) {\n            var4 \u003d true;\n            this.nightTime \u003d !this.nightTime;\n            this.SKY_COL \u003d this.nightTime?new ShimmedColor(0, 0, 70):new ShimmedColor(85, 85, 255);\n            this.COURT_COL \u003d this.nightTime?new ShimmedColor(0, 100, 0):new ShimmedColor(0, 168, 0);\n            this.BALL_COL \u003d this.nightTime?ShimmedColor.white:ShimmedColor.yellow;\n            this.repaint();\n            this.promptMsg \u003d this.nightTime?\"... and the lights come on at Slime Stadium!\":\"The Slime Sun has risen!\";\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.psy))) {\n            var4 \u003d true;\n            this.psycho \u003d !this.psycho;\n            this.promptMsg \u003d this.psycho?\"Can\\\u0027t get to the ball fast enough?\":\"Can\\\u0027t handle the pace?\";\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.bck))) {\n            var4 \u003d true;\n            this.backwards \u003d !this.backwards;\n            this.promptMsg \u003d this.backwards?\"Slime God Clive blesses you!\":\"Don\\\u0027t like challenges, huh?\";\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.tim))) {\n            var4 \u003d true;\n            this.timer \u003d !this.timer;\n            this.promptMsg \u003d this.timer?\"Don\\\u0027t like the uncertainty of time on? Pathetic.\":\"Welcome back from the other side.\";\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.wnd))) {\n            var4 \u003d true;\n            this.windOn \u003d !this.windOn;\n            this.promptMsg \u003d !this.windOn?\"Can\\\u0027t handle the challenge?\":\"Yeah, wind is good.\";\n            if(!this.windOn) {\n                this.unDrawParticles();\n            }\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.bfr))) {\n            var4 \u003d true;\n            this.buffered \u003d !this.buffered;\n            this.screen \u003d this.buffered?this.buffer.getGraphics():this.getGraphics();\n            this.screen.setFont(new ShimmedFont(this.baseFont.getName(), 1, 15));\n            if(this.fInPlay) {\n                this.promptMsg \u003d this.buffered?\"Double buffering is on.\":\"Do not adjust your set... the Slimes are flickery.\";\n            }\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.hl2))) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 120000;\n            this.promptMsg \u003d \"Halves now two minutes long.\";\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.hl3))) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 180000;\n            this.promptMsg \u003d \"Halves now three minutes long.\";\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.hl4))) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 240000;\n            this.promptMsg \u003d \"Halves now four minutes long.\";\n        } else if(/* equals */(\u003cany\u003e((o1: any, o2: any) \u003d\u003e { if(o1 \u0026\u0026 o1.equals) { return o1.equals(o2); } else { return o1 \u003d\u003d\u003d o2; } })(var3,this.hl5))) {\n            var4 \u003d true;\n            this.GAME_LENGTH \u003d 300000;\n            this.promptMsg \u003d \"Halves now five minutes long.\";\n        }\n        if(var4) {\n            this.fServerMoved \u003d true;\n            this.drawPrompt();\n        }\n    }\n\n    public moveP1Left() {\n        this.p1XV \u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho?-8:-16;\n        if(this.p1X \u003d\u003d\u003d 200 \u0026\u0026 this.ballX \u003d\u003d\u003d 200 \u0026\u0026 !this.fP2Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    }\n\n    public moveP1Right() {\n        this.p1XV \u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho?8:16;\n        if(this.p1X \u003d\u003d\u003d 200 \u0026\u0026 this.ballX \u003d\u003d\u003d 200 \u0026\u0026 !this.fP2Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    }\n\n    public moveP1Stop() {\n        this.p1XV \u003d 0;\n    }\n\n    public moveP1Jump() {\n        if(this.p1Y \u003d\u003d\u003d 0) {\n            this.p1YV \u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho?31:45;\n        }\n    }\n\n    public changeP1Col() {\n        do {\n            this.p1Col \u003d (this.p1Col + 1) % this.slimeColText.length;\n        } while((this.p1Col \u003d\u003d\u003d this.p2Col));\n    }\n\n    public moveP2Left() {\n        this.p2XV \u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho?-8:-16;\n        if(this.p2X \u003d\u003d\u003d 800 \u0026\u0026 this.ballX \u003d\u003d\u003d 800 \u0026\u0026 !this.fP1Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    }\n\n    public moveP2Right() {\n        this.p2XV \u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho?8:16;\n        if(this.p2X \u003d\u003d\u003d 800 \u0026\u0026 this.ballX \u003d\u003d\u003d 800 \u0026\u0026 !this.fP1Touched \u0026\u0026 !this.fServerMoved) {\n            this.fServerMoved \u003d true;\n        }\n    }\n\n    public moveP2Stop() {\n        this.p2XV \u003d 0;\n    }\n\n    public moveP2Jump() {\n        if(this.p2Y \u003d\u003d\u003d 0) {\n            this.p2YV \u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho?31:45;\n        }\n    }\n\n    /*private*/ changeP2Col() {\n        do {\n            this.p2Col \u003d (this.p2Col + 1) % this.slimeColText.length;\n        } while((this.p2Col \u003d\u003d\u003d this.p1Col));\n    }\n\n    /*private*/ MoveSlimers() {\n        this.p1X +\u003d this.p1XV;\n        if(this.p1X \u003c 50) {\n            this.p1X \u003d 50;\n        }\n        if(this.p1X \u003e 445) {\n            this.p1X \u003d 445;\n        }\n        if(this.p1YV !\u003d\u003d 0) {\n            this.p1Y +\u003d this.p1YV -\u003d this.scoringRun \u003e -6 \u0026\u0026 !this.psycho?2:4;\n            if(this.p1Y \u003c 0) {\n                this.p1Y \u003d 0;\n                this.p1YV \u003d 0;\n            }\n        }\n        this.p2X +\u003d this.p2XV;\n        if(this.p2X \u003e 950) {\n            this.p2X \u003d 950;\n        }\n        if(this.p2X \u003c 555) {\n            this.p2X \u003d 555;\n        }\n        if(this.p2YV !\u003d\u003d 0) {\n            this.p2Y +\u003d this.p2YV -\u003d this.scoringRun \u003c 6 \u0026\u0026 !this.psycho?2:4;\n            if(this.p2Y \u003c 0) {\n                this.p2Y \u003d 0;\n                this.p2YV \u003d 0;\n            }\n        }\n    }\n\n    /*private*/ DrawSlimers() {\n        let var1 : number \u003d (this.nWidth / 10|0);\n        let var2 : number \u003d (this.nHeight / 10|0);\n        let var3 : number \u003d (this.nWidth / 50|0);\n        let var4 : number \u003d (this.nHeight / 25|0);\n        let var5 : number \u003d (this.ballX * this.nWidth / 1000|0);\n        let var6 : number \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        let var7 : number \u003d (this.p1OldX * this.nWidth / 1000|0) - (var1 / 2|0);\n        let var8 : number \u003d (7 * this.nHeight / 10|0) - (this.p1OldY * this.nHeight / 1000|0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillRect(var7, var8, var1, var2);\n        var7 \u003d (this.p2OldX * this.nWidth / 1000|0) - (var1 / 2|0);\n        var8 \u003d (7 * this.nHeight / 10|0) - (this.p2OldY * this.nHeight / 1000|0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillRect(var7, var8, var1, var2);\n        this.MoveBall();\n        var7 \u003d (this.p1X * this.nWidth / 1000|0) - (var1 / 2|0);\n        var8 \u003d (7 * this.nHeight / 10|0) - (this.p1Y * this.nHeight / 1000|0);\n        this.fP1Fire \u003d this.scoringRun \u003c\u003d -6 || this.psycho;\n        this.fP2Fire \u003d this.scoringRun \u003e\u003d 6 || this.psycho;\n        if(this.fP1Fire || this.fP2Fire || this.psycho) {\n            this.superFlash \u003d !this.superFlash;\n        }\n        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p1Col);\n        let var9 : number \u003d this.p1X + 38;\n        let var10 : number \u003d this.p1Y - 60;\n        var7 \u003d (var9 * this.nWidth / 1000|0);\n        var8 \u003d (7 * this.nHeight / 10|0) - (var10 * this.nHeight / 1000|0);\n        let var11 : number \u003d var7 - var5;\n        let var12 : number \u003d var8 - var6;\n        let var13 : number \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var11 * var11 + var12 * var12))|0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);\n        if(var13 \u003e 0) {\n            this.screen.setColor(ShimmedColor.black);\n            this.screen.fillOval(var7 - (4 * var11 / var13|0) - (3 * var3 / 4|0), var8 - (4 * var12 / var13|0) - (3 * var4 / 4|0), (var3 / 2|0), (var4 / 2|0));\n        }\n        var7 \u003d (this.p2X * this.nWidth / 1000|0) - (var1 / 2|0);\n        var8 \u003d (7 * this.nHeight / 10|0) - (this.p2Y * this.nHeight / 1000|0);\n        this.DrawStrip(this.screen, var7, var8, var1, var2, this.p2Col);\n        var9 \u003d this.p2X - 18;\n        var10 \u003d this.p2Y - 60;\n        var7 \u003d (var9 * this.nWidth / 1000|0);\n        var8 \u003d (7 * this.nHeight / 10|0) - (var10 * this.nHeight / 1000|0);\n        var11 \u003d var7 - var5;\n        var12 \u003d var8 - var6;\n        var13 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003e(var11 * var11 + var12 * var12))|0);\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.fillOval(var7 - var3, var8 - var4, var3, var4);\n        if(var13 \u003e 0) {\n            this.screen.setColor(ShimmedColor.black);\n            this.screen.fillOval(var7 - (4 * var11 / var13|0) - (3 * var3 / 4|0), var8 - (4 * var12 / var13|0) - (3 * var4 / 4|0), (var3 / 2|0), (var4 / 2|0));\n        }\n        if(Math.abs(this.scoringRun) \u003c 6 \u0026\u0026 !this.psycho) {\n            this.superFlash \u003d false;\n        }\n    }\n\n    /*private*/ DrawStrip(var1 : ShimmedGraphics, var2 : number, var3 : number, var4 : number, var5 : number, var6 : number) {\n        let var7 : boolean \u003d false;\n        if(var6 \u003d\u003d\u003d this.p1Col \u0026\u0026 (this.fP1Fire || this.psycho) || var6 \u003d\u003d\u003d this.p2Col \u0026\u0026 (this.fP2Fire || this.psycho)) {\n            var7 \u003d this.superFlash;\n        }\n        var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);\n        var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);\n        var1.setColor(var7?this.slimeColours[var6]:this.slimeColours2[var6]);\n        switch((var6)) {\n        case 0:\n        case 2:\n        case 4:\n        case 5:\n        case 6:\n        case 8:\n        case 11:\n        case 13:\n            var1.setColor(var7?this.slimeColours[var6]:this.slimeColours2[var6]);\n            var1.fillArc(var2, var3, var4, 2 * var5, 0, 180);\n            var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);\n            var1.fillPolygon$ShimmedPolygon(new ShimmedPolygon([var2 + (var4 / 5|0), var2 + (4 * var4 / 5|0), var2 + (4 * var4 / 5|0), var2 + (var4 / 5|0)], [(\u003cnumber\u003e(0.2 * \u003cnumber\u003evar5 + \u003cnumber\u003evar3)|0), (\u003cnumber\u003e(0.2 * \u003cnumber\u003evar5 + \u003cnumber\u003evar3)|0), var3 + var5, var3 + var5], 4));\n            var1.fillArc(var2, var3, var4, 2 * var5, 53, 74);\n            if(var6 \u003d\u003d\u003d 2) {\n                var1.setColor(var7?this.slimeColours[var6]:this.slimeColours2[var6]);\n                var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);\n                var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);\n                var1.fillRect((\u003cnumber\u003e(0.029 * \u003cnumber\u003evar4 + \u003cnumber\u003evar2)|0), var3 + (2 * var5 / 3|0), (\u003cnumber\u003e(0.942 * \u003cnumber\u003evar4)|0), (var5 / 3|0));\n            }\n            break;\n        case 1:\n        case 3:\n        case 9:\n        case 12:\n        case 14:\n            var1.fillArc(var2, var3, var4, 2 * var5, 40, 100);\n            if(var6 \u003d\u003d\u003d 9) {\n                var1.setColor(ShimmedColor.white);\n            } else if(var6 \u003d\u003d\u003d 12) {\n                var1.setColor(new ShimmedColor(0, 28, 87));\n            } else {\n                var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);\n            }\n            var1.fillArc(var2, var3, var4, 2 * var5, 70, 40);\n            break;\n        case 7:\n            var1.fillArc(var2, var3, var4, 2 * var5, 19, 23);\n            var1.fillArc(var2, var3, var4, 2 * var5, 138, 23);\n            var1.fillRect((\u003cnumber\u003e(0.128 * \u003cnumber\u003evar4 + \u003cnumber\u003evar2)|0), var3 + (var5 / 3|0), (\u003cnumber\u003e(0.744 * \u003cnumber\u003evar4)|0), (2 * var5 / 3|0));\n            var1.setColor(var7?this.slimeColours2[var6]:this.slimeColours[var6]);\n            var1.fillArc(var2, var3, var4, 2 * var5, 0, 19);\n            var1.fillArc(var2, var3, var4, 2 * var5, 161, 19);\n            var1.fillRect((\u003cnumber\u003e(0.029 * \u003cnumber\u003evar4 + \u003cnumber\u003evar2)|0), var3 + (2 * var5 / 3|0), (\u003cnumber\u003e(0.942 * \u003cnumber\u003evar4)|0), (var5 / 3|0));\n            break;\n        case 10:\n            var1.setColor(ShimmedColor.white);\n            var1.drawLine((\u003cnumber\u003e(0.128 * \u003cnumber\u003evar4 + \u003cnumber\u003evar2)|0), var3 + (var5 / 3|0), (\u003cnumber\u003e(0.872 * \u003cnumber\u003evar4 + \u003cnumber\u003evar2)|0), var3 + (var5 / 3|0));\n            var1.drawLine((\u003cnumber\u003e(0.029 * \u003cnumber\u003evar4 + \u003cnumber\u003evar2)|0), var3 + (2 * var5 / 3|0), (\u003cnumber\u003e(0.971 * \u003cnumber\u003evar4 + \u003cnumber\u003evar2)|0), var3 + (2 * var5 / 3|0));\n        }\n    }\n\n    /*private*/ doWind() {\n        if(this.windOn \u0026\u0026 Math.random() \u003e\u003d 0.9) {\n            this.wind +\u003d (\u003cnumber\u003e(2.0 - 4.0 * Math.random())|0);\n            if(this.wind \u003e 30) {\n                this.wind \u003d 30;\n            } else if(this.wind \u003c -30) {\n                this.wind \u003d -30;\n            }\n        }\n    }\n\n    /*private*/ MoveBall() {\n        let var1 : number \u003d (30 * this.nHeight / 1000|0);\n        let var2 : number \u003d (this.ballOldX * this.nWidth / 1000|0);\n        let var3 : number \u003d (4 * this.nHeight / 5|0) - (this.ballOldY * this.nHeight / 1000|0);\n        this.screen.setColor(this.SKY_COL);\n        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);\n        this.ballY +\u003d --this.ballVY;\n        this.ballX +\u003d this.ballVX;\n        if(this.windOn \u0026\u0026 this.fServerMoved) {\n            this.ballX *\u003d 10;\n            this.ballX +\u003d this.wind;\n            this.ballX /\u003d 10;\n        }\n        if(!this.fEndGame) {\n            let var4 : number \u003d (this.ballX - this.p1X) * 2;\n            let var5 : number \u003d this.ballY - this.p1Y;\n            let var6 : number \u003d var4 * var4 + var5 * var5;\n            let var7 : number \u003d this.ballVX - this.p1XV;\n            let var8 : number \u003d this.ballVY - this.p1YV;\n            let var9 : number;\n            let var10 : number;\n            if(var5 \u003e 0 \u0026\u0026 var6 \u003c 15625 \u0026\u0026 var6 \u003e 25) {\n                var9 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003evar6)|0);\n                var10 \u003d ((var4 * var7 + var5 * var8) / var9|0);\n                this.ballX \u003d this.p1X + (var4 * 63 / var9|0);\n                this.ballY \u003d this.p1Y + (var5 * 125 / var9|0);\n                if(var10 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p1XV - (2 * var4 * var10 / var9|0);\n                    if(this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if(this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p1YV - (2 * var5 * var10 / var9|0);\n                    if(this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if(this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                if(this.fServerMoved) {\n                    this.fP1Touched \u003d true;\n                    ++this.fP1Touches;\n                    ++this.fP1TouchesTot;\n                    this.fP2Touches \u003d 0;\n                    this.fP1HitStill \u003d this.p1YV \u003d\u003d\u003d 0 \u0026\u0026 this.p1XV \u003d\u003d\u003d 0;\n                    this.hitNetSinceTouched \u003d false;\n                }\n            }\n            var4 \u003d (this.ballX - this.p2X) * 2;\n            var5 \u003d this.ballY - this.p2Y;\n            var6 \u003d var4 * var4 + var5 * var5;\n            var7 \u003d this.ballVX - this.p2XV;\n            var8 \u003d this.ballVY - this.p2YV;\n            if(var5 \u003e 0 \u0026\u0026 var6 \u003c 15625 \u0026\u0026 var6 \u003e 25) {\n                var9 \u003d (\u003cnumber\u003eMath.sqrt(\u003cnumber\u003evar6)|0);\n                var10 \u003d ((var4 * var7 + var5 * var8) / var9|0);\n                this.ballX \u003d this.p2X + (var4 * 63 / var9|0);\n                this.ballY \u003d this.p2Y + (var5 * 125 / var9|0);\n                if(var10 \u003c\u003d 0) {\n                    this.ballVX +\u003d this.p2XV - (2 * var4 * var10 / var9|0);\n                    if(this.ballVX \u003c -15) {\n                        this.ballVX \u003d -15;\n                    }\n                    if(this.ballVX \u003e 15) {\n                        this.ballVX \u003d 15;\n                    }\n                    this.ballVY +\u003d this.p2YV - (2 * var5 * var10 / var9|0);\n                    if(this.ballVY \u003c -22) {\n                        this.ballVY \u003d -22;\n                    }\n                    if(this.ballVY \u003e 22) {\n                        this.ballVY \u003d 22;\n                    }\n                }\n                if(this.fServerMoved) {\n                    this.fP2Touched \u003d true;\n                    this.fP1Touches \u003d 0;\n                    ++this.fP2Touches;\n                    ++this.fP2TouchesTot;\n                    this.fP2HitStill \u003d this.p2YV \u003d\u003d\u003d 0 \u0026\u0026 this.p2XV \u003d\u003d\u003d 0;\n                    this.hitNetSinceTouched \u003d false;\n                }\n            }\n            if(this.ballX \u003c 15) {\n                this.ballX \u003d 15;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if(this.ballX \u003e 985) {\n                this.ballX \u003d 985;\n                this.ballVX \u003d -this.ballVX;\n            }\n            if(this.ballX \u003e 480 \u0026\u0026 this.ballX \u003c 520 \u0026\u0026 this.ballY \u003c 140) {\n                if(this.ballVY \u003c 0 \u0026\u0026 this.ballY \u003e 130) {\n                    this.ballVY *\u003d -1;\n                    this.ballY \u003d 130;\n                } else if(this.ballX \u003c 500) {\n                    this.ballX \u003d 480;\n                    this.ballVX \u003d this.ballVX \u003e\u003d 0?-this.ballVX:this.ballVX;\n                    this.hitNetSinceTouched \u003d true;\n                } else {\n                    this.ballX \u003d 520;\n                    this.ballVX \u003d this.ballVX \u003c\u003d 0?-this.ballVX:this.ballVX;\n                    this.hitNetSinceTouched \u003d true;\n                }\n            }\n        }\n        var2 \u003d (this.ballX * this.nWidth / 1000|0);\n        var3 \u003d (4 * this.nHeight / 5|0) - (this.ballY * this.nHeight / 1000|0);\n        this.screen.setColor(this.BALL_COL);\n        this.screen.fillOval(var2 - var1, var3 - var1, var1 * 2, var1 * 2);\n    }\n\n    /*private*/ drawScores() {\n        let var1 : ShimmedGraphics \u003d this.screen;\n        let var2 : ShimmedFontMetrics \u003d var1.getFontMetrics();\n        let var3 : number \u003d (this.nHeight / 25|0);\n        let var4 : number \u003d (this.nHeight / 15|0);\n        var1.setColor(this.SKY_COL);\n        var1.fillRect(0, 0, this.nWidth, var4 + 22);\n        let var5 : number \u003d 20;\n        for(let var6 : number \u003d 0; var6 \u003c (this.fP1PointsWon / 10|0); ++var6) {\n            var1.setColor(this.slimeColours[this.p1Col]);\n            var1.fillOval(var5, 30 - (var4 / 2|0), var4, var4);\n            var1.setColor(this.slimeColours2[this.p1Col]);\n            var1.drawOval(var5, 30 - (var4 / 2|0), var4, var4);\n            var5 +\u003d (var4 / 2|0);\n        };\n        if(this.fP1PointsWon \u003e\u003d 20) {\n            var1.drawString(\"\" + (this.fP1PointsWon / 10|0), var5 - (var2.stringWidth(\"\" + (this.fP1PointsWon / 10|0)) / 2|0), 30 + (var2.getAscent() / 2|0));\n        }\n        if(this.fP1PointsWon \u003e 10) {\n            var5 +\u003d (var4 / 2|0) + 10;\n        }\n        for(let var7 : number \u003d 0; var7 \u003c this.fP1PointsWon % 10; ++var7) {\n            var1.setColor(this.slimeColours[this.p1Col]);\n            var1.fillOval(var5, 30 - (var3 / 2|0), var3, var3);\n            var1.setColor(this.slimeColours2[this.p1Col]);\n            var1.drawOval(var5, 30 - (var3 / 2|0), var3, var3);\n            var5 +\u003d var3 + 5;\n        };\n        var5 \u003d this.nWidth - 20 - ((this.fP2PointsWon / 10|0) * var4 / 2|0) - (this.fP2PointsWon % 10 \u003d\u003d\u003d 0?(var4 / 2|0) + 10:0) - this.fP2PointsWon % 10 * var3 - (this.fP2PointsWon % 10 \u003e 0?this.fP2PointsWon % 10 - 1:0) * 5;\n        if(this.fP2PointsWon \u003e 10 \u0026\u0026 this.fP2PointsWon % 10 !\u003d\u003d 0) {\n            var5 -\u003d (var4 / 2|0) + 10;\n        }\n        for(let var8 : number \u003d 0; var8 \u003c (this.fP2PointsWon / 10|0); ++var8) {\n            var1.setColor(this.slimeColours[this.p2Col]);\n            var1.fillOval(var5, 30 - (var4 / 2|0), var4, var4);\n            var1.setColor(this.slimeColours2[this.p2Col]);\n            var1.drawOval(var5, 30 - (var4 / 2|0), var4, var4);\n            var5 +\u003d (var4 / 2|0);\n        };\n        if(this.fP2PointsWon \u003e\u003d 20) {\n            var1.drawString(\"\" + (this.fP2PointsWon / 10|0), var5 - (var2.stringWidth(\"\" + (this.fP2PointsWon / 10|0)) / 2|0), 30 + (var2.getAscent() / 2|0));\n        }\n        if(this.fP2PointsWon \u003e 10) {\n            var5 +\u003d (var4 / 2|0) + 10;\n        }\n        for(let var9 : number \u003d 0; var9 \u003c this.fP2PointsWon % 10; ++var9) {\n            var1.setColor(this.slimeColours[this.p2Col]);\n            var1.fillOval(var5, 30 - (var3 / 2|0), var3, var3);\n            var1.setColor(this.slimeColours2[this.p2Col]);\n            var1.drawOval(var5, 30 - (var3 / 2|0), var3, var3);\n            var5 +\u003d var3 + 5;\n        };\n    }\n\n    /*private*/ MakeTime(var1 : number) : string {\n        let var3 : string \u003d \"\";\n        var1 \u003d Math.floor(\u003cnumber\u003e(2400000.0 * \u003cnumber\u003evar1 / \u003cnumber\u003ethis.GAME_LENGTH));\n        let var4 : number \u003d Math.floor(var1 / 10) % 100;\n        let var6 : number \u003d Math.floor(var1 / 1000) % 60;\n        let var8 : number \u003d Math.floor(var1 / 60000) % 60;\n        let var10 : number \u003d Math.floor(var1 / 3600000);\n        var3 \u003d var3 + var8 + \":\";\n        if(var6 \u003c 10) {\n            var3 \u003d var3 + \"0\";\n        }\n        var3 \u003d var3 + var6;\n        return var3;\n    }\n\n    /*private*/ DrawStatus() {\n        let var1 : ShimmedGraphics \u003d this.screen;\n        let var2 : ShimmedFontMetrics \u003d var1.getFontMetrics();\n        let var3 : string;\n        if(this.fSelectedColours) {\n            var3 \u003d (this.firstHalf?\"1st\":\"2nd\") + \" half: \" + this.MakeTime(this.timer?this.GAME_LENGTH - this.gameTime:ShimmedSystem.currentTimeMillis() - this.realStartTime);\n        } else {\n            var3 \u003d this.slimeColText[this.p1Col] + \"v \" + this.slimeColText[this.p2Col];\n        }\n        if(this.gameTime \u003e this.GAME_LENGTH) {\n            var3 \u003d (this.firstHalf?\"1st\":\"2nd\") + \" half: Final point!\";\n        }\n        let var4 : number \u003d var2.getHeight() * 3;\n        let var5 : number \u003d var2.stringWidth(var3);\n        let var6 : number \u003d (this.nWidth / 2|0) - (var5 / 2|0) - 10;\n        var1.setColor(this.SKY_COL);\n        if(this.fSelectedColours) {\n            var1.fillRect(var6, 0, var5 + 20, var4 + 22);\n        } else {\n            var1.fillRect(0, 0, this.nWidth, var4 + 22);\n        }\n        var1.setColor(ShimmedColor.white);\n        var1.drawString(var3, (this.nWidth / 2|0) - (var2.stringWidth(var3) / 2|0), var2.getHeight() * 2);\n        if(this.windOn) {\n            if(this.wind \u003c 0) {\n                var3 \u003d \"\u003c\u003c \" + -this.wind + \" km/h\";\n            } else if(this.wind \u003e 0) {\n                var3 \u003d this.wind + \" km/h \u003e\u003e\";\n            } else {\n                var3 \u003d \"no wind\";\n            }\n            var1.drawString(var3, (this.nWidth / 2|0) - (var2.stringWidth(var3) / 2|0), var2.getHeight() * 3);\n        }\n        if(!this.fSelectedColours) {\n            var1.setColor(ShimmedColor.red);\n            var3 \u003d \"WARM UP ONLY\";\n            var1.drawString(var3, (this.nWidth / 2|0) - (var2.stringWidth(var3) / 2|0), var2.getHeight() * 4);\n        }\n    }\n\n    public drawPrompt$() {\n        this.screen.setColor(this.COURT_COL);\n        this.screen.fillRect(0, (4 * this.nHeight / 5|0) + 6, this.nWidth, (this.nHeight / 5|0) - 10);\n        this.drawPrompt$java_lang_String$int(this.promptMsg, 0);\n    }\n\n    public drawPrompt$java_lang_String$int(var1 : string, var2 : number) {\n        let var3 : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        this.screen.setColor(ShimmedColor.white);\n        this.screen.drawString(var1, ((this.nWidth - var3.stringWidth(var1)) / 2|0), (this.nHeight * 4 / 5|0) + var3.getHeight() * (var2 + 1) + 10);\n    }\n\n    public drawPrompt(var1? : any, var2? : any) : any {\n        if(((typeof var1 \u003d\u003d\u003d \u0027string\u0027) || var1 \u003d\u003d\u003d null) \u0026\u0026 ((typeof var2 \u003d\u003d\u003d \u0027number\u0027) || var2 \u003d\u003d\u003d null)) {\n            return \u003cany\u003ethis.drawPrompt$java_lang_String$int(var1, var2);\n        } else if(var1 \u003d\u003d\u003d undefined \u0026\u0026 var2 \u003d\u003d\u003d undefined) {\n            return \u003cany\u003ethis.drawPrompt$();\n        } else throw new Error(\u0027invalid overload\u0027);\n    }\n\n    /*private*/ SaveReplayData() {\n        this.replayData[this.replayPos][0] \u003d this.p1X;\n        this.replayData[this.replayPos][1] \u003d this.p1Y;\n        this.replayData[this.replayPos][2] \u003d this.p2X;\n        this.replayData[this.replayPos][3] \u003d this.p2Y;\n        this.replayData[this.replayPos][4] \u003d this.ballX;\n        this.replayData[this.replayPos][5] \u003d this.ballY;\n        ++this.replayPos;\n        if(this.replayPos \u003e\u003d 200) {\n            this.replayPos \u003d 0;\n        }\n        if(this.replayStart \u003d\u003d\u003d this.replayPos) {\n            ++this.replayStart;\n        }\n        if(this.replayStart \u003e\u003d 200) {\n            this.replayStart \u003d 0;\n        }\n    }\n\n    /*private*/ ReplayFrame(var1 : number) {\n        let var2 : number \u003d var1 !\u003d\u003d 0?var1 - 1:199;\n        this.p1OldX \u003d this.replayData[var2][0];\n        this.p1OldY \u003d this.replayData[var2][1];\n        this.p2OldX \u003d this.replayData[var2][2];\n        this.p2OldY \u003d this.replayData[var2][3];\n        this.ballOldX \u003d this.replayData[var2][4];\n        this.ballOldY \u003d this.replayData[var2][5];\n        this.p1X \u003d this.replayData[var1][0];\n        this.p1Y \u003d this.replayData[var1][1];\n        this.p2X \u003d this.replayData[var1][2];\n        this.p2Y \u003d this.replayData[var1][3];\n        this.ballX \u003d this.replayData[var1][4];\n        this.ballY \u003d this.replayData[var1][5];\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 1;\n        this.DrawSlimers();\n        if(this.buffered) {\n            this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n        }\n    }\n\n    public run() {\n        this.replayPos \u003d this.replayStart \u003d 0;\n        if(this.firstHalf) {\n            this.fSelectedColours \u003d false;\n            this.p1Col \u003d 0;\n            this.p2Col \u003d 1;\n            this.promptMsg \u003d \"Select a slime and click the mouse when warmed up.\";\n            this.drawPrompt();\n            this.superFlash \u003d false;\n            this.scoringRun \u003d 0;\n            this.fP1Touches \u003d 0;\n            this.fP2Touches \u003d 0;\n            this.fP1TouchesTot \u003d 0;\n            this.fP2TouchesTot \u003d 0;\n            this.fP1Clangers \u003d 0;\n            this.fP2Clangers \u003d 0;\n            this.fP1Aces \u003d 0;\n            this.fP2Aces \u003d 0;\n            this.fP1Winners \u003d 0;\n            this.fP2Winners \u003d 0;\n            this.fP1PointsWon \u003d 0;\n            this.fP2PointsWon \u003d 0;\n            this.fP1Frames \u003d 0;\n            this.fP2Frames \u003d 0;\n            this.fP1Super \u003d 0;\n            this.fP2Super \u003d 0;\n            this.fP1Streak \u003d 0;\n            this.fP2Streak \u003d 0;\n            this.wind \u003d (\u003cnumber\u003e(30.0 - 60.0 * Math.random())|0);\n        } else {\n            this.ballX \u003d 200;\n            this.scoringRun \u003d 0;\n            this.superFlash \u003d false;\n            let var1 : number \u003d this.p1Col;\n            this.p1Col \u003d this.p2Col;\n            this.p2Col \u003d var1;\n            var1 \u003d this.fP1Touches;\n            this.fP1Touches \u003d this.fP2Touches;\n            this.fP2Touches \u003d var1;\n            var1 \u003d this.fP1TouchesTot;\n            this.fP1TouchesTot \u003d this.fP2TouchesTot;\n            this.fP2TouchesTot \u003d var1;\n            var1 \u003d this.fP1Clangers;\n            this.fP1Clangers \u003d this.fP2Clangers;\n            this.fP2Clangers \u003d var1;\n            var1 \u003d this.fP1Aces;\n            this.fP1Aces \u003d this.fP2Aces;\n            this.fP2Aces \u003d var1;\n            var1 \u003d this.fP1Winners;\n            this.fP1Winners \u003d this.fP2Winners;\n            this.fP2Winners \u003d var1;\n            var1 \u003d this.fP1PointsWon;\n            this.fP1PointsWon \u003d this.fP2PointsWon;\n            this.fP2PointsWon \u003d var1;\n            let var2 : number \u003d this.fP1Frames;\n            this.fP1Frames \u003d this.fP2Frames;\n            this.fP2Frames \u003d var2;\n            var1 \u003d this.fP1Super;\n            this.fP1Super \u003d this.fP2Super;\n            this.fP2Super \u003d var1;\n            var1 \u003d this.fP1Streak;\n            this.fP1Streak \u003d this.fP2Streak;\n            this.fP2Streak \u003d var1;\n            this.repaint();\n        }\n        this.fP1HitStill \u003d false;\n        this.fP2HitStill \u003d false;\n        this.fServerMoved \u003d false;\n        this.crossedNetTime \u003d 0;\n        this.drawScores();\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.hitNetSinceTouched \u003d false;\n        let var9 : boolean \u003d false;\n        let var8 : boolean \u003d false;\n        let var3 : boolean \u003d false;\n        this.startTime \u003d ShimmedSystem.currentTimeMillis();\n        this.realStartTime \u003d this.startTime;\n        while((this.gameThread !\u003d null)) {\n            if(!this.fSelectedColours) {\n                this.startTime \u003d ShimmedSystem.currentTimeMillis() - this.gameTime;\n                this.realStartTime \u003d this.startTime;\n            } else {\n                this.gameTime \u003d ShimmedSystem.currentTimeMillis() - this.startTime;\n            }\n            this.SaveReplayData();\n            if(!this.fServerMoved) {\n                this.crossedNetTime \u003d ShimmedSystem.currentTimeMillis();\n            } else if(this.crossedNetTime \u003c 0 \u0026\u0026 this.ballX \u003e 500 - (3 * this.nHeight / 50|0) || this.crossedNetTime \u003e 0 \u0026\u0026 this.ballX \u003c 500 + (3 * this.nHeight / 50|0)) {\n                this.crossedNetTime \u003d this.ballX \u003c\u003d 500?-ShimmedSystem.currentTimeMillis():ShimmedSystem.currentTimeMillis();\n                this.drawPrompt();\n            }\n            this.p1OldX \u003d this.p1X;\n            this.p1OldY \u003d this.p1Y;\n            this.p2OldX \u003d this.p2X;\n            this.p2OldY \u003d this.p2Y;\n            this.ballOldX \u003d this.ballX;\n            this.ballOldY \u003d this.ballY;\n            this.DrawStatus();\n            if(this.windOn) {\n                this.doWind();\n                this.unDrawParticles();\n                this.updateParticles();\n                this.drawParticles();\n                this.screen.setColor(ShimmedColor.white);\n                this.screen.fillRect((this.nWidth / 2|0) - 2, (7 * this.nHeight / 10|0), 4, (this.nHeight / 10|0) + 5);\n            }\n            this.MoveSlimers();\n            this.DrawSlimers();\n            if(this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n            }\n            if(this.fServerMoved \u0026\u0026 this.fSelectedColours) {\n                if(this.ballX \u003c 500 - (3 * this.nHeight / 50|0)) {\n                    ++this.fP1Frames;\n                } else if(this.ballX \u003e 500 + (3 * this.nHeight / 50|0)) {\n                    ++this.fP2Frames;\n                }\n            }\n            if(!this.fSelectedColours \u0026\u0026 this.ballY \u003c 35) {\n                ShimmedThread.sleep$long$boolean(1000, false);\n                this.p1X \u003d 200;\n                this.p1Y \u003d 0;\n                this.p2X \u003d 800;\n                this.p2Y \u003d 0;\n                this.p1XV \u003d 0;\n                this.p1YV \u003d 0;\n                this.p2XV \u003d 0;\n                this.p2YV \u003d 0;\n                this.ballX \u003d this.ballX \u003e\u003d 500?200:800;\n                this.ballY \u003d 400;\n                this.ballVX \u003d 0;\n                this.ballVY \u003d 0;\n                this.fServerMoved \u003d false;\n                this.fP1Touched \u003d this.fP2Touched \u003d false;\n                this.repaint();\n            } else {\n                let var4 : number;\n                if(this.fSelectedColours \u0026\u0026 this.holdingOn \u0026\u0026 Math.abs(this.crossedNetTime) + 5000 \u003c ShimmedSystem.currentTimeMillis() \u0026\u0026 this.ballY \u003e\u003d 35) {\n                    var4 \u003d ShimmedSystem.currentTimeMillis();\n                    this.promptMsg \u003d \"BALL... YES!\";\n                    this.drawPrompt();\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt$java_lang_String$int(\"Holding the ball against \" + (this.ballX \u003c\u003d 500?this.slimeColText[this.p1Col]:this.slimeColText[this.p2Col]) + \"!!\", 1);\n                    this.drawPrompt$java_lang_String$int(\"Press space for replay...\", 2);\n                    if(this.buffered) {\n                        this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n                    }\n                    this.mousePressed \u003d false;\n                    if(this.ballX \u003e 500) {\n                        ++this.fP1PointsWon;\n                        ++this.fP2Clangers;\n                    } else {\n                        ++this.fP2PointsWon;\n                        ++this.fP1Clangers;\n                    }\n                    this.oldScoringRun \u003d this.scoringRun;\n                    if(this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        ++this.scoringRun;\n                        if(this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    } else if(this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        --this.scoringRun;\n                        if(-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    } else if(this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        this.scoringRun \u003d 1;\n                        if(this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    } else if(this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        this.scoringRun \u003d -1;\n                        if(-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    }\n                    this.drawScores();\n                    this.DrawStatus();\n                    ShimmedThread.sleep$long$boolean(1000, true);\n                    if(this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt();\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d this.ballX \u003e\u003d 500?200:800;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.fP1Touched \u003d this.fP2Touched \u003d false;\n                    this.fServerMoved \u003d false;\n                    if(this.GAME_LENGTH \u003c\u003d this.gameTime) {\n                        this.endHalf();\n                    }\n                    this.repaint();\n                } else if(this.fSelectedColours \u0026\u0026 this.holdingOn \u0026\u0026 Math.abs(this.crossedNetTime) + 5000 - 1000 \u003c ShimmedSystem.currentTimeMillis() \u0026\u0026 this.ballY \u003e\u003d 35) {\n                    this.promptMsg \u003d \"BALL...\";\n                    if(this.buffered) {\n                        this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n                    }\n                    this.drawPrompt();\n                    this.promptMsg \u003d \"\";\n                } else if(this.ballY \u003c 35) {\n                    var4 \u003d ShimmedSystem.currentTimeMillis();\n                    if(this.ballX \u003e 500) {\n                        ++this.fP1PointsWon;\n                    } else {\n                        ++this.fP2PointsWon;\n                    }\n                    this.oldScoringRun \u003d this.scoringRun;\n                    if(this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        ++this.scoringRun;\n                        if(this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    } else if(this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        --this.scoringRun;\n                        if(-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    } else if(this.ballX \u003c\u003d 500 \u0026\u0026 this.scoringRun \u003c\u003d 0) {\n                        this.scoringRun \u003d 1;\n                        if(this.scoringRun \u003e this.fP2Streak) {\n                            this.fP2Streak \u003d this.scoringRun;\n                        }\n                    } else if(this.ballX \u003e 500 \u0026\u0026 this.scoringRun \u003e\u003d 0) {\n                        this.scoringRun \u003d -1;\n                        if(-this.scoringRun \u003e this.fP1Streak) {\n                            this.fP1Streak \u003d -this.scoringRun;\n                        }\n                    }\n                    if(this.ballX \u003e 500 || this.fP1Touches \u003c 3 \u0026\u0026 (!this.hitNetSinceTouched || this.fP1Touches \u003c\u003d 0) \u0026\u0026 this.fP2Touched \u0026\u0026 (!this.fP1HitStill || this.fP1Touches \u003c\u003d 0)) {\n                        if(this.ballX \u003e 500 \u0026\u0026 (this.fP2Touches \u003e\u003d 3 || this.hitNetSinceTouched \u0026\u0026 this.fP2Touches \u003e 0 || !this.fP1Touched || this.fP2HitStill \u0026\u0026 this.fP2Touches \u003e 0)) {\n                            ++this.fP2Clangers;\n                            var9 \u003d true;\n                        }\n                    } else {\n                        ++this.fP1Clangers;\n                        var9 \u003d true;\n                    }\n                    if(this.fP1Touched \u0026\u0026 !this.fP2Touched \u0026\u0026 this.ballX \u003e\u003d 500) {\n                        ++this.fP1Aces;\n                        var8 \u003d true;\n                    } else if(this.fP2Touched \u0026\u0026 !this.fP1Touched \u0026\u0026 this.ballX \u003c 500) {\n                        ++this.fP2Aces;\n                        var8 \u003d true;\n                    } else if(this.ballX \u003e 500 \u0026\u0026 this.fP1Touches \u003e 0) {\n                        ++this.fP1Winners;\n                        var3 \u003d true;\n                    } else if(this.ballX \u003c\u003d 500 \u0026\u0026 this.fP2Touches \u003e 0) {\n                        ++this.fP2Winners;\n                        var3 \u003d true;\n                    }\n                    if(Math.abs(this.scoringRun) \u003e 6) {\n                        this.promptMsg \u003d \"Super \" + (this.ballX \u003c\u003d 500?this.slimeColText[this.p2Col]:this.slimeColText[this.p1Col]);\n                    } else {\n                        this.promptMsg \u003d this.ballX \u003c\u003d 500?this.slimeColText[this.p2Col]:this.slimeColText[this.p1Col];\n                    }\n                    if(!this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                        this.promptMsg \u003d \"What can I say?\";\n                    } else if((this.scoringRun \u003c 0?-this.scoringRun:this.scoringRun) \u003d\u003d\u003d 5) {\n                        this.promptMsg \u003d this.promptMsg + \"is heating up!\";\n                    } else if((this.scoringRun \u003c 0?-this.scoringRun:this.scoringRun) \u003d\u003d\u003d 6) {\n                        this.promptMsg \u003d this.promptMsg + \"is on fire!\";\n                        if(this.scoringRun \u003c 0) {\n                            ++this.fP1Super;\n                        } else {\n                            ++this.fP2Super;\n                        }\n                    } else if((this.ballX \u003c\u003d 500 || !this.fP1Touched || this.fP2Touched) \u0026\u0026 (this.ballX \u003e 500 || this.fP1Touched || !this.fP2Touched)) {\n                        if(this.ballX \u003e 500 \u0026\u0026 !this.fP1Touched \u0026\u0026 this.fP2Touched || this.ballX \u003c\u003d 500 \u0026\u0026 this.fP1Touched \u0026\u0026 !this.fP2Touched) {\n                            this.promptMsg \u003d (this.ballX \u003c 500?this.slimeColText[this.p1Col]:this.slimeColText[this.p2Col]) + \"can\\\u0027t serve!\";\n                        } else if(this.fP1PointsWon \u003d\u003d\u003d this.fP2PointsWon) {\n                            this.promptMsg \u003d this.promptMsg + \"draws level!\";\n                        } else if((this.ballX \u003c\u003d 500 || this.fP1PointsWon !\u003d\u003d this.fP2PointsWon + 1) \u0026\u0026 (this.ballX \u003e 500 || this.fP1PointsWon + 1 !\u003d\u003d this.fP2PointsWon)) {\n                            this.promptMsg \u003d this.promptMsg + \"scores!\";\n                        } else {\n                            this.promptMsg \u003d this.promptMsg + \"takes the lead!\";\n                        }\n                    } else {\n                        this.promptMsg \u003d this.promptMsg + \"aces the serve!\";\n                    }\n                    let var6 : number \u003d this.ballX;\n                    this.drawPrompt();\n                    if((-this.scoringRun \u003e\u003d this.fP1Streak || this.scoringRun \u003e\u003d this.fP2Streak) \u0026\u0026 Math.abs(this.scoringRun) \u003e\u003d 3) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Streak + \" \u003c\u003c Longest streak \u003e\u003e \" + this.fP2Streak, 2);\n                    } else if(var9) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Clangers + \" \u003c\u003c Clangers \u003e\u003e \" + this.fP2Clangers, 2);\n                    } else if(var8) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Aces + \" \u003c\u003c Aces \u003e\u003e \" + this.fP2Aces, 2);\n                    } else if(var3) {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1Winners + \" \u003c\u003c Winners \u003e\u003e \" + this.fP2Winners, 2);\n                    } else {\n                        this.drawPrompt$java_lang_String$int(\"\" + this.fP1PointsWon + \" \u003c\u003c Points won \u003e\u003e \" + this.fP2PointsWon, 2);\n                    }\n                    var9 \u003d false;\n                    var8 \u003d false;\n                    var3 \u003d false;\n                    this.drawPrompt$java_lang_String$int(\"Press space for replay...\", 1);\n                    this.mousePressed \u003d false;\n                    this.drawScores();\n                    this.DrawStatus();\n                    if(this.buffered) {\n                        this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n                    }\n                    ShimmedThread.sleep$long$boolean(1000, true);\n                    if(this.mousePressed) {\n                        this.SaveReplayData();\n                        this.DoReplay();\n                    }\n                    this.promptMsg \u003d \"\";\n                    this.drawPrompt();\n                    this.p1X \u003d 200;\n                    this.p1Y \u003d 0;\n                    this.p2X \u003d 800;\n                    this.p2Y \u003d 0;\n                    this.p1XV \u003d 0;\n                    this.p1YV \u003d 0;\n                    this.p2XV \u003d 0;\n                    this.p2YV \u003d 0;\n                    this.ballX \u003d var6 \u003e\u003d 500?200:800;\n                    this.ballY \u003d 400;\n                    this.ballVX \u003d 0;\n                    this.ballVY \u003d 0;\n                    this.replayStart \u003d this.replayPos \u003d 0;\n                    this.fP1Touched \u003d this.fP2Touched \u003d false;\n                    this.fServerMoved \u003d false;\n                    if(this.GAME_LENGTH \u003c\u003d this.gameTime) {\n                        this.endHalf();\n                    }\n                    this.repaint();\n                }\n            }\n            if(this.gameThread !\u003d null) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                } catch(var7) {\n                };\n            }\n        };\n        this.fEndGame \u003d true;\n        this.fInPlay \u003d false;\n        this.promptMsg \u003d \"\";\n        this.repaint();\n    }\n\n    /*private*/ endHalf() {\n        if(this.firstHalf) {\n            this.gameTime \u003d 0;\n            this.firstHalf \u003d false;\n            this.promptMsg \u003d \"It\\\u0027s half time.\";\n            this.drawPrompt();\n            if(this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n            }\n            this.promptMsg \u003d \"\";\n        } else {\n            this.promptMsg \u003d \"\";\n            this.drawPrompt();\n            this.drawPrompt$java_lang_String$int(\"... and that\\\u0027s the game.\", 0);\n            if(this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n            }\n            this.promptMsg \u003d \"\";\n            ShimmedThread.sleep$long$boolean(1000, false);\n            if(this.fP1PointsWon \u003e this.fP2PointsWon) {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p1Col] + \"Wins!\", 1);\n            } else if(this.fP2PointsWon \u003e this.fP1PointsWon) {\n                this.drawPrompt$java_lang_String$int(this.slimeColText[this.p2Col] + \"Wins!\", 1);\n            } else {\n                this.drawPrompt$java_lang_String$int(\"It\\\u0027s a draw!\", 1);\n            }\n            if(this.buffered) {\n                this.getGraphics().drawImage(this.buffer, 0, 0, \u003cShimmedImageObserver\u003enull);\n            }\n            this.gameTime \u003d 0;\n            this.firstHalf \u003d true;\n        }\n        ShimmedThread.sleep$long$boolean(3000, false);\n        this.p1X \u003d 200;\n        this.p1Y \u003d 0;\n        this.p2X \u003d 800;\n        this.p2Y \u003d 0;\n        this.p1XV \u003d 0;\n        this.p1YV \u003d 0;\n        this.p2XV \u003d 0;\n        this.p2YV \u003d 0;\n        this.ballX \u003d this.firstHalf?200:800;\n        this.ballY \u003d 400;\n        this.ballVX \u003d 0;\n        this.ballVY \u003d 0;\n        this.replayStart \u003d this.replayPos \u003d 0;\n        this.fP1Touched \u003d this.fP2Touched \u003d false;\n        this.fServerMoved \u003d false;\n        this.repaint();\n        this.gameThread \u003d null;\n    }\n\n    /*private*/ DoReplay() {\n        let var1 : ShimmedFontMetrics \u003d this.screen.getFontMetrics();\n        let var2 : number \u003d var1.getHeight();\n        this.promptMsg \u003d \"Press space to continue...\";\n        this.mousePressed \u003d false;\n        let var3 : number \u003d this.scoringRun;\n        this.scoringRun \u003d this.oldScoringRun;\n        let var4 : number \u003d this.replayStart;\n        let var5 : boolean \u003d false;\n        this.drawCourt(this.screen);\n        while((!this.mousePressed)) {\n            ++var4;\n            if(var4 \u003e\u003d 200) {\n                var4 \u003d 0;\n            }\n            if(var4 \u003d\u003d\u003d this.replayPos) {\n                this.screen.setColor(ShimmedColor.white);\n                this.screen.fillRect(20, 20, 20, 20);\n                ShimmedThread.sleep$long$boolean(1000, false);\n                var5 \u003d !var5;\n                this.paint(this.screen);\n                this.screen.setColor(this.SKY_COL);\n                this.screen.fillRect(0, 0, this.nWidth, (this.nHeight / 20|0) + 22);\n                if(this.replayPos \u003c this.replayStart) {\n                    var4 +\u003d 200;\n                }\n                while((var4 \u003e this.replayStart)) {\n                    var4 -\u003d 5;\n                    this.drawCourt(this.screen);\n                    this.screen.setColor(ShimmedColor.white);\n                    this.screen.fillPolygon$ShimmedPolygon(new ShimmedPolygon([20, 35, 35, 50, 50, 35, 35, 20], [30, 20, 30, 20, 40, 30, 40, 30], 8));\n                    if(var4 \u003c this.replayStart) {\n                        var4 \u003d this.replayStart;\n                    }\n                    this.ReplayFrame(var4 % 200);\n                    ShimmedThread.sleep$long$boolean(20, false);\n                };\n                this.drawCourt(this.screen);\n                this.screen.setColor(ShimmedColor.white);\n                this.screen.fillRect(20, 20, 20, 20);\n                this.ReplayFrame(this.replayStart);\n                ShimmedThread.sleep$long$boolean(500, false);\n                this.drawCourt(this.screen);\n            }\n            this.ReplayFrame(var4);\n            try {\n                ShimmedThread.sleep$long(var5?60:20);\n            } catch(var7) {\n            };\n            this.screen.setColor(ShimmedColor.white);\n            this.screen.fillPolygon$ShimmedPolygon(new ShimmedPolygon([20, 35, 20], [20, 30, 40], 3));\n            this.screen.drawString(var5?\"Slow motion replay\":\"Replay\", 60, 35 - (var2 / 2|0));\n        };\n        this.scoringRun \u003d var3;\n        this.promptMsg \u003d \"\";\n        this.paint(this.screen);\n    }\n\n    /*private*/ drawCourt(var1 : ShimmedGraphics) {\n        var1.setColor(this.SKY_COL);\n        var1.fillRect(0, 0, this.nWidth, (4 * this.nHeight / 5|0));\n        var1.setColor(this.COURT_COL);\n        var1.fillRect(0, (4 * this.nHeight / 5|0), this.nWidth, (this.nHeight / 5|0));\n        var1.setColor(ShimmedColor.white);\n        var1.fillRect((this.nWidth / 2|0) - 2, (7 * this.nHeight / 10|0), 4, (this.nHeight / 10|0) + 5);\n        this.drawPrompt();\n    }\n\n    /*private*/ unDrawParticles() {\n        this.screen.setColor(this.SKY_COL);\n        for(let var1 : number \u003d 0; var1 \u003c this.NUM_PARTICLES; ++var1) {\n            this.screen.fillOval(this.particle_x[var1], this.particle_y[var1], this.particle_size, this.particle_size);\n        };\n    }\n\n    /*private*/ updateParticles() {\n        for(let var1 : number \u003d 0; var1 \u003c this.NUM_PARTICLES; ++var1) {\n            this.particle_x[var1] \u003d (\u003cnumber\u003e(\u003cnumber\u003ethis.particle_x[var1] + this.particle_weight[var1] * \u003cnumber\u003ethis.wind / 3.0)|0);\n            let var2 : number \u003d (\u003cnumber\u003e(this.particle_weight[var1] * 3.0)|0);\n            this.particle_y[var1] +\u003d var2 \u003e 0?var2:1;\n            if(this.particle_x[var1] \u003c 0 || this.particle_x[var1] \u003e this.nWidth || this.particle_y[var1] \u003e this.floor) {\n                if(Math.random() \u003e \u003cnumber\u003eMath.abs(\u003cnumber\u003ethis.wind / 60.0)) {\n                    this.particle_x[var1] \u003d (\u003cnumber\u003e(Math.random() * \u003cnumber\u003ethis.nWidth)|0);\n                    this.particle_y[var1] \u003d 0;\n                } else if(this.wind \u003e 0) {\n                    this.particle_x[var1] \u003d -1;\n                    this.particle_y[var1] \u003d (\u003cnumber\u003e(Math.random() * \u003cnumber\u003ethis.floor)|0);\n                } else {\n                    this.particle_x[var1] \u003d this.nWidth + 1;\n                    this.particle_y[var1] \u003d (\u003cnumber\u003e(Math.random() * \u003cnumber\u003ethis.floor)|0);\n                }\n            }\n        };\n    }\n\n    /*private*/ drawParticles() {\n        for(let var2 : number \u003d 0; var2 \u003c this.NUM_PARTICLES; ++var2) {\n            let var1 : number \u003d (\u003cnumber\u003e(170.0 * this.particle_weight[var2])|0);\n            this.screen.setColor(new ShimmedColor(85 + var1, 85 + var1, 255));\n            this.screen.fillOval(this.particle_x[var2], this.particle_y[var2], this.particle_size, this.particle_size);\n        };\n    }\n\n    /*private*/ sleep(var1 : number, var3 : boolean) {\n        if(this.gameThread !\u003d null) {\n            for(let var4 : number \u003d 0; Math.floor(\u003cnumber\u003evar4) \u003c Math.floor(var1 / 20); ++var4) {\n                try {\n                    ShimmedThread.sleep$long(20);\n                } catch(var6) {\n                };\n                if(var3) {\n                    this.DrawStatus();\n                    if(this.windOn) {\n                        this.doWind();\n                        this.unDrawParticles();\n                        this.updateParticles();\n                        this.drawParticles();\n                        this.screen.setColor(ShimmedColor.white);\n                        this.screen.fillRect((this.nWidth / 2|0) - 2, (7 * this.nHeight / 10|0), 4, (this.nHeight / 10|0) + 5);\n                    }\n                }\n            };\n        }\n    }\n\n    public destroy() {\n        this.gameThread.stop();\n        this.gameThread \u003d null;\n    }\n}\nSlime2P[\"__class\"] \u003d \"Slime2P\";\nSlime2P[\"__interfaces\"] \u003d [\"ShimmedRunnable\"];\n\n\n\nclass ShimmedBufferedImage extends ShimmedImage {\n    public constructor(x : number, y : number, z : number) {\n        super();\n    }\n\n    public getSubimage(a : number, b : number, c : number, d : number) : ShimmedBufferedImage {\n        return null;\n    }\n}\nShimmedBufferedImage[\"__class\"] \u003d \"ShimmedBufferedImage\";\n\n\nclass ShimmedFrame extends ShimmedElement {\n    public setTitle(s : string) {\n    }\n\n    public pack() {\n    }\n\n    public show() {\n    }\n\n    public dispose() {\n    }\n\n    public setLayout(g : ShimmedGridLayout) {\n    }\n}\nShimmedFrame[\"__class\"] \u003d \"ShimmedFrame\";\n\n\nclass ShimmedTextField extends ShimmedElement {\n    public constructor(s : number) {\n        super();\n    }\n\n    public getText() : string {\n        return null;\n    }\n}\nShimmedTextField[\"__class\"] \u003d \"ShimmedTextField\";\n\n\nclass ShimmedButton extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedButton[\"__class\"] \u003d \"ShimmedButton\";\n\n\nclass ShimmedPanel extends ShimmedElement {}\nShimmedPanel[\"__class\"] \u003d \"ShimmedPanel\";\n\n\nclass ShimmedLabel extends ShimmedElement {\n    public constructor(s : string) {\n        super();\n    }\n}\nShimmedLabel[\"__class\"] \u003d \"ShimmedLabel\";\n\n\n\n",
  "packageName": "_"
}